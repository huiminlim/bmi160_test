
bmi160_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000068  00800100  00000be0  00000c74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000be0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005a  00800168  00800168  00000cdc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000cdc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000d78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002071  00000000  00000000  00000eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ed2  00000000  00000000  00002f29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ea0  00000000  00000000  00003dfb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000304  00000000  00000000  00005c9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000130f9  00000000  00000000  00005fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010a7  00000000  00000000  00019099  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  0001a140  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00001585  00000000  00000000  0001a230  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ee       	ldi	r30, 0xE0	; 224
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 36       	cpi	r26, 0x68	; 104
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e6       	ldi	r26, 0x68	; 104
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 3c       	cpi	r26, 0xC2	; 194
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	39 d2       	rcall	.+1138   	; 0x50e <main>
  9c:	9f c5       	rjmp	.+2878   	; 0xbdc <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <spixfer>:
    uint8_t b = reg_read(reg);
    uint8_t mask = (1 << len) - 1;
    b >>= pos;
    b &= mask;
    return b;
}
  a0:	8e bd       	out	0x2e, r24	; 46
  a2:	00 00       	nop
  a4:	0d b4       	in	r0, 0x2d	; 45
  a6:	07 fe       	sbrs	r0, 7
  a8:	fd cf       	rjmp	.-6      	; 0xa4 <spixfer+0x4>
  aa:	8e b5       	in	r24, 0x2e	; 46
  ac:	08 95       	ret

000000ae <read8>:
  ae:	2a 98       	cbi	0x05, 2	; 5
  b0:	80 68       	ori	r24, 0x80	; 128
  b2:	f6 df       	rcall	.-20     	; 0xa0 <spixfer>
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	f4 df       	rcall	.-24     	; 0xa0 <spixfer>
  b8:	2a 9a       	sbi	0x05, 2	; 5
  ba:	08 95       	ret

000000bc <reg_read>:
  bc:	f8 cf       	rjmp	.-16     	; 0xae <read8>
  be:	08 95       	ret

000000c0 <get_rotation>:
    @param y 16-bit signed integer container for Y-axis rotation
    @param z 16-bit signed integer container for Z-axis rotation
    @see getMotion6()
    @see BMI160_RA_GYRO_X_L
*/
void get_rotation(int16_t *x, int16_t *y, int16_t *z) {
  c0:	6f 92       	push	r6
  c2:	7f 92       	push	r7
  c4:	8f 92       	push	r8
  c6:	9f 92       	push	r9
  c8:	af 92       	push	r10
  ca:	bf 92       	push	r11
  cc:	cf 92       	push	r12
  ce:	df 92       	push	r13
  d0:	ef 92       	push	r14
  d2:	ff 92       	push	r15
  d4:	0f 93       	push	r16
  d6:	1f 93       	push	r17
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	00 d0       	rcall	.+0      	; 0xde <get_rotation+0x1e>
  de:	00 d0       	rcall	.+0      	; 0xe0 <get_rotation+0x20>
  e0:	00 d0       	rcall	.+0      	; 0xe2 <get_rotation+0x22>
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
  e6:	4c 01       	movw	r8, r24
  e8:	5b 01       	movw	r10, r22
  ea:	3a 01       	movw	r6, r20
    //*z = (((int16_t)buffer[5]) << 8) | buffer[4];

    uint8_t buffer[6];

    // Send address to read from and read first byte
    buffer[0] = read8(BMI160_RA_GYRO_X_L);
  ec:	8c e0       	ldi	r24, 0x0C	; 12
  ee:	df df       	rcall	.-66     	; 0xae <read8>
  f0:	89 83       	std	Y+1, r24	; 0x01

    printf("Byte 1: %d\r\n", buffer[0]);
  f2:	1f 92       	push	r1
  f4:	8f 93       	push	r24
  f6:	8e e0       	ldi	r24, 0x0E	; 14
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	9f 93       	push	r25
  fc:	8f 93       	push	r24
  fe:	72 d2       	rcall	.+1252   	; 0x5e4 <printf>
 100:	6e 01       	movw	r12, r28
 102:	82 e0       	ldi	r24, 0x02	; 2
 104:	c8 0e       	add	r12, r24
 106:	d1 1c       	adc	r13, r1
 108:	0f 90       	pop	r0
 10a:	0f 90       	pop	r0
 10c:	0f 90       	pop	r0
 10e:	0f 90       	pop	r0

    // Read remaining 5 bytes
    for (int i = 1; i < 6; i++) {
 110:	01 e0       	ldi	r16, 0x01	; 1
 112:	10 e0       	ldi	r17, 0x00	; 0
        buffer[i] = spixfer(0);
        printf("Byte %d: %d\r\n", i, buffer[i]);
 114:	0f 2e       	mov	r0, r31
 116:	fb e1       	ldi	r31, 0x1B	; 27
 118:	ef 2e       	mov	r14, r31
 11a:	f1 e0       	ldi	r31, 0x01	; 1
 11c:	ff 2e       	mov	r15, r31

    printf("Byte 1: %d\r\n", buffer[0]);

    // Read remaining 5 bytes
    for (int i = 1; i < 6; i++) {
        buffer[i] = spixfer(0);
 11e:	f0 2d       	mov	r31, r0
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	be df       	rcall	.-132    	; 0xa0 <spixfer>
 124:	f6 01       	movw	r30, r12
 126:	81 93       	st	Z+, r24
 128:	6f 01       	movw	r12, r30
        printf("Byte %d: %d\r\n", i, buffer[i]);
 12a:	1f 92       	push	r1
 12c:	8f 93       	push	r24
 12e:	1f 93       	push	r17
 130:	0f 93       	push	r16
 132:	ff 92       	push	r15
 134:	ef 92       	push	r14
 136:	56 d2       	rcall	.+1196   	; 0x5e4 <printf>
    buffer[0] = read8(BMI160_RA_GYRO_X_L);

    printf("Byte 1: %d\r\n", buffer[0]);

    // Read remaining 5 bytes
    for (int i = 1; i < 6; i++) {
 138:	0f 5f       	subi	r16, 0xFF	; 255
 13a:	1f 4f       	sbci	r17, 0xFF	; 255
 13c:	0f 90       	pop	r0
 13e:	0f 90       	pop	r0
 140:	0f 90       	pop	r0
 142:	0f 90       	pop	r0
 144:	0f 90       	pop	r0
 146:	0f 90       	pop	r0
 148:	06 30       	cpi	r16, 0x06	; 6
 14a:	11 05       	cpc	r17, r1
 14c:	49 f7       	brne	.-46     	; 0x120 <get_rotation+0x60>
        buffer[i] = spixfer(0);
        printf("Byte %d: %d\r\n", i, buffer[i]);
    }

    *x = (((int16_t)buffer[1]) << 8) | buffer[0];
 14e:	8a 81       	ldd	r24, Y+2	; 0x02
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	98 2f       	mov	r25, r24
 154:	88 27       	eor	r24, r24
 156:	29 81       	ldd	r18, Y+1	; 0x01
 158:	82 2b       	or	r24, r18
 15a:	f4 01       	movw	r30, r8
 15c:	91 83       	std	Z+1, r25	; 0x01
 15e:	80 83       	st	Z, r24
    *y = (((int16_t)buffer[3]) << 8) | buffer[2];
 160:	8c 81       	ldd	r24, Y+4	; 0x04
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	98 2f       	mov	r25, r24
 166:	88 27       	eor	r24, r24
 168:	2b 81       	ldd	r18, Y+3	; 0x03
 16a:	82 2b       	or	r24, r18
 16c:	f5 01       	movw	r30, r10
 16e:	91 83       	std	Z+1, r25	; 0x01
 170:	80 83       	st	Z, r24
    *z = (((int16_t)buffer[5]) << 8) | buffer[4];
 172:	8e 81       	ldd	r24, Y+6	; 0x06
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	98 2f       	mov	r25, r24
 178:	88 27       	eor	r24, r24
 17a:	2d 81       	ldd	r18, Y+5	; 0x05
 17c:	82 2b       	or	r24, r18
 17e:	f3 01       	movw	r30, r6
 180:	91 83       	std	Z+1, r25	; 0x01
 182:	80 83       	st	Z, r24
}
 184:	26 96       	adiw	r28, 0x06	; 6
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	f8 94       	cli
 18a:	de bf       	out	0x3e, r29	; 62
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	cd bf       	out	0x3d, r28	; 61
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	1f 91       	pop	r17
 196:	0f 91       	pop	r16
 198:	ff 90       	pop	r15
 19a:	ef 90       	pop	r14
 19c:	df 90       	pop	r13
 19e:	cf 90       	pop	r12
 1a0:	bf 90       	pop	r11
 1a2:	af 90       	pop	r10
 1a4:	9f 90       	pop	r9
 1a6:	8f 90       	pop	r8
 1a8:	7f 90       	pop	r7
 1aa:	6f 90       	pop	r6
 1ac:	08 95       	ret

000001ae <read_gyro>:
    }

    set_full_scale_gyro_range(bmi_range);
}

void read_gyro(int32_t *x, int32_t *y, int32_t *z) {
 1ae:	cf 92       	push	r12
 1b0:	df 92       	push	r13
 1b2:	ef 92       	push	r14
 1b4:	ff 92       	push	r15
 1b6:	0f 93       	push	r16
 1b8:	1f 93       	push	r17
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	00 d0       	rcall	.+0      	; 0x1c0 <read_gyro+0x12>
 1c0:	00 d0       	rcall	.+0      	; 0x1c2 <read_gyro+0x14>
 1c2:	00 d0       	rcall	.+0      	; 0x1c4 <read_gyro+0x16>
 1c4:	cd b7       	in	r28, 0x3d	; 61
 1c6:	de b7       	in	r29, 0x3e	; 62
 1c8:	6c 01       	movw	r12, r24
 1ca:	7b 01       	movw	r14, r22
 1cc:	8a 01       	movw	r16, r20
    int16_t sx = 0, sy = 0, sz = 0;
 1ce:	1a 82       	std	Y+2, r1	; 0x02
 1d0:	19 82       	std	Y+1, r1	; 0x01
 1d2:	1c 82       	std	Y+4, r1	; 0x04
 1d4:	1b 82       	std	Y+3, r1	; 0x03
 1d6:	1e 82       	std	Y+6, r1	; 0x06
 1d8:	1d 82       	std	Y+5, r1	; 0x05

    get_rotation(&sx, &sy, &sz);
 1da:	ae 01       	movw	r20, r28
 1dc:	4b 5f       	subi	r20, 0xFB	; 251
 1de:	5f 4f       	sbci	r21, 0xFF	; 255
 1e0:	be 01       	movw	r22, r28
 1e2:	6d 5f       	subi	r22, 0xFD	; 253
 1e4:	7f 4f       	sbci	r23, 0xFF	; 255
 1e6:	ce 01       	movw	r24, r28
 1e8:	01 96       	adiw	r24, 0x01	; 1
 1ea:	6a df       	rcall	.-300    	; 0xc0 <get_rotation>

    *x = (int32_t) sx;
 1ec:	89 81       	ldd	r24, Y+1	; 0x01
 1ee:	9a 81       	ldd	r25, Y+2	; 0x02
 1f0:	09 2e       	mov	r0, r25
 1f2:	00 0c       	add	r0, r0
 1f4:	aa 0b       	sbc	r26, r26
 1f6:	bb 0b       	sbc	r27, r27
 1f8:	f6 01       	movw	r30, r12
 1fa:	80 83       	st	Z, r24
 1fc:	91 83       	std	Z+1, r25	; 0x01
 1fe:	a2 83       	std	Z+2, r26	; 0x02
 200:	b3 83       	std	Z+3, r27	; 0x03
    *y = (int32_t) sy;
 202:	8b 81       	ldd	r24, Y+3	; 0x03
 204:	9c 81       	ldd	r25, Y+4	; 0x04
 206:	09 2e       	mov	r0, r25
 208:	00 0c       	add	r0, r0
 20a:	aa 0b       	sbc	r26, r26
 20c:	bb 0b       	sbc	r27, r27
 20e:	f7 01       	movw	r30, r14
 210:	80 83       	st	Z, r24
 212:	91 83       	std	Z+1, r25	; 0x01
 214:	a2 83       	std	Z+2, r26	; 0x02
 216:	b3 83       	std	Z+3, r27	; 0x03
    *z = (int32_t) sz;
 218:	8d 81       	ldd	r24, Y+5	; 0x05
 21a:	9e 81       	ldd	r25, Y+6	; 0x06
 21c:	09 2e       	mov	r0, r25
 21e:	00 0c       	add	r0, r0
 220:	aa 0b       	sbc	r26, r26
 222:	bb 0b       	sbc	r27, r27
 224:	f8 01       	movw	r30, r16
 226:	80 83       	st	Z, r24
 228:	91 83       	std	Z+1, r25	; 0x01
 22a:	a2 83       	std	Z+2, r26	; 0x02
 22c:	b3 83       	std	Z+3, r27	; 0x03
}
 22e:	26 96       	adiw	r28, 0x06	; 6
 230:	0f b6       	in	r0, 0x3f	; 63
 232:	f8 94       	cli
 234:	de bf       	out	0x3e, r29	; 62
 236:	0f be       	out	0x3f, r0	; 63
 238:	cd bf       	out	0x3d, r28	; 61
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	1f 91       	pop	r17
 240:	0f 91       	pop	r16
 242:	ff 90       	pop	r15
 244:	ef 90       	pop	r14
 246:	df 90       	pop	r13
 248:	cf 90       	pop	r12
 24a:	08 95       	ret

0000024c <spi_init>:
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 24c:	2a 9a       	sbi	0x05, 2	; 5
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
 24e:	22 9a       	sbi	0x04, 2	; 4

    // Set SS as output pin
    ioport_set_pin_dir(SPI_HARDWARE_SS, IOPORT_DIR_OUTPUT);

    // Initialize as SPI master
    SPCR |= (1 << MSTR);
 250:	8c b5       	in	r24, 0x2c	; 44
 252:	80 61       	ori	r24, 0x10	; 16
 254:	8c bd       	out	0x2c, r24	; 44
    SPCR |= (1 << SPE);
 256:	8c b5       	in	r24, 0x2c	; 44
 258:	80 64       	ori	r24, 0x40	; 64
 25a:	8c bd       	out	0x2c, r24	; 44
 25c:	25 9a       	sbi	0x04, 5	; 4
 25e:	23 9a       	sbi	0x04, 3	; 4
    ioport_set_pin_dir(SPI_HARDWARE_MOSI, IOPORT_DIR_OUTPUT);

    // MISO pin is override to Input automatically
    //ioport_set_pin_dir(SPI_HARDWARE_MISO, IOPORT_DIR_INPUT);

    num_initialized = 0;
 260:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <__data_end+0x1>
 264:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <__data_end>
 268:	08 95       	ret

0000026a <uart_putchar>:
/*
    Send character c down the UART Tx, wait until tx holding register
    is empty.
*/
int
uart_putchar(char c, FILE *stream) {
 26a:	cf 93       	push	r28
 26c:	c8 2f       	mov	r28, r24

    if (c == '\a') {
 26e:	87 30       	cpi	r24, 0x07	; 7
 270:	61 f4       	brne	.+24     	; 0x28a <uart_putchar+0x20>
        fputs("*ring*\n", stderr);
 272:	20 91 c0 01 	lds	r18, 0x01C0	; 0x8001c0 <__iob+0x4>
 276:	30 91 c1 01 	lds	r19, 0x01C1	; 0x8001c1 <__iob+0x5>
 27a:	47 e0       	ldi	r20, 0x07	; 7
 27c:	50 e0       	ldi	r21, 0x00	; 0
 27e:	61 e0       	ldi	r22, 0x01	; 1
 280:	70 e0       	ldi	r23, 0x00	; 0
 282:	89 e2       	ldi	r24, 0x29	; 41
 284:	91 e0       	ldi	r25, 0x01	; 1
 286:	7c d1       	rcall	.+760    	; 0x580 <fwrite>
        return 0;
 288:	0b c0       	rjmp	.+22     	; 0x2a0 <uart_putchar+0x36>
    }

    if (c == '\n') {
 28a:	8a 30       	cpi	r24, 0x0A	; 10
 28c:	11 f4       	brne	.+4      	; 0x292 <uart_putchar+0x28>
        uart_putchar('\r', stream);
 28e:	8d e0       	ldi	r24, 0x0D	; 13
 290:	ec df       	rcall	.-40     	; 0x26a <uart_putchar>
    }

    loop_until_bit_is_set(UCSR0A, UDRE0);
 292:	e0 ec       	ldi	r30, 0xC0	; 192
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	80 81       	ld	r24, Z
 298:	85 ff       	sbrs	r24, 5
 29a:	fd cf       	rjmp	.-6      	; 0x296 <uart_putchar+0x2c>
    UDR0 = c;
 29c:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>

    return 0;
}
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	cf 91       	pop	r28
 2a6:	08 95       	ret

000002a8 <uart_getchar>:

    Successive calls to uart_getchar() will be satisfied from the
    internal buffer until that buffer is emptied again.
*/
int
uart_getchar(FILE *stream) {
 2a8:	6f 92       	push	r6
 2aa:	7f 92       	push	r7
 2ac:	8f 92       	push	r8
 2ae:	9f 92       	push	r9
 2b0:	af 92       	push	r10
 2b2:	bf 92       	push	r11
 2b4:	cf 92       	push	r12
 2b6:	df 92       	push	r13
 2b8:	ef 92       	push	r14
 2ba:	ff 92       	push	r15
 2bc:	0f 93       	push	r16
 2be:	1f 93       	push	r17
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
    uint8_t c;
    char *cp, *cp2;
    static char b[RX_BUFSIZE];
    static char *rxp;

    if (rxp == 0)
 2c4:	20 91 ba 01 	lds	r18, 0x01BA	; 0x8001ba <rxp.2118>
 2c8:	30 91 bb 01 	lds	r19, 0x01BB	; 0x8001bb <rxp.2118+0x1>
 2cc:	23 2b       	or	r18, r19
 2ce:	09 f0       	breq	.+2      	; 0x2d2 <uart_getchar+0x2a>
 2d0:	cc c0       	rjmp	.+408    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 2d2:	8c 01       	movw	r16, r24
 2d4:	0f 2e       	mov	r0, r31
 2d6:	fa e6       	ldi	r31, 0x6A	; 106
 2d8:	8f 2e       	mov	r8, r31
 2da:	f1 e0       	ldi	r31, 0x01	; 1
 2dc:	9f 2e       	mov	r9, r31
 2de:	f0 2d       	mov	r31, r0
        for (cp = b;;) {
            loop_until_bit_is_set(UCSR0A, RXC0);
 2e0:	c0 ec       	ldi	r28, 0xC0	; 192
 2e2:	d0 e0       	ldi	r29, 0x00	; 0

            if (UCSR0A & _BV(DOR0)) {
                return _FDEV_ERR;
            }

            c = UDR0;
 2e4:	0f 2e       	mov	r0, r31
 2e6:	f6 ec       	ldi	r31, 0xC6	; 198
 2e8:	cf 2e       	mov	r12, r31
 2ea:	d1 2c       	mov	r13, r1
 2ec:	f0 2d       	mov	r31, r0
 2ee:	54 01       	movw	r10, r8
 2f0:	0f 2e       	mov	r0, r31
 2f2:	f9 e6       	ldi	r31, 0x69	; 105
 2f4:	6f 2e       	mov	r6, r31
 2f6:	f1 e0       	ldi	r31, 0x01	; 1
 2f8:	7f 2e       	mov	r7, r31
 2fa:	f0 2d       	mov	r31, r0
    static char b[RX_BUFSIZE];
    static char *rxp;

    if (rxp == 0)
        for (cp = b;;) {
            loop_until_bit_is_set(UCSR0A, RXC0);
 2fc:	88 81       	ld	r24, Y
 2fe:	88 23       	and	r24, r24
 300:	ec f7       	brge	.-6      	; 0x2fc <uart_getchar+0x54>

            if (UCSR0A & _BV(FE0)) {
 302:	88 81       	ld	r24, Y
 304:	84 fd       	sbrc	r24, 4
 306:	c4 c0       	rjmp	.+392    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
                return _FDEV_EOF;
            }

            if (UCSR0A & _BV(DOR0)) {
 308:	88 81       	ld	r24, Y
 30a:	83 fd       	sbrc	r24, 3
 30c:	c4 c0       	rjmp	.+392    	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
                return _FDEV_ERR;
            }

            c = UDR0;
 30e:	f6 01       	movw	r30, r12
 310:	80 81       	ld	r24, Z

            /* behaviour similar to Unix stty ICRNL */
            if (c == '\r') {
 312:	8d 30       	cpi	r24, 0x0D	; 13
 314:	11 f0       	breq	.+4      	; 0x31a <uart_getchar+0x72>
                c = '\n';
            }

            if (c == '\n') {
 316:	8a 30       	cpi	r24, 0x0A	; 10
 318:	61 f4       	brne	.+24     	; 0x332 <uart_getchar+0x8a>
                *cp = c;
 31a:	8a e0       	ldi	r24, 0x0A	; 10
 31c:	f4 01       	movw	r30, r8
 31e:	80 83       	st	Z, r24
                uart_putchar(c, stream);
 320:	b8 01       	movw	r22, r16
 322:	a3 df       	rcall	.-186    	; 0x26a <uart_putchar>
                rxp = b;
 324:	8a e6       	ldi	r24, 0x6A	; 106
 326:	91 e0       	ldi	r25, 0x01	; 1
 328:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <rxp.2118+0x1>
 32c:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <rxp.2118>
                break;
 330:	9c c0       	rjmp	.+312    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
            }
            else if (c == '\t') {
 332:	89 30       	cpi	r24, 0x09	; 9
 334:	39 f0       	breq	.+14     	; 0x344 <uart_getchar+0x9c>
                c = ' ';
            }

            if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
 336:	90 ee       	ldi	r25, 0xE0	; 224
 338:	98 0f       	add	r25, r24
 33a:	9f 35       	cpi	r25, 0x5F	; 95
 33c:	20 f0       	brcs	.+8      	; 0x346 <uart_getchar+0x9e>
 33e:	80 3a       	cpi	r24, 0xA0	; 160
 340:	a8 f0       	brcs	.+42     	; 0x36c <uart_getchar+0xc4>
 342:	01 c0       	rjmp	.+2      	; 0x346 <uart_getchar+0x9e>
                uart_putchar(c, stream);
                rxp = b;
                break;
            }
            else if (c == '\t') {
                c = ' ';
 344:	80 e2       	ldi	r24, 0x20	; 32
            }

            if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
                    c >= (uint8_t)'\xa0') {
                if (cp == b + RX_BUFSIZE - 1) {
 346:	f9 eb       	ldi	r31, 0xB9	; 185
 348:	8f 16       	cp	r8, r31
 34a:	f1 e0       	ldi	r31, 0x01	; 1
 34c:	9f 06       	cpc	r9, r31
 34e:	21 f4       	brne	.+8      	; 0x358 <uart_getchar+0xb0>
                    uart_putchar('\a', stream);
 350:	b8 01       	movw	r22, r16
 352:	87 e0       	ldi	r24, 0x07	; 7
 354:	8a df       	rcall	.-236    	; 0x26a <uart_putchar>
 356:	d2 cf       	rjmp	.-92     	; 0x2fc <uart_getchar+0x54>
                }
                else {
                    *cp++ = c;
 358:	74 01       	movw	r14, r8
 35a:	9f ef       	ldi	r25, 0xFF	; 255
 35c:	e9 1a       	sub	r14, r25
 35e:	f9 0a       	sbc	r15, r25
 360:	f4 01       	movw	r30, r8
                    uart_putchar(c, stream);
 362:	80 83       	st	Z, r24
 364:	b8 01       	movw	r22, r16
 366:	81 df       	rcall	.-254    	; 0x26a <uart_putchar>
                    c >= (uint8_t)'\xa0') {
                if (cp == b + RX_BUFSIZE - 1) {
                    uart_putchar('\a', stream);
                }
                else {
                    *cp++ = c;
 368:	47 01       	movw	r8, r14
 36a:	c8 cf       	rjmp	.-112    	; 0x2fc <uart_getchar+0x54>
                }

                continue;
            }

            switch (c) {
 36c:	82 31       	cpi	r24, 0x12	; 18
 36e:	b9 f1       	breq	.+110    	; 0x3de <uart_getchar+0x136>
 370:	30 f4       	brcc	.+12     	; 0x37e <uart_getchar+0xd6>
 372:	83 30       	cpi	r24, 0x03	; 3
 374:	09 f4       	brne	.+2      	; 0x378 <uart_getchar+0xd0>
 376:	92 c0       	rjmp	.+292    	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 378:	88 30       	cpi	r24, 0x08	; 8
 37a:	e9 f0       	breq	.+58     	; 0x3b6 <uart_getchar+0x10e>
 37c:	bf cf       	rjmp	.-130    	; 0x2fc <uart_getchar+0x54>
 37e:	87 31       	cpi	r24, 0x17	; 23
 380:	29 f0       	breq	.+10     	; 0x38c <uart_getchar+0xe4>
 382:	8f 37       	cpi	r24, 0x7F	; 127
 384:	c1 f0       	breq	.+48     	; 0x3b6 <uart_getchar+0x10e>
 386:	85 31       	cpi	r24, 0x15	; 21
 388:	79 f0       	breq	.+30     	; 0x3a8 <uart_getchar+0x100>
 38a:	b8 cf       	rjmp	.-144    	; 0x2fc <uart_getchar+0x54>
                }

                break;

            case 'w' & 0x1f:
                while (cp > b && cp[-1] != ' ') {
 38c:	fa e6       	ldi	r31, 0x6A	; 106
 38e:	8f 16       	cp	r8, r31
 390:	f1 e0       	ldi	r31, 0x01	; 1
 392:	9f 06       	cpc	r9, r31
 394:	09 f0       	breq	.+2      	; 0x398 <uart_getchar+0xf0>
 396:	08 f4       	brcc	.+2      	; 0x39a <uart_getchar+0xf2>
 398:	b1 cf       	rjmp	.-158    	; 0x2fc <uart_getchar+0x54>
 39a:	f4 01       	movw	r30, r8
 39c:	31 97       	sbiw	r30, 0x01	; 1
 39e:	80 81       	ld	r24, Z
 3a0:	80 32       	cpi	r24, 0x20	; 32
 3a2:	09 f0       	breq	.+2      	; 0x3a6 <uart_getchar+0xfe>
 3a4:	4a c0       	rjmp	.+148    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 3a6:	aa cf       	rjmp	.-172    	; 0x2fc <uart_getchar+0x54>
                }

                break;

            case 'u' & 0x1f:
                while (cp > b) {
 3a8:	8a e6       	ldi	r24, 0x6A	; 106
 3aa:	88 16       	cp	r8, r24
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	98 06       	cpc	r9, r24
 3b0:	09 f0       	breq	.+2      	; 0x3b4 <uart_getchar+0x10c>
 3b2:	70 f5       	brcc	.+92     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3b4:	a3 cf       	rjmp	.-186    	; 0x2fc <uart_getchar+0x54>
            case 'c' & 0x1f:
                return -1;

            case '\b':
            case '\x7f':
                if (cp > b) {
 3b6:	9a e6       	ldi	r25, 0x6A	; 106
 3b8:	89 16       	cp	r8, r25
 3ba:	91 e0       	ldi	r25, 0x01	; 1
 3bc:	99 06       	cpc	r9, r25
 3be:	09 f0       	breq	.+2      	; 0x3c2 <uart_getchar+0x11a>
 3c0:	08 f4       	brcc	.+2      	; 0x3c4 <uart_getchar+0x11c>
                    uart_putchar('\b', stream);
 3c2:	9c cf       	rjmp	.-200    	; 0x2fc <uart_getchar+0x54>
 3c4:	b8 01       	movw	r22, r16
 3c6:	88 e0       	ldi	r24, 0x08	; 8
                    uart_putchar(' ', stream);
 3c8:	50 df       	rcall	.-352    	; 0x26a <uart_putchar>
 3ca:	b8 01       	movw	r22, r16
 3cc:	80 e2       	ldi	r24, 0x20	; 32
                    uart_putchar('\b', stream);
 3ce:	4d df       	rcall	.-358    	; 0x26a <uart_putchar>
 3d0:	b8 01       	movw	r22, r16
 3d2:	88 e0       	ldi	r24, 0x08	; 8
 3d4:	4a df       	rcall	.-364    	; 0x26a <uart_putchar>
                    cp--;
 3d6:	e1 e0       	ldi	r30, 0x01	; 1
 3d8:	8e 1a       	sub	r8, r30
 3da:	91 08       	sbc	r9, r1
                }

                break;

            case 'r' & 0x1f:
                uart_putchar('\r', stream);
 3dc:	8f cf       	rjmp	.-226    	; 0x2fc <uart_getchar+0x54>
 3de:	b8 01       	movw	r22, r16
 3e0:	8d e0       	ldi	r24, 0x0D	; 13
 3e2:	43 df       	rcall	.-378    	; 0x26a <uart_putchar>

                for (cp2 = b; cp2 < cp; cp2++) {
 3e4:	fa e6       	ldi	r31, 0x6A	; 106
 3e6:	8f 16       	cp	r8, r31
 3e8:	f1 e0       	ldi	r31, 0x01	; 1
 3ea:	9f 06       	cpc	r9, r31
 3ec:	09 f0       	breq	.+2      	; 0x3f0 <uart_getchar+0x148>
 3ee:	08 f4       	brcc	.+2      	; 0x3f2 <uart_getchar+0x14a>
 3f0:	85 cf       	rjmp	.-246    	; 0x2fc <uart_getchar+0x54>
 3f2:	0f 2e       	mov	r0, r31
 3f4:	fa e6       	ldi	r31, 0x6A	; 106
 3f6:	ef 2e       	mov	r14, r31
 3f8:	f1 e0       	ldi	r31, 0x01	; 1
 3fa:	ff 2e       	mov	r15, r31
                    uart_putchar(*cp2, stream);
 3fc:	f0 2d       	mov	r31, r0
 3fe:	b8 01       	movw	r22, r16
 400:	f7 01       	movw	r30, r14
 402:	81 91       	ld	r24, Z+
 404:	7f 01       	movw	r14, r30
                break;

            case 'r' & 0x1f:
                uart_putchar('\r', stream);

                for (cp2 = b; cp2 < cp; cp2++) {
 406:	31 df       	rcall	.-414    	; 0x26a <uart_putchar>
 408:	8e 14       	cp	r8, r14
 40a:	9f 04       	cpc	r9, r15

                break;

            case 'u' & 0x1f:
                while (cp > b) {
                    uart_putchar('\b', stream);
 40c:	c1 f7       	brne	.-16     	; 0x3fe <uart_getchar+0x156>
 40e:	76 cf       	rjmp	.-276    	; 0x2fc <uart_getchar+0x54>
 410:	b8 01       	movw	r22, r16
                    uart_putchar(' ', stream);
 412:	88 e0       	ldi	r24, 0x08	; 8
 414:	2a df       	rcall	.-428    	; 0x26a <uart_putchar>
 416:	b8 01       	movw	r22, r16
 418:	80 e2       	ldi	r24, 0x20	; 32
                    uart_putchar('\b', stream);
 41a:	27 df       	rcall	.-434    	; 0x26a <uart_putchar>
 41c:	b8 01       	movw	r22, r16
 41e:	88 e0       	ldi	r24, 0x08	; 8
 420:	24 df       	rcall	.-440    	; 0x26a <uart_putchar>
                    cp--;
 422:	f1 e0       	ldi	r31, 0x01	; 1
 424:	8f 1a       	sub	r8, r31
 426:	91 08       	sbc	r9, r1
                }

                break;

            case 'u' & 0x1f:
                while (cp > b) {
 428:	8a e6       	ldi	r24, 0x6A	; 106
 42a:	88 16       	cp	r8, r24
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	98 06       	cpc	r9, r24
 430:	79 f7       	brne	.-34     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 432:	f3 01       	movw	r30, r6
 434:	31 96       	adiw	r30, 0x01	; 1
 436:	4f 01       	movw	r8, r30
 438:	61 cf       	rjmp	.-318    	; 0x2fc <uart_getchar+0x54>
 43a:	74 01       	movw	r14, r8

                break;

            case 'w' & 0x1f:
                while (cp > b && cp[-1] != ' ') {
                    uart_putchar('\b', stream);
 43c:	f1 e0       	ldi	r31, 0x01	; 1
 43e:	ef 1a       	sub	r14, r31
 440:	f1 08       	sbc	r15, r1
 442:	b8 01       	movw	r22, r16
                    uart_putchar(' ', stream);
 444:	88 e0       	ldi	r24, 0x08	; 8
 446:	11 df       	rcall	.-478    	; 0x26a <uart_putchar>
 448:	b8 01       	movw	r22, r16
 44a:	80 e2       	ldi	r24, 0x20	; 32
                    uart_putchar('\b', stream);
 44c:	0e df       	rcall	.-484    	; 0x26a <uart_putchar>
 44e:	b8 01       	movw	r22, r16
 450:	88 e0       	ldi	r24, 0x08	; 8
 452:	0b df       	rcall	.-490    	; 0x26a <uart_putchar>
                    cp--;
 454:	47 01       	movw	r8, r14
                }

                break;

            case 'w' & 0x1f:
                while (cp > b && cp[-1] != ' ') {
 456:	ae 14       	cp	r10, r14
 458:	bf 04       	cpc	r11, r15
 45a:	09 f4       	brne	.+2      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 45c:	4f cf       	rjmp	.-354    	; 0x2fc <uart_getchar+0x54>
 45e:	f7 01       	movw	r30, r14
 460:	82 91       	ld	r24, -Z
 462:	7f 01       	movw	r14, r30
 464:	80 32       	cpi	r24, 0x20	; 32
 466:	69 f7       	brne	.-38     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 468:	49 cf       	rjmp	.-366    	; 0x2fc <uart_getchar+0x54>

                break;
            }
        }

    c = *rxp++;
 46a:	e0 91 ba 01 	lds	r30, 0x01BA	; 0x8001ba <rxp.2118>
 46e:	f0 91 bb 01 	lds	r31, 0x01BB	; 0x8001bb <rxp.2118+0x1>
 472:	cf 01       	movw	r24, r30
 474:	01 96       	adiw	r24, 0x01	; 1
 476:	90 93 bb 01 	sts	0x01BB, r25	; 0x8001bb <rxp.2118+0x1>
 47a:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <rxp.2118>
 47e:	80 81       	ld	r24, Z

    if (c == '\n') {
 480:	8a 30       	cpi	r24, 0x0A	; 10
 482:	21 f4       	brne	.+8      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
        rxp = 0;
 484:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <rxp.2118+0x1>
 488:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <rxp.2118>
    }

    return c;
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	08 c0       	rjmp	.+16     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
    if (rxp == 0)
        for (cp = b;;) {
            loop_until_bit_is_set(UCSR0A, RXC0);

            if (UCSR0A & _BV(FE0)) {
                return _FDEV_EOF;
 490:	8e ef       	ldi	r24, 0xFE	; 254
 492:	9f ef       	ldi	r25, 0xFF	; 255
 494:	05 c0       	rjmp	.+10     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
            }

            if (UCSR0A & _BV(DOR0)) {
                return _FDEV_ERR;
 496:	8f ef       	ldi	r24, 0xFF	; 255
 498:	9f ef       	ldi	r25, 0xFF	; 255
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
                continue;
            }

            switch (c) {
            case 'c' & 0x1f:
                return -1;
 49c:	8f ef       	ldi	r24, 0xFF	; 255
 49e:	9f ef       	ldi	r25, 0xFF	; 255
    if (c == '\n') {
        rxp = 0;
    }

    return c;
}
 4a0:	df 91       	pop	r29
 4a2:	cf 91       	pop	r28
 4a4:	1f 91       	pop	r17
 4a6:	0f 91       	pop	r16
 4a8:	ff 90       	pop	r15
 4aa:	ef 90       	pop	r14
 4ac:	df 90       	pop	r13
 4ae:	cf 90       	pop	r12
 4b0:	bf 90       	pop	r11
 4b2:	af 90       	pop	r10
 4b4:	9f 90       	pop	r9
 4b6:	8f 90       	pop	r8
 4b8:	7f 90       	pop	r7
 4ba:	6f 90       	pop	r6
 4bc:	08 95       	ret

000004be <uart_init>:
void uart_init(void) {
#if F_CPU < 2000000UL && defined(U2X)
    UCSRA = _BV(U2X);             /* improve baud rate error by using 2x clk */
    UBRRL = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
    UBRR0H = (uint8_t) (MYUBRR >> 8);
 4be:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    UBRR0L = (uint8_t) MYUBRR;
 4c2:	80 e1       	ldi	r24, 0x10	; 16
 4c4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
#endif
    UCSR0B = (1 << RXEN0) | (1 << TXEN0); /* tx/rx enable */
 4c8:	88 e1       	ldi	r24, 0x18	; 24
 4ca:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    UCSR0C = (3 << UCSZ00);
 4ce:	86 e0       	ldi	r24, 0x06	; 6
 4d0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
    stdout = stdin = &usart0_str;
 4d4:	ec eb       	ldi	r30, 0xBC	; 188
 4d6:	f1 e0       	ldi	r31, 0x01	; 1
 4d8:	80 e0       	ldi	r24, 0x00	; 0
 4da:	91 e0       	ldi	r25, 0x01	; 1
 4dc:	91 83       	std	Z+1, r25	; 0x01
 4de:	80 83       	st	Z, r24
 4e0:	93 83       	std	Z+3, r25	; 0x03
 4e2:	82 83       	std	Z+2, r24	; 0x02
 4e4:	08 95       	ret

000004e6 <board_init>:
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
 4e6:	95 b1       	in	r25, 0x05	; 5
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
 4e8:	84 b1       	in	r24, 0x04	; 4
 4ea:	80 62       	ori	r24, 0x20	; 32
 4ec:	8f 77       	andi	r24, 0x7F	; 127
 4ee:	84 b9       	out	0x04, r24	; 4
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
 4f0:	89 2f       	mov	r24, r25
 4f2:	80 6a       	ori	r24, 0xA0	; 160
 4f4:	85 b9       	out	0x05, r24	; 5
 4f6:	08 95       	ret

000004f8 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
 4f8:	04 c0       	rjmp	.+8      	; 0x502 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
 4fa:	61 50       	subi	r22, 0x01	; 1
 4fc:	71 09       	sbc	r23, r1
 4fe:	81 09       	sbc	r24, r1
 500:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
 502:	61 15       	cp	r22, r1
 504:	71 05       	cpc	r23, r1
 506:	81 05       	cpc	r24, r1
 508:	91 05       	cpc	r25, r1
 50a:	b9 f7       	brne	.-18     	; 0x4fa <__portable_avr_delay_cycles+0x2>
 50c:	08 95       	ret

0000050e <main>:
#include <uart.h>
#include <bmi160.h>



int main (void) {
 50e:	cf 93       	push	r28
 510:	df 93       	push	r29
 512:	cd b7       	in	r28, 0x3d	; 61
 514:	de b7       	in	r29, 0x3e	; 62
 516:	2c 97       	sbiw	r28, 0x0c	; 12
 518:	0f b6       	in	r0, 0x3f	; 63
 51a:	f8 94       	cli
 51c:	de bf       	out	0x3e, r29	; 62
 51e:	0f be       	out	0x3f, r0	; 63
 520:	cd bf       	out	0x3d, r28	; 61
    /* Insert system clock initialization code here (sysclk_init()). */
    board_init();
 522:	e1 df       	rcall	.-62     	; 0x4e6 <board_init>

    uart_init();
 524:	cc df       	rcall	.-104    	; 0x4be <uart_init>
 526:	81 e3       	ldi	r24, 0x31	; 49
    printf("------- Default testing -------\r\n\r\n");
 528:	91 e0       	ldi	r25, 0x01	; 1
 52a:	6f d0       	rcall	.+222    	; 0x60a <puts>

    spi_init();
 52c:	8f de       	rcall	.-738    	; 0x24c <spi_init>
 52e:	80 e0       	ldi	r24, 0x00	; 0

    uint8_t sensorID = reg_read(BMI160_RA_CHIP_ID);
 530:	c5 dd       	rcall	.-1142   	; 0xbc <reg_read>
 532:	1f 92       	push	r1
 534:	8f 93       	push	r24
    printf("Sensor id: 0x%x\r\n\r\n", sensorID);
 536:	84 e5       	ldi	r24, 0x54	; 84
 538:	91 e0       	ldi	r25, 0x01	; 1
 53a:	9f 93       	push	r25
 53c:	8f 93       	push	r24
 53e:	52 d0       	rcall	.+164    	; 0x5e4 <printf>
 540:	0f 90       	pop	r0
 542:	0f 90       	pop	r0
 544:	0f 90       	pop	r0
 546:	0f 90       	pop	r0
 548:	04 e5       	ldi	r16, 0x54	; 84

    int32_t gxRaw, gyRaw, gzRaw;         // raw gyro values

    while (1) {
        uint8_t sensorID = reg_read(BMI160_RA_CHIP_ID);
        printf("Sensor id: 0x%x\r\n\r\n", sensorID);
 54a:	11 e0       	ldi	r17, 0x01	; 1
 54c:	80 e0       	ldi	r24, 0x00	; 0
    //printf("Read 2 - Sensor id: 0x%x\r\n\r\n", sensorID);

    int32_t gxRaw, gyRaw, gzRaw;         // raw gyro values

    while (1) {
        uint8_t sensorID = reg_read(BMI160_RA_CHIP_ID);
 54e:	b6 dd       	rcall	.-1172   	; 0xbc <reg_read>
 550:	1f 92       	push	r1
        printf("Sensor id: 0x%x\r\n\r\n", sensorID);
 552:	8f 93       	push	r24
 554:	1f 93       	push	r17
 556:	0f 93       	push	r16
 558:	45 d0       	rcall	.+138    	; 0x5e4 <printf>
 55a:	ae 01       	movw	r20, r28
 55c:	47 5f       	subi	r20, 0xF7	; 247

        read_gyro(&gxRaw, &gyRaw, &gzRaw);
 55e:	5f 4f       	sbci	r21, 0xFF	; 255
 560:	be 01       	movw	r22, r28
 562:	6b 5f       	subi	r22, 0xFB	; 251
 564:	7f 4f       	sbci	r23, 0xFF	; 255
 566:	ce 01       	movw	r24, r28
 568:	01 96       	adiw	r24, 0x01	; 1
 56a:	21 de       	rcall	.-958    	; 0x1ae <read_gyro>
 56c:	66 e5       	ldi	r22, 0x56	; 86

        delay_ms(8000);
 56e:	78 e5       	ldi	r23, 0x58	; 88
 570:	84 e1       	ldi	r24, 0x14	; 20
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	c1 df       	rcall	.-126    	; 0x4f8 <__portable_avr_delay_cycles>
 576:	0f 90       	pop	r0
 578:	0f 90       	pop	r0
 57a:	0f 90       	pop	r0
 57c:	0f 90       	pop	r0
 57e:	e6 cf       	rjmp	.-52     	; 0x54c <main+0x3e>

00000580 <fwrite>:
 580:	a0 e0       	ldi	r26, 0x00	; 0
 582:	b0 e0       	ldi	r27, 0x00	; 0
 584:	e5 ec       	ldi	r30, 0xC5	; 197
 586:	f2 e0       	ldi	r31, 0x02	; 2
 588:	f8 c2       	rjmp	.+1520   	; 0xb7a <__prologue_saves__+0xc>
 58a:	5b 01       	movw	r10, r22
 58c:	4a 01       	movw	r8, r20
 58e:	79 01       	movw	r14, r18
 590:	d9 01       	movw	r26, r18
 592:	13 96       	adiw	r26, 0x03	; 3
 594:	2c 91       	ld	r18, X
 596:	21 ff       	sbrs	r18, 1
 598:	1d c0       	rjmp	.+58     	; 0x5d4 <fwrite+0x54>
 59a:	c0 e0       	ldi	r28, 0x00	; 0
 59c:	d0 e0       	ldi	r29, 0x00	; 0
 59e:	c8 15       	cp	r28, r8
 5a0:	d9 05       	cpc	r29, r9
 5a2:	d9 f0       	breq	.+54     	; 0x5da <fwrite+0x5a>
 5a4:	8c 01       	movw	r16, r24
 5a6:	6c 01       	movw	r12, r24
 5a8:	ca 0c       	add	r12, r10
 5aa:	db 1c       	adc	r13, r11
 5ac:	c8 01       	movw	r24, r16
 5ae:	0c 15       	cp	r16, r12
 5b0:	1d 05       	cpc	r17, r13
 5b2:	71 f0       	breq	.+28     	; 0x5d0 <fwrite+0x50>
 5b4:	0f 5f       	subi	r16, 0xFF	; 255
 5b6:	1f 4f       	sbci	r17, 0xFF	; 255
 5b8:	d7 01       	movw	r26, r14
 5ba:	18 96       	adiw	r26, 0x08	; 8
 5bc:	ed 91       	ld	r30, X+
 5be:	fc 91       	ld	r31, X
 5c0:	19 97       	sbiw	r26, 0x09	; 9
 5c2:	b7 01       	movw	r22, r14
 5c4:	dc 01       	movw	r26, r24
 5c6:	8c 91       	ld	r24, X
 5c8:	09 95       	icall
 5ca:	89 2b       	or	r24, r25
 5cc:	79 f3       	breq	.-34     	; 0x5ac <fwrite+0x2c>
 5ce:	05 c0       	rjmp	.+10     	; 0x5da <fwrite+0x5a>
 5d0:	21 96       	adiw	r28, 0x01	; 1
 5d2:	e5 cf       	rjmp	.-54     	; 0x59e <fwrite+0x1e>
 5d4:	80 e0       	ldi	r24, 0x00	; 0
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	01 c0       	rjmp	.+2      	; 0x5dc <fwrite+0x5c>
 5da:	ce 01       	movw	r24, r28
 5dc:	cd b7       	in	r28, 0x3d	; 61
 5de:	de b7       	in	r29, 0x3e	; 62
 5e0:	ec e0       	ldi	r30, 0x0C	; 12
 5e2:	e7 c2       	rjmp	.+1486   	; 0xbb2 <__epilogue_restores__+0xc>

000005e4 <printf>:
 5e4:	a0 e0       	ldi	r26, 0x00	; 0
 5e6:	b0 e0       	ldi	r27, 0x00	; 0
 5e8:	e7 ef       	ldi	r30, 0xF7	; 247
 5ea:	f2 e0       	ldi	r31, 0x02	; 2
 5ec:	d0 c2       	rjmp	.+1440   	; 0xb8e <__prologue_saves__+0x20>
 5ee:	ae 01       	movw	r20, r28
 5f0:	4b 5f       	subi	r20, 0xFB	; 251
 5f2:	5f 4f       	sbci	r21, 0xFF	; 255
 5f4:	fa 01       	movw	r30, r20
 5f6:	61 91       	ld	r22, Z+
 5f8:	71 91       	ld	r23, Z+
 5fa:	af 01       	movw	r20, r30
 5fc:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <__iob+0x2>
 600:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <__iob+0x3>
 604:	32 d0       	rcall	.+100    	; 0x66a <vfprintf>
 606:	e2 e0       	ldi	r30, 0x02	; 2
 608:	de c2       	rjmp	.+1468   	; 0xbc6 <__epilogue_restores__+0x20>

0000060a <puts>:
 60a:	0f 93       	push	r16
 60c:	1f 93       	push	r17
 60e:	cf 93       	push	r28
 610:	df 93       	push	r29
 612:	e0 91 be 01 	lds	r30, 0x01BE	; 0x8001be <__iob+0x2>
 616:	f0 91 bf 01 	lds	r31, 0x01BF	; 0x8001bf <__iob+0x3>
 61a:	23 81       	ldd	r18, Z+3	; 0x03
 61c:	21 ff       	sbrs	r18, 1
 61e:	1b c0       	rjmp	.+54     	; 0x656 <puts+0x4c>
 620:	8c 01       	movw	r16, r24
 622:	d0 e0       	ldi	r29, 0x00	; 0
 624:	c0 e0       	ldi	r28, 0x00	; 0
 626:	f8 01       	movw	r30, r16
 628:	81 91       	ld	r24, Z+
 62a:	8f 01       	movw	r16, r30
 62c:	60 91 be 01 	lds	r22, 0x01BE	; 0x8001be <__iob+0x2>
 630:	70 91 bf 01 	lds	r23, 0x01BF	; 0x8001bf <__iob+0x3>
 634:	db 01       	movw	r26, r22
 636:	18 96       	adiw	r26, 0x08	; 8
 638:	ed 91       	ld	r30, X+
 63a:	fc 91       	ld	r31, X
 63c:	19 97       	sbiw	r26, 0x09	; 9
 63e:	88 23       	and	r24, r24
 640:	31 f0       	breq	.+12     	; 0x64e <puts+0x44>
 642:	09 95       	icall
 644:	89 2b       	or	r24, r25
 646:	79 f3       	breq	.-34     	; 0x626 <puts+0x1c>
 648:	df ef       	ldi	r29, 0xFF	; 255
 64a:	cf ef       	ldi	r28, 0xFF	; 255
 64c:	ec cf       	rjmp	.-40     	; 0x626 <puts+0x1c>
 64e:	8a e0       	ldi	r24, 0x0A	; 10
 650:	09 95       	icall
 652:	89 2b       	or	r24, r25
 654:	19 f0       	breq	.+6      	; 0x65c <puts+0x52>
 656:	8f ef       	ldi	r24, 0xFF	; 255
 658:	9f ef       	ldi	r25, 0xFF	; 255
 65a:	02 c0       	rjmp	.+4      	; 0x660 <puts+0x56>
 65c:	8d 2f       	mov	r24, r29
 65e:	9c 2f       	mov	r25, r28
 660:	df 91       	pop	r29
 662:	cf 91       	pop	r28
 664:	1f 91       	pop	r17
 666:	0f 91       	pop	r16
 668:	08 95       	ret

0000066a <vfprintf>:
 66a:	ab e0       	ldi	r26, 0x0B	; 11
 66c:	b0 e0       	ldi	r27, 0x00	; 0
 66e:	ea e3       	ldi	r30, 0x3A	; 58
 670:	f3 e0       	ldi	r31, 0x03	; 3
 672:	7d c2       	rjmp	.+1274   	; 0xb6e <__prologue_saves__>
 674:	6c 01       	movw	r12, r24
 676:	7b 01       	movw	r14, r22
 678:	8a 01       	movw	r16, r20
 67a:	fc 01       	movw	r30, r24
 67c:	17 82       	std	Z+7, r1	; 0x07
 67e:	16 82       	std	Z+6, r1	; 0x06
 680:	83 81       	ldd	r24, Z+3	; 0x03
 682:	81 ff       	sbrs	r24, 1
 684:	bf c1       	rjmp	.+894    	; 0xa04 <__stack+0x105>
 686:	ce 01       	movw	r24, r28
 688:	01 96       	adiw	r24, 0x01	; 1
 68a:	3c 01       	movw	r6, r24
 68c:	f6 01       	movw	r30, r12
 68e:	93 81       	ldd	r25, Z+3	; 0x03
 690:	f7 01       	movw	r30, r14
 692:	93 fd       	sbrc	r25, 3
 694:	85 91       	lpm	r24, Z+
 696:	93 ff       	sbrs	r25, 3
 698:	81 91       	ld	r24, Z+
 69a:	7f 01       	movw	r14, r30
 69c:	88 23       	and	r24, r24
 69e:	09 f4       	brne	.+2      	; 0x6a2 <vfprintf+0x38>
 6a0:	ad c1       	rjmp	.+858    	; 0x9fc <__stack+0xfd>
 6a2:	85 32       	cpi	r24, 0x25	; 37
 6a4:	39 f4       	brne	.+14     	; 0x6b4 <vfprintf+0x4a>
 6a6:	93 fd       	sbrc	r25, 3
 6a8:	85 91       	lpm	r24, Z+
 6aa:	93 ff       	sbrs	r25, 3
 6ac:	81 91       	ld	r24, Z+
 6ae:	7f 01       	movw	r14, r30
 6b0:	85 32       	cpi	r24, 0x25	; 37
 6b2:	21 f4       	brne	.+8      	; 0x6bc <vfprintf+0x52>
 6b4:	b6 01       	movw	r22, r12
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	c0 d1       	rcall	.+896    	; 0xa3a <fputc>
 6ba:	e8 cf       	rjmp	.-48     	; 0x68c <vfprintf+0x22>
 6bc:	91 2c       	mov	r9, r1
 6be:	21 2c       	mov	r2, r1
 6c0:	31 2c       	mov	r3, r1
 6c2:	ff e1       	ldi	r31, 0x1F	; 31
 6c4:	f3 15       	cp	r31, r3
 6c6:	d8 f0       	brcs	.+54     	; 0x6fe <vfprintf+0x94>
 6c8:	8b 32       	cpi	r24, 0x2B	; 43
 6ca:	79 f0       	breq	.+30     	; 0x6ea <vfprintf+0x80>
 6cc:	38 f4       	brcc	.+14     	; 0x6dc <vfprintf+0x72>
 6ce:	80 32       	cpi	r24, 0x20	; 32
 6d0:	79 f0       	breq	.+30     	; 0x6f0 <vfprintf+0x86>
 6d2:	83 32       	cpi	r24, 0x23	; 35
 6d4:	a1 f4       	brne	.+40     	; 0x6fe <vfprintf+0x94>
 6d6:	23 2d       	mov	r18, r3
 6d8:	20 61       	ori	r18, 0x10	; 16
 6da:	1d c0       	rjmp	.+58     	; 0x716 <vfprintf+0xac>
 6dc:	8d 32       	cpi	r24, 0x2D	; 45
 6de:	61 f0       	breq	.+24     	; 0x6f8 <vfprintf+0x8e>
 6e0:	80 33       	cpi	r24, 0x30	; 48
 6e2:	69 f4       	brne	.+26     	; 0x6fe <vfprintf+0x94>
 6e4:	23 2d       	mov	r18, r3
 6e6:	21 60       	ori	r18, 0x01	; 1
 6e8:	16 c0       	rjmp	.+44     	; 0x716 <vfprintf+0xac>
 6ea:	83 2d       	mov	r24, r3
 6ec:	82 60       	ori	r24, 0x02	; 2
 6ee:	38 2e       	mov	r3, r24
 6f0:	e3 2d       	mov	r30, r3
 6f2:	e4 60       	ori	r30, 0x04	; 4
 6f4:	3e 2e       	mov	r3, r30
 6f6:	2a c0       	rjmp	.+84     	; 0x74c <vfprintf+0xe2>
 6f8:	f3 2d       	mov	r31, r3
 6fa:	f8 60       	ori	r31, 0x08	; 8
 6fc:	1d c0       	rjmp	.+58     	; 0x738 <vfprintf+0xce>
 6fe:	37 fc       	sbrc	r3, 7
 700:	2d c0       	rjmp	.+90     	; 0x75c <vfprintf+0xf2>
 702:	20 ed       	ldi	r18, 0xD0	; 208
 704:	28 0f       	add	r18, r24
 706:	2a 30       	cpi	r18, 0x0A	; 10
 708:	40 f0       	brcs	.+16     	; 0x71a <vfprintf+0xb0>
 70a:	8e 32       	cpi	r24, 0x2E	; 46
 70c:	b9 f4       	brne	.+46     	; 0x73c <vfprintf+0xd2>
 70e:	36 fc       	sbrc	r3, 6
 710:	75 c1       	rjmp	.+746    	; 0x9fc <__stack+0xfd>
 712:	23 2d       	mov	r18, r3
 714:	20 64       	ori	r18, 0x40	; 64
 716:	32 2e       	mov	r3, r18
 718:	19 c0       	rjmp	.+50     	; 0x74c <vfprintf+0xe2>
 71a:	36 fe       	sbrs	r3, 6
 71c:	06 c0       	rjmp	.+12     	; 0x72a <vfprintf+0xc0>
 71e:	8a e0       	ldi	r24, 0x0A	; 10
 720:	98 9e       	mul	r9, r24
 722:	20 0d       	add	r18, r0
 724:	11 24       	eor	r1, r1
 726:	92 2e       	mov	r9, r18
 728:	11 c0       	rjmp	.+34     	; 0x74c <vfprintf+0xe2>
 72a:	ea e0       	ldi	r30, 0x0A	; 10
 72c:	2e 9e       	mul	r2, r30
 72e:	20 0d       	add	r18, r0
 730:	11 24       	eor	r1, r1
 732:	22 2e       	mov	r2, r18
 734:	f3 2d       	mov	r31, r3
 736:	f0 62       	ori	r31, 0x20	; 32
 738:	3f 2e       	mov	r3, r31
 73a:	08 c0       	rjmp	.+16     	; 0x74c <vfprintf+0xe2>
 73c:	8c 36       	cpi	r24, 0x6C	; 108
 73e:	21 f4       	brne	.+8      	; 0x748 <vfprintf+0xde>
 740:	83 2d       	mov	r24, r3
 742:	80 68       	ori	r24, 0x80	; 128
 744:	38 2e       	mov	r3, r24
 746:	02 c0       	rjmp	.+4      	; 0x74c <vfprintf+0xe2>
 748:	88 36       	cpi	r24, 0x68	; 104
 74a:	41 f4       	brne	.+16     	; 0x75c <vfprintf+0xf2>
 74c:	f7 01       	movw	r30, r14
 74e:	93 fd       	sbrc	r25, 3
 750:	85 91       	lpm	r24, Z+
 752:	93 ff       	sbrs	r25, 3
 754:	81 91       	ld	r24, Z+
 756:	7f 01       	movw	r14, r30
 758:	81 11       	cpse	r24, r1
 75a:	b3 cf       	rjmp	.-154    	; 0x6c2 <vfprintf+0x58>
 75c:	98 2f       	mov	r25, r24
 75e:	9f 7d       	andi	r25, 0xDF	; 223
 760:	95 54       	subi	r25, 0x45	; 69
 762:	93 30       	cpi	r25, 0x03	; 3
 764:	28 f4       	brcc	.+10     	; 0x770 <vfprintf+0x106>
 766:	0c 5f       	subi	r16, 0xFC	; 252
 768:	1f 4f       	sbci	r17, 0xFF	; 255
 76a:	9f e3       	ldi	r25, 0x3F	; 63
 76c:	99 83       	std	Y+1, r25	; 0x01
 76e:	0d c0       	rjmp	.+26     	; 0x78a <vfprintf+0x120>
 770:	83 36       	cpi	r24, 0x63	; 99
 772:	31 f0       	breq	.+12     	; 0x780 <vfprintf+0x116>
 774:	83 37       	cpi	r24, 0x73	; 115
 776:	71 f0       	breq	.+28     	; 0x794 <vfprintf+0x12a>
 778:	83 35       	cpi	r24, 0x53	; 83
 77a:	09 f0       	breq	.+2      	; 0x77e <vfprintf+0x114>
 77c:	55 c0       	rjmp	.+170    	; 0x828 <vfprintf+0x1be>
 77e:	20 c0       	rjmp	.+64     	; 0x7c0 <vfprintf+0x156>
 780:	f8 01       	movw	r30, r16
 782:	80 81       	ld	r24, Z
 784:	89 83       	std	Y+1, r24	; 0x01
 786:	0e 5f       	subi	r16, 0xFE	; 254
 788:	1f 4f       	sbci	r17, 0xFF	; 255
 78a:	88 24       	eor	r8, r8
 78c:	83 94       	inc	r8
 78e:	91 2c       	mov	r9, r1
 790:	53 01       	movw	r10, r6
 792:	12 c0       	rjmp	.+36     	; 0x7b8 <vfprintf+0x14e>
 794:	28 01       	movw	r4, r16
 796:	f2 e0       	ldi	r31, 0x02	; 2
 798:	4f 0e       	add	r4, r31
 79a:	51 1c       	adc	r5, r1
 79c:	f8 01       	movw	r30, r16
 79e:	a0 80       	ld	r10, Z
 7a0:	b1 80       	ldd	r11, Z+1	; 0x01
 7a2:	36 fe       	sbrs	r3, 6
 7a4:	03 c0       	rjmp	.+6      	; 0x7ac <vfprintf+0x142>
 7a6:	69 2d       	mov	r22, r9
 7a8:	70 e0       	ldi	r23, 0x00	; 0
 7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <vfprintf+0x146>
 7ac:	6f ef       	ldi	r22, 0xFF	; 255
 7ae:	7f ef       	ldi	r23, 0xFF	; 255
 7b0:	c5 01       	movw	r24, r10
 7b2:	38 d1       	rcall	.+624    	; 0xa24 <strnlen>
 7b4:	4c 01       	movw	r8, r24
 7b6:	82 01       	movw	r16, r4
 7b8:	f3 2d       	mov	r31, r3
 7ba:	ff 77       	andi	r31, 0x7F	; 127
 7bc:	3f 2e       	mov	r3, r31
 7be:	15 c0       	rjmp	.+42     	; 0x7ea <vfprintf+0x180>
 7c0:	28 01       	movw	r4, r16
 7c2:	22 e0       	ldi	r18, 0x02	; 2
 7c4:	42 0e       	add	r4, r18
 7c6:	51 1c       	adc	r5, r1
 7c8:	f8 01       	movw	r30, r16
 7ca:	a0 80       	ld	r10, Z
 7cc:	b1 80       	ldd	r11, Z+1	; 0x01
 7ce:	36 fe       	sbrs	r3, 6
 7d0:	03 c0       	rjmp	.+6      	; 0x7d8 <vfprintf+0x16e>
 7d2:	69 2d       	mov	r22, r9
 7d4:	70 e0       	ldi	r23, 0x00	; 0
 7d6:	02 c0       	rjmp	.+4      	; 0x7dc <vfprintf+0x172>
 7d8:	6f ef       	ldi	r22, 0xFF	; 255
 7da:	7f ef       	ldi	r23, 0xFF	; 255
 7dc:	c5 01       	movw	r24, r10
 7de:	17 d1       	rcall	.+558    	; 0xa0e <strnlen_P>
 7e0:	4c 01       	movw	r8, r24
 7e2:	f3 2d       	mov	r31, r3
 7e4:	f0 68       	ori	r31, 0x80	; 128
 7e6:	3f 2e       	mov	r3, r31
 7e8:	82 01       	movw	r16, r4
 7ea:	33 fc       	sbrc	r3, 3
 7ec:	19 c0       	rjmp	.+50     	; 0x820 <vfprintf+0x1b6>
 7ee:	82 2d       	mov	r24, r2
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	88 16       	cp	r8, r24
 7f4:	99 06       	cpc	r9, r25
 7f6:	a0 f4       	brcc	.+40     	; 0x820 <vfprintf+0x1b6>
 7f8:	b6 01       	movw	r22, r12
 7fa:	80 e2       	ldi	r24, 0x20	; 32
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	1d d1       	rcall	.+570    	; 0xa3a <fputc>
 800:	2a 94       	dec	r2
 802:	f5 cf       	rjmp	.-22     	; 0x7ee <vfprintf+0x184>
 804:	f5 01       	movw	r30, r10
 806:	37 fc       	sbrc	r3, 7
 808:	85 91       	lpm	r24, Z+
 80a:	37 fe       	sbrs	r3, 7
 80c:	81 91       	ld	r24, Z+
 80e:	5f 01       	movw	r10, r30
 810:	b6 01       	movw	r22, r12
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	12 d1       	rcall	.+548    	; 0xa3a <fputc>
 816:	21 10       	cpse	r2, r1
 818:	2a 94       	dec	r2
 81a:	21 e0       	ldi	r18, 0x01	; 1
 81c:	82 1a       	sub	r8, r18
 81e:	91 08       	sbc	r9, r1
 820:	81 14       	cp	r8, r1
 822:	91 04       	cpc	r9, r1
 824:	79 f7       	brne	.-34     	; 0x804 <vfprintf+0x19a>
 826:	e1 c0       	rjmp	.+450    	; 0x9ea <__stack+0xeb>
 828:	84 36       	cpi	r24, 0x64	; 100
 82a:	11 f0       	breq	.+4      	; 0x830 <vfprintf+0x1c6>
 82c:	89 36       	cpi	r24, 0x69	; 105
 82e:	39 f5       	brne	.+78     	; 0x87e <vfprintf+0x214>
 830:	f8 01       	movw	r30, r16
 832:	37 fe       	sbrs	r3, 7
 834:	07 c0       	rjmp	.+14     	; 0x844 <vfprintf+0x1da>
 836:	60 81       	ld	r22, Z
 838:	71 81       	ldd	r23, Z+1	; 0x01
 83a:	82 81       	ldd	r24, Z+2	; 0x02
 83c:	93 81       	ldd	r25, Z+3	; 0x03
 83e:	0c 5f       	subi	r16, 0xFC	; 252
 840:	1f 4f       	sbci	r17, 0xFF	; 255
 842:	08 c0       	rjmp	.+16     	; 0x854 <vfprintf+0x1ea>
 844:	60 81       	ld	r22, Z
 846:	71 81       	ldd	r23, Z+1	; 0x01
 848:	07 2e       	mov	r0, r23
 84a:	00 0c       	add	r0, r0
 84c:	88 0b       	sbc	r24, r24
 84e:	99 0b       	sbc	r25, r25
 850:	0e 5f       	subi	r16, 0xFE	; 254
 852:	1f 4f       	sbci	r17, 0xFF	; 255
 854:	f3 2d       	mov	r31, r3
 856:	ff 76       	andi	r31, 0x6F	; 111
 858:	3f 2e       	mov	r3, r31
 85a:	97 ff       	sbrs	r25, 7
 85c:	09 c0       	rjmp	.+18     	; 0x870 <vfprintf+0x206>
 85e:	90 95       	com	r25
 860:	80 95       	com	r24
 862:	70 95       	com	r23
 864:	61 95       	neg	r22
 866:	7f 4f       	sbci	r23, 0xFF	; 255
 868:	8f 4f       	sbci	r24, 0xFF	; 255
 86a:	9f 4f       	sbci	r25, 0xFF	; 255
 86c:	f0 68       	ori	r31, 0x80	; 128
 86e:	3f 2e       	mov	r3, r31
 870:	2a e0       	ldi	r18, 0x0A	; 10
 872:	30 e0       	ldi	r19, 0x00	; 0
 874:	a3 01       	movw	r20, r6
 876:	1d d1       	rcall	.+570    	; 0xab2 <__ultoa_invert>
 878:	88 2e       	mov	r8, r24
 87a:	86 18       	sub	r8, r6
 87c:	44 c0       	rjmp	.+136    	; 0x906 <__stack+0x7>
 87e:	85 37       	cpi	r24, 0x75	; 117
 880:	31 f4       	brne	.+12     	; 0x88e <vfprintf+0x224>
 882:	23 2d       	mov	r18, r3
 884:	2f 7e       	andi	r18, 0xEF	; 239
 886:	b2 2e       	mov	r11, r18
 888:	2a e0       	ldi	r18, 0x0A	; 10
 88a:	30 e0       	ldi	r19, 0x00	; 0
 88c:	25 c0       	rjmp	.+74     	; 0x8d8 <vfprintf+0x26e>
 88e:	93 2d       	mov	r25, r3
 890:	99 7f       	andi	r25, 0xF9	; 249
 892:	b9 2e       	mov	r11, r25
 894:	8f 36       	cpi	r24, 0x6F	; 111
 896:	c1 f0       	breq	.+48     	; 0x8c8 <vfprintf+0x25e>
 898:	18 f4       	brcc	.+6      	; 0x8a0 <vfprintf+0x236>
 89a:	88 35       	cpi	r24, 0x58	; 88
 89c:	79 f0       	breq	.+30     	; 0x8bc <vfprintf+0x252>
 89e:	ae c0       	rjmp	.+348    	; 0x9fc <__stack+0xfd>
 8a0:	80 37       	cpi	r24, 0x70	; 112
 8a2:	19 f0       	breq	.+6      	; 0x8aa <vfprintf+0x240>
 8a4:	88 37       	cpi	r24, 0x78	; 120
 8a6:	21 f0       	breq	.+8      	; 0x8b0 <vfprintf+0x246>
 8a8:	a9 c0       	rjmp	.+338    	; 0x9fc <__stack+0xfd>
 8aa:	e9 2f       	mov	r30, r25
 8ac:	e0 61       	ori	r30, 0x10	; 16
 8ae:	be 2e       	mov	r11, r30
 8b0:	b4 fe       	sbrs	r11, 4
 8b2:	0d c0       	rjmp	.+26     	; 0x8ce <vfprintf+0x264>
 8b4:	fb 2d       	mov	r31, r11
 8b6:	f4 60       	ori	r31, 0x04	; 4
 8b8:	bf 2e       	mov	r11, r31
 8ba:	09 c0       	rjmp	.+18     	; 0x8ce <vfprintf+0x264>
 8bc:	34 fe       	sbrs	r3, 4
 8be:	0a c0       	rjmp	.+20     	; 0x8d4 <vfprintf+0x26a>
 8c0:	29 2f       	mov	r18, r25
 8c2:	26 60       	ori	r18, 0x06	; 6
 8c4:	b2 2e       	mov	r11, r18
 8c6:	06 c0       	rjmp	.+12     	; 0x8d4 <vfprintf+0x26a>
 8c8:	28 e0       	ldi	r18, 0x08	; 8
 8ca:	30 e0       	ldi	r19, 0x00	; 0
 8cc:	05 c0       	rjmp	.+10     	; 0x8d8 <vfprintf+0x26e>
 8ce:	20 e1       	ldi	r18, 0x10	; 16
 8d0:	30 e0       	ldi	r19, 0x00	; 0
 8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <vfprintf+0x26e>
 8d4:	20 e1       	ldi	r18, 0x10	; 16
 8d6:	32 e0       	ldi	r19, 0x02	; 2
 8d8:	f8 01       	movw	r30, r16
 8da:	b7 fe       	sbrs	r11, 7
 8dc:	07 c0       	rjmp	.+14     	; 0x8ec <vfprintf+0x282>
 8de:	60 81       	ld	r22, Z
 8e0:	71 81       	ldd	r23, Z+1	; 0x01
 8e2:	82 81       	ldd	r24, Z+2	; 0x02
 8e4:	93 81       	ldd	r25, Z+3	; 0x03
 8e6:	0c 5f       	subi	r16, 0xFC	; 252
 8e8:	1f 4f       	sbci	r17, 0xFF	; 255
 8ea:	06 c0       	rjmp	.+12     	; 0x8f8 <vfprintf+0x28e>
 8ec:	60 81       	ld	r22, Z
 8ee:	71 81       	ldd	r23, Z+1	; 0x01
 8f0:	80 e0       	ldi	r24, 0x00	; 0
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	0e 5f       	subi	r16, 0xFE	; 254
 8f6:	1f 4f       	sbci	r17, 0xFF	; 255
 8f8:	a3 01       	movw	r20, r6
 8fa:	db d0       	rcall	.+438    	; 0xab2 <__ultoa_invert>
 8fc:	88 2e       	mov	r8, r24
 8fe:	86 18       	sub	r8, r6
 900:	fb 2d       	mov	r31, r11
 902:	ff 77       	andi	r31, 0x7F	; 127
 904:	3f 2e       	mov	r3, r31
 906:	36 fe       	sbrs	r3, 6
 908:	0d c0       	rjmp	.+26     	; 0x924 <__stack+0x25>
 90a:	23 2d       	mov	r18, r3
 90c:	2e 7f       	andi	r18, 0xFE	; 254
 90e:	a2 2e       	mov	r10, r18
 910:	89 14       	cp	r8, r9
 912:	58 f4       	brcc	.+22     	; 0x92a <__stack+0x2b>
 914:	34 fe       	sbrs	r3, 4
 916:	0b c0       	rjmp	.+22     	; 0x92e <__stack+0x2f>
 918:	32 fc       	sbrc	r3, 2
 91a:	09 c0       	rjmp	.+18     	; 0x92e <__stack+0x2f>
 91c:	83 2d       	mov	r24, r3
 91e:	8e 7e       	andi	r24, 0xEE	; 238
 920:	a8 2e       	mov	r10, r24
 922:	05 c0       	rjmp	.+10     	; 0x92e <__stack+0x2f>
 924:	b8 2c       	mov	r11, r8
 926:	a3 2c       	mov	r10, r3
 928:	03 c0       	rjmp	.+6      	; 0x930 <__stack+0x31>
 92a:	b8 2c       	mov	r11, r8
 92c:	01 c0       	rjmp	.+2      	; 0x930 <__stack+0x31>
 92e:	b9 2c       	mov	r11, r9
 930:	a4 fe       	sbrs	r10, 4
 932:	0f c0       	rjmp	.+30     	; 0x952 <__stack+0x53>
 934:	fe 01       	movw	r30, r28
 936:	e8 0d       	add	r30, r8
 938:	f1 1d       	adc	r31, r1
 93a:	80 81       	ld	r24, Z
 93c:	80 33       	cpi	r24, 0x30	; 48
 93e:	21 f4       	brne	.+8      	; 0x948 <__stack+0x49>
 940:	9a 2d       	mov	r25, r10
 942:	99 7e       	andi	r25, 0xE9	; 233
 944:	a9 2e       	mov	r10, r25
 946:	09 c0       	rjmp	.+18     	; 0x95a <__stack+0x5b>
 948:	a2 fe       	sbrs	r10, 2
 94a:	06 c0       	rjmp	.+12     	; 0x958 <__stack+0x59>
 94c:	b3 94       	inc	r11
 94e:	b3 94       	inc	r11
 950:	04 c0       	rjmp	.+8      	; 0x95a <__stack+0x5b>
 952:	8a 2d       	mov	r24, r10
 954:	86 78       	andi	r24, 0x86	; 134
 956:	09 f0       	breq	.+2      	; 0x95a <__stack+0x5b>
 958:	b3 94       	inc	r11
 95a:	a3 fc       	sbrc	r10, 3
 95c:	10 c0       	rjmp	.+32     	; 0x97e <__stack+0x7f>
 95e:	a0 fe       	sbrs	r10, 0
 960:	06 c0       	rjmp	.+12     	; 0x96e <__stack+0x6f>
 962:	b2 14       	cp	r11, r2
 964:	80 f4       	brcc	.+32     	; 0x986 <__stack+0x87>
 966:	28 0c       	add	r2, r8
 968:	92 2c       	mov	r9, r2
 96a:	9b 18       	sub	r9, r11
 96c:	0d c0       	rjmp	.+26     	; 0x988 <__stack+0x89>
 96e:	b2 14       	cp	r11, r2
 970:	58 f4       	brcc	.+22     	; 0x988 <__stack+0x89>
 972:	b6 01       	movw	r22, r12
 974:	80 e2       	ldi	r24, 0x20	; 32
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	60 d0       	rcall	.+192    	; 0xa3a <fputc>
 97a:	b3 94       	inc	r11
 97c:	f8 cf       	rjmp	.-16     	; 0x96e <__stack+0x6f>
 97e:	b2 14       	cp	r11, r2
 980:	18 f4       	brcc	.+6      	; 0x988 <__stack+0x89>
 982:	2b 18       	sub	r2, r11
 984:	02 c0       	rjmp	.+4      	; 0x98a <__stack+0x8b>
 986:	98 2c       	mov	r9, r8
 988:	21 2c       	mov	r2, r1
 98a:	a4 fe       	sbrs	r10, 4
 98c:	0f c0       	rjmp	.+30     	; 0x9ac <__stack+0xad>
 98e:	b6 01       	movw	r22, r12
 990:	80 e3       	ldi	r24, 0x30	; 48
 992:	90 e0       	ldi	r25, 0x00	; 0
 994:	52 d0       	rcall	.+164    	; 0xa3a <fputc>
 996:	a2 fe       	sbrs	r10, 2
 998:	16 c0       	rjmp	.+44     	; 0x9c6 <__stack+0xc7>
 99a:	a1 fc       	sbrc	r10, 1
 99c:	03 c0       	rjmp	.+6      	; 0x9a4 <__stack+0xa5>
 99e:	88 e7       	ldi	r24, 0x78	; 120
 9a0:	90 e0       	ldi	r25, 0x00	; 0
 9a2:	02 c0       	rjmp	.+4      	; 0x9a8 <__stack+0xa9>
 9a4:	88 e5       	ldi	r24, 0x58	; 88
 9a6:	90 e0       	ldi	r25, 0x00	; 0
 9a8:	b6 01       	movw	r22, r12
 9aa:	0c c0       	rjmp	.+24     	; 0x9c4 <__stack+0xc5>
 9ac:	8a 2d       	mov	r24, r10
 9ae:	86 78       	andi	r24, 0x86	; 134
 9b0:	51 f0       	breq	.+20     	; 0x9c6 <__stack+0xc7>
 9b2:	a1 fe       	sbrs	r10, 1
 9b4:	02 c0       	rjmp	.+4      	; 0x9ba <__stack+0xbb>
 9b6:	8b e2       	ldi	r24, 0x2B	; 43
 9b8:	01 c0       	rjmp	.+2      	; 0x9bc <__stack+0xbd>
 9ba:	80 e2       	ldi	r24, 0x20	; 32
 9bc:	a7 fc       	sbrc	r10, 7
 9be:	8d e2       	ldi	r24, 0x2D	; 45
 9c0:	b6 01       	movw	r22, r12
 9c2:	90 e0       	ldi	r25, 0x00	; 0
 9c4:	3a d0       	rcall	.+116    	; 0xa3a <fputc>
 9c6:	89 14       	cp	r8, r9
 9c8:	30 f4       	brcc	.+12     	; 0x9d6 <__stack+0xd7>
 9ca:	b6 01       	movw	r22, r12
 9cc:	80 e3       	ldi	r24, 0x30	; 48
 9ce:	90 e0       	ldi	r25, 0x00	; 0
 9d0:	34 d0       	rcall	.+104    	; 0xa3a <fputc>
 9d2:	9a 94       	dec	r9
 9d4:	f8 cf       	rjmp	.-16     	; 0x9c6 <__stack+0xc7>
 9d6:	8a 94       	dec	r8
 9d8:	f3 01       	movw	r30, r6
 9da:	e8 0d       	add	r30, r8
 9dc:	f1 1d       	adc	r31, r1
 9de:	80 81       	ld	r24, Z
 9e0:	b6 01       	movw	r22, r12
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	2a d0       	rcall	.+84     	; 0xa3a <fputc>
 9e6:	81 10       	cpse	r8, r1
 9e8:	f6 cf       	rjmp	.-20     	; 0x9d6 <__stack+0xd7>
 9ea:	22 20       	and	r2, r2
 9ec:	09 f4       	brne	.+2      	; 0x9f0 <__stack+0xf1>
 9ee:	4e ce       	rjmp	.-868    	; 0x68c <vfprintf+0x22>
 9f0:	b6 01       	movw	r22, r12
 9f2:	80 e2       	ldi	r24, 0x20	; 32
 9f4:	90 e0       	ldi	r25, 0x00	; 0
 9f6:	21 d0       	rcall	.+66     	; 0xa3a <fputc>
 9f8:	2a 94       	dec	r2
 9fa:	f7 cf       	rjmp	.-18     	; 0x9ea <__stack+0xeb>
 9fc:	f6 01       	movw	r30, r12
 9fe:	86 81       	ldd	r24, Z+6	; 0x06
 a00:	97 81       	ldd	r25, Z+7	; 0x07
 a02:	02 c0       	rjmp	.+4      	; 0xa08 <__stack+0x109>
 a04:	8f ef       	ldi	r24, 0xFF	; 255
 a06:	9f ef       	ldi	r25, 0xFF	; 255
 a08:	2b 96       	adiw	r28, 0x0b	; 11
 a0a:	e2 e1       	ldi	r30, 0x12	; 18
 a0c:	cc c0       	rjmp	.+408    	; 0xba6 <__epilogue_restores__>

00000a0e <strnlen_P>:
 a0e:	fc 01       	movw	r30, r24
 a10:	05 90       	lpm	r0, Z+
 a12:	61 50       	subi	r22, 0x01	; 1
 a14:	70 40       	sbci	r23, 0x00	; 0
 a16:	01 10       	cpse	r0, r1
 a18:	d8 f7       	brcc	.-10     	; 0xa10 <strnlen_P+0x2>
 a1a:	80 95       	com	r24
 a1c:	90 95       	com	r25
 a1e:	8e 0f       	add	r24, r30
 a20:	9f 1f       	adc	r25, r31
 a22:	08 95       	ret

00000a24 <strnlen>:
 a24:	fc 01       	movw	r30, r24
 a26:	61 50       	subi	r22, 0x01	; 1
 a28:	70 40       	sbci	r23, 0x00	; 0
 a2a:	01 90       	ld	r0, Z+
 a2c:	01 10       	cpse	r0, r1
 a2e:	d8 f7       	brcc	.-10     	; 0xa26 <strnlen+0x2>
 a30:	80 95       	com	r24
 a32:	90 95       	com	r25
 a34:	8e 0f       	add	r24, r30
 a36:	9f 1f       	adc	r25, r31
 a38:	08 95       	ret

00000a3a <fputc>:
 a3a:	0f 93       	push	r16
 a3c:	1f 93       	push	r17
 a3e:	cf 93       	push	r28
 a40:	df 93       	push	r29
 a42:	fb 01       	movw	r30, r22
 a44:	23 81       	ldd	r18, Z+3	; 0x03
 a46:	21 fd       	sbrc	r18, 1
 a48:	03 c0       	rjmp	.+6      	; 0xa50 <fputc+0x16>
 a4a:	8f ef       	ldi	r24, 0xFF	; 255
 a4c:	9f ef       	ldi	r25, 0xFF	; 255
 a4e:	2c c0       	rjmp	.+88     	; 0xaa8 <fputc+0x6e>
 a50:	22 ff       	sbrs	r18, 2
 a52:	16 c0       	rjmp	.+44     	; 0xa80 <fputc+0x46>
 a54:	46 81       	ldd	r20, Z+6	; 0x06
 a56:	57 81       	ldd	r21, Z+7	; 0x07
 a58:	24 81       	ldd	r18, Z+4	; 0x04
 a5a:	35 81       	ldd	r19, Z+5	; 0x05
 a5c:	42 17       	cp	r20, r18
 a5e:	53 07       	cpc	r21, r19
 a60:	44 f4       	brge	.+16     	; 0xa72 <fputc+0x38>
 a62:	a0 81       	ld	r26, Z
 a64:	b1 81       	ldd	r27, Z+1	; 0x01
 a66:	9d 01       	movw	r18, r26
 a68:	2f 5f       	subi	r18, 0xFF	; 255
 a6a:	3f 4f       	sbci	r19, 0xFF	; 255
 a6c:	31 83       	std	Z+1, r19	; 0x01
 a6e:	20 83       	st	Z, r18
 a70:	8c 93       	st	X, r24
 a72:	26 81       	ldd	r18, Z+6	; 0x06
 a74:	37 81       	ldd	r19, Z+7	; 0x07
 a76:	2f 5f       	subi	r18, 0xFF	; 255
 a78:	3f 4f       	sbci	r19, 0xFF	; 255
 a7a:	37 83       	std	Z+7, r19	; 0x07
 a7c:	26 83       	std	Z+6, r18	; 0x06
 a7e:	14 c0       	rjmp	.+40     	; 0xaa8 <fputc+0x6e>
 a80:	8b 01       	movw	r16, r22
 a82:	ec 01       	movw	r28, r24
 a84:	fb 01       	movw	r30, r22
 a86:	00 84       	ldd	r0, Z+8	; 0x08
 a88:	f1 85       	ldd	r31, Z+9	; 0x09
 a8a:	e0 2d       	mov	r30, r0
 a8c:	09 95       	icall
 a8e:	89 2b       	or	r24, r25
 a90:	e1 f6       	brne	.-72     	; 0xa4a <fputc+0x10>
 a92:	d8 01       	movw	r26, r16
 a94:	16 96       	adiw	r26, 0x06	; 6
 a96:	8d 91       	ld	r24, X+
 a98:	9c 91       	ld	r25, X
 a9a:	17 97       	sbiw	r26, 0x07	; 7
 a9c:	01 96       	adiw	r24, 0x01	; 1
 a9e:	17 96       	adiw	r26, 0x07	; 7
 aa0:	9c 93       	st	X, r25
 aa2:	8e 93       	st	-X, r24
 aa4:	16 97       	sbiw	r26, 0x06	; 6
 aa6:	ce 01       	movw	r24, r28
 aa8:	df 91       	pop	r29
 aaa:	cf 91       	pop	r28
 aac:	1f 91       	pop	r17
 aae:	0f 91       	pop	r16
 ab0:	08 95       	ret

00000ab2 <__ultoa_invert>:
 ab2:	fa 01       	movw	r30, r20
 ab4:	aa 27       	eor	r26, r26
 ab6:	28 30       	cpi	r18, 0x08	; 8
 ab8:	51 f1       	breq	.+84     	; 0xb0e <__ultoa_invert+0x5c>
 aba:	20 31       	cpi	r18, 0x10	; 16
 abc:	81 f1       	breq	.+96     	; 0xb1e <__ultoa_invert+0x6c>
 abe:	e8 94       	clt
 ac0:	6f 93       	push	r22
 ac2:	6e 7f       	andi	r22, 0xFE	; 254
 ac4:	6e 5f       	subi	r22, 0xFE	; 254
 ac6:	7f 4f       	sbci	r23, 0xFF	; 255
 ac8:	8f 4f       	sbci	r24, 0xFF	; 255
 aca:	9f 4f       	sbci	r25, 0xFF	; 255
 acc:	af 4f       	sbci	r26, 0xFF	; 255
 ace:	b1 e0       	ldi	r27, 0x01	; 1
 ad0:	3e d0       	rcall	.+124    	; 0xb4e <__ultoa_invert+0x9c>
 ad2:	b4 e0       	ldi	r27, 0x04	; 4
 ad4:	3c d0       	rcall	.+120    	; 0xb4e <__ultoa_invert+0x9c>
 ad6:	67 0f       	add	r22, r23
 ad8:	78 1f       	adc	r23, r24
 ada:	89 1f       	adc	r24, r25
 adc:	9a 1f       	adc	r25, r26
 ade:	a1 1d       	adc	r26, r1
 ae0:	68 0f       	add	r22, r24
 ae2:	79 1f       	adc	r23, r25
 ae4:	8a 1f       	adc	r24, r26
 ae6:	91 1d       	adc	r25, r1
 ae8:	a1 1d       	adc	r26, r1
 aea:	6a 0f       	add	r22, r26
 aec:	71 1d       	adc	r23, r1
 aee:	81 1d       	adc	r24, r1
 af0:	91 1d       	adc	r25, r1
 af2:	a1 1d       	adc	r26, r1
 af4:	20 d0       	rcall	.+64     	; 0xb36 <__ultoa_invert+0x84>
 af6:	09 f4       	brne	.+2      	; 0xafa <__ultoa_invert+0x48>
 af8:	68 94       	set
 afa:	3f 91       	pop	r19
 afc:	2a e0       	ldi	r18, 0x0A	; 10
 afe:	26 9f       	mul	r18, r22
 b00:	11 24       	eor	r1, r1
 b02:	30 19       	sub	r19, r0
 b04:	30 5d       	subi	r19, 0xD0	; 208
 b06:	31 93       	st	Z+, r19
 b08:	de f6       	brtc	.-74     	; 0xac0 <__ultoa_invert+0xe>
 b0a:	cf 01       	movw	r24, r30
 b0c:	08 95       	ret
 b0e:	46 2f       	mov	r20, r22
 b10:	47 70       	andi	r20, 0x07	; 7
 b12:	40 5d       	subi	r20, 0xD0	; 208
 b14:	41 93       	st	Z+, r20
 b16:	b3 e0       	ldi	r27, 0x03	; 3
 b18:	0f d0       	rcall	.+30     	; 0xb38 <__ultoa_invert+0x86>
 b1a:	c9 f7       	brne	.-14     	; 0xb0e <__ultoa_invert+0x5c>
 b1c:	f6 cf       	rjmp	.-20     	; 0xb0a <__ultoa_invert+0x58>
 b1e:	46 2f       	mov	r20, r22
 b20:	4f 70       	andi	r20, 0x0F	; 15
 b22:	40 5d       	subi	r20, 0xD0	; 208
 b24:	4a 33       	cpi	r20, 0x3A	; 58
 b26:	18 f0       	brcs	.+6      	; 0xb2e <__ultoa_invert+0x7c>
 b28:	49 5d       	subi	r20, 0xD9	; 217
 b2a:	31 fd       	sbrc	r19, 1
 b2c:	40 52       	subi	r20, 0x20	; 32
 b2e:	41 93       	st	Z+, r20
 b30:	02 d0       	rcall	.+4      	; 0xb36 <__ultoa_invert+0x84>
 b32:	a9 f7       	brne	.-22     	; 0xb1e <__ultoa_invert+0x6c>
 b34:	ea cf       	rjmp	.-44     	; 0xb0a <__ultoa_invert+0x58>
 b36:	b4 e0       	ldi	r27, 0x04	; 4
 b38:	a6 95       	lsr	r26
 b3a:	97 95       	ror	r25
 b3c:	87 95       	ror	r24
 b3e:	77 95       	ror	r23
 b40:	67 95       	ror	r22
 b42:	ba 95       	dec	r27
 b44:	c9 f7       	brne	.-14     	; 0xb38 <__ultoa_invert+0x86>
 b46:	00 97       	sbiw	r24, 0x00	; 0
 b48:	61 05       	cpc	r22, r1
 b4a:	71 05       	cpc	r23, r1
 b4c:	08 95       	ret
 b4e:	9b 01       	movw	r18, r22
 b50:	ac 01       	movw	r20, r24
 b52:	0a 2e       	mov	r0, r26
 b54:	06 94       	lsr	r0
 b56:	57 95       	ror	r21
 b58:	47 95       	ror	r20
 b5a:	37 95       	ror	r19
 b5c:	27 95       	ror	r18
 b5e:	ba 95       	dec	r27
 b60:	c9 f7       	brne	.-14     	; 0xb54 <__ultoa_invert+0xa2>
 b62:	62 0f       	add	r22, r18
 b64:	73 1f       	adc	r23, r19
 b66:	84 1f       	adc	r24, r20
 b68:	95 1f       	adc	r25, r21
 b6a:	a0 1d       	adc	r26, r0
 b6c:	08 95       	ret

00000b6e <__prologue_saves__>:
 b6e:	2f 92       	push	r2
 b70:	3f 92       	push	r3
 b72:	4f 92       	push	r4
 b74:	5f 92       	push	r5
 b76:	6f 92       	push	r6
 b78:	7f 92       	push	r7
 b7a:	8f 92       	push	r8
 b7c:	9f 92       	push	r9
 b7e:	af 92       	push	r10
 b80:	bf 92       	push	r11
 b82:	cf 92       	push	r12
 b84:	df 92       	push	r13
 b86:	ef 92       	push	r14
 b88:	ff 92       	push	r15
 b8a:	0f 93       	push	r16
 b8c:	1f 93       	push	r17
 b8e:	cf 93       	push	r28
 b90:	df 93       	push	r29
 b92:	cd b7       	in	r28, 0x3d	; 61
 b94:	de b7       	in	r29, 0x3e	; 62
 b96:	ca 1b       	sub	r28, r26
 b98:	db 0b       	sbc	r29, r27
 b9a:	0f b6       	in	r0, 0x3f	; 63
 b9c:	f8 94       	cli
 b9e:	de bf       	out	0x3e, r29	; 62
 ba0:	0f be       	out	0x3f, r0	; 63
 ba2:	cd bf       	out	0x3d, r28	; 61
 ba4:	09 94       	ijmp

00000ba6 <__epilogue_restores__>:
 ba6:	2a 88       	ldd	r2, Y+18	; 0x12
 ba8:	39 88       	ldd	r3, Y+17	; 0x11
 baa:	48 88       	ldd	r4, Y+16	; 0x10
 bac:	5f 84       	ldd	r5, Y+15	; 0x0f
 bae:	6e 84       	ldd	r6, Y+14	; 0x0e
 bb0:	7d 84       	ldd	r7, Y+13	; 0x0d
 bb2:	8c 84       	ldd	r8, Y+12	; 0x0c
 bb4:	9b 84       	ldd	r9, Y+11	; 0x0b
 bb6:	aa 84       	ldd	r10, Y+10	; 0x0a
 bb8:	b9 84       	ldd	r11, Y+9	; 0x09
 bba:	c8 84       	ldd	r12, Y+8	; 0x08
 bbc:	df 80       	ldd	r13, Y+7	; 0x07
 bbe:	ee 80       	ldd	r14, Y+6	; 0x06
 bc0:	fd 80       	ldd	r15, Y+5	; 0x05
 bc2:	0c 81       	ldd	r16, Y+4	; 0x04
 bc4:	1b 81       	ldd	r17, Y+3	; 0x03
 bc6:	aa 81       	ldd	r26, Y+2	; 0x02
 bc8:	b9 81       	ldd	r27, Y+1	; 0x01
 bca:	ce 0f       	add	r28, r30
 bcc:	d1 1d       	adc	r29, r1
 bce:	0f b6       	in	r0, 0x3f	; 63
 bd0:	f8 94       	cli
 bd2:	de bf       	out	0x3e, r29	; 62
 bd4:	0f be       	out	0x3f, r0	; 63
 bd6:	cd bf       	out	0x3d, r28	; 61
 bd8:	ed 01       	movw	r28, r26
 bda:	08 95       	ret

00000bdc <_exit>:
 bdc:	f8 94       	cli

00000bde <__stop_program>:
 bde:	ff cf       	rjmp	.-2      	; 0xbde <__stop_program>
