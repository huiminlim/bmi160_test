
bmi160_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000078  00800100  00000b98  00000c2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005a  00800178  00800178  00000ca4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000ca4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000020ad  00000000  00000000  00000e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ee0  00000000  00000000  00002f2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ec8  00000000  00000000  00003e0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f0  00000000  00000000  00005cd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000130f9  00000000  00000000  00005fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000117a  00000000  00000000  000190c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  0001a23b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00001585  00000000  00000000  0001a32b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e9       	ldi	r30, 0x98	; 152
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 37       	cpi	r26, 0x78	; 120
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e7       	ldi	r26, 0x78	; 120
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 3d       	cpi	r26, 0xD2	; 210
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	ed d1       	rcall	.+986    	; 0x476 <main>
  9c:	7b c5       	rjmp	.+2806   	; 0xb94 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <spixfer>:
    This function transfers 8 bits via SPI
*/
uint8_t spixfer(uint8_t x) {
    // Hardware SPI transfer used
    // Write to MOSI pin and receive on MISO pin
    SPDR = x;
  a0:	8e bd       	out	0x2e, r24	; 46

    // NOP to introduce delay to prevent wait
    // Loop form iterating when running at the maximum speed
    // This gives about 10% more speed,
    // even if it seems counter-intuitive at lower speeds it is unnoticed.
    asm volatile("nop");
  a2:	00 00       	nop

    while (!(SPSR & (1 << SPIF))) ; // wait
  a4:	0d b4       	in	r0, 0x2d	; 45
  a6:	07 fe       	sbrs	r0, 7
  a8:	fd cf       	rjmp	.-6      	; 0xa4 <spixfer+0x4>

    return SPDR;
  aa:	8e b5       	in	r24, 0x2e	; 46
}
  ac:	08 95       	ret

000000ae <read8>:
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
  ae:	2a 98       	cbi	0x05, 2	; 5
uint8_t read8(uint8_t reg) {
    // SS set to low - select slave
    ioport_set_pin_low(SPI_HARDWARE_SS);

    // read, bit 7 set to 1
    spixfer(reg | (1 << BMI160_SPI_READ_BIT));
  b0:	80 68       	ori	r24, 0x80	; 128
  b2:	f6 df       	rcall	.-20     	; 0xa0 <spixfer>
    uint8_t value = spixfer(0);
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	f4 df       	rcall	.-24     	; 0xa0 <spixfer>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
  b8:	2a 9a       	sbi	0x05, 2	; 5

    // SS set to high - de-select slave
    ioport_set_pin_high(SPI_HARDWARE_SS);

    return value;
}
  ba:	08 95       	ret

000000bc <get_rotation>:
    @param y 16-bit signed integer container for Y-axis rotation
    @param z 16-bit signed integer container for Z-axis rotation
    @see getMotion6()
    @see BMI160_RA_GYRO_X_L
*/
void get_rotation(int16_t *x, int16_t *y, int16_t *z) {
  bc:	9f 92       	push	r9
  be:	af 92       	push	r10
  c0:	bf 92       	push	r11
  c2:	cf 92       	push	r12
  c4:	df 92       	push	r13
  c6:	ef 92       	push	r14
  c8:	ff 92       	push	r15
  ca:	0f 93       	push	r16
  cc:	1f 93       	push	r17
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	6c 01       	movw	r12, r24
  d4:	7b 01       	movw	r14, r22
  d6:	8a 01       	movw	r16, r20
    uint8_t buffer[6];

    // Send address to read from and read first byte
    buffer[0] = read8(BMI160_RA_GYRO_X_L);
  d8:	8c e0       	ldi	r24, 0x0C	; 12
  da:	e9 df       	rcall	.-46     	; 0xae <read8>
  dc:	b8 2e       	mov	r11, r24
    //printf("Byte 1: %d\r\n", buffer[0]);

    buffer[1] = read8(BMI160_RA_GYRO_X_H);
  de:	8d e0       	ldi	r24, 0x0D	; 13
  e0:	e6 df       	rcall	.-52     	; 0xae <read8>
  e2:	98 2e       	mov	r9, r24
    //printf("Byte 2: %d\r\n", buffer[1]);

    buffer[2] = read8(BMI160_RA_GYRO_Y_L);
  e4:	8e e0       	ldi	r24, 0x0E	; 14
  e6:	e3 df       	rcall	.-58     	; 0xae <read8>
  e8:	d8 2f       	mov	r29, r24
    //printf("Byte 3: %d\r\n", buffer[2]);

    buffer[3] = read8(BMI160_RA_GYRO_Y_H);
  ea:	8f e0       	ldi	r24, 0x0F	; 15
  ec:	e0 df       	rcall	.-64     	; 0xae <read8>
  ee:	a8 2e       	mov	r10, r24
    //printf("Byte 4: %d\r\n", buffer[3]);

    buffer[4] = read8(BMI160_RA_GYRO_Z_L);
  f0:	80 e1       	ldi	r24, 0x10	; 16
  f2:	dd df       	rcall	.-70     	; 0xae <read8>
  f4:	c8 2f       	mov	r28, r24
    //printf("Byte 5: %d\r\n", buffer[4]);

    buffer[5] = read8(BMI160_RA_GYRO_Z_H);
  f6:	81 e1       	ldi	r24, 0x11	; 17
  f8:	da df       	rcall	.-76     	; 0xae <read8>
  fa:	2b 2d       	mov	r18, r11
    //printf("Byte 6: %d\r\n", buffer[5]);

    *x = (((int16_t)buffer[1]) << 8) | buffer[0];
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	39 29       	or	r19, r9
 100:	f6 01       	movw	r30, r12
 102:	31 83       	std	Z+1, r19	; 0x01
 104:	20 83       	st	Z, r18
 106:	2d 2f       	mov	r18, r29
    *y = (((int16_t)buffer[3]) << 8) | buffer[2];
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	3a 29       	or	r19, r10
 10c:	f7 01       	movw	r30, r14
 10e:	31 83       	std	Z+1, r19	; 0x01
 110:	20 83       	st	Z, r18
 112:	2c 2f       	mov	r18, r28
    *z = (((int16_t)buffer[5]) << 8) | buffer[4];
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	38 2b       	or	r19, r24
 118:	f8 01       	movw	r30, r16
 11a:	31 83       	std	Z+1, r19	; 0x01
 11c:	20 83       	st	Z, r18
 11e:	df 91       	pop	r29
}
 120:	cf 91       	pop	r28
 122:	1f 91       	pop	r17
 124:	0f 91       	pop	r16
 126:	ff 90       	pop	r15
 128:	ef 90       	pop	r14
 12a:	df 90       	pop	r13
 12c:	cf 90       	pop	r12
 12e:	bf 90       	pop	r11
 130:	af 90       	pop	r10
 132:	9f 90       	pop	r9
 134:	08 95       	ret

00000136 <read_gyro>:
 136:	cf 92       	push	r12
    }

    set_full_scale_gyro_range(bmi_range);
}

void read_gyro(int16_t *x, int16_t *y, int16_t *z) {
 138:	df 92       	push	r13
 13a:	ef 92       	push	r14
 13c:	ff 92       	push	r15
 13e:	0f 93       	push	r16
 140:	1f 93       	push	r17
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	00 d0       	rcall	.+0      	; 0x148 <read_gyro+0x12>
 148:	00 d0       	rcall	.+0      	; 0x14a <read_gyro+0x14>
 14a:	00 d0       	rcall	.+0      	; 0x14c <read_gyro+0x16>
 14c:	cd b7       	in	r28, 0x3d	; 61
 14e:	de b7       	in	r29, 0x3e	; 62
 150:	6c 01       	movw	r12, r24
 152:	7b 01       	movw	r14, r22
 154:	8a 01       	movw	r16, r20
    int16_t sx = 0, sy = 0, sz = 0;
 156:	1a 82       	std	Y+2, r1	; 0x02
 158:	19 82       	std	Y+1, r1	; 0x01
 15a:	1c 82       	std	Y+4, r1	; 0x04
 15c:	1b 82       	std	Y+3, r1	; 0x03
 15e:	1e 82       	std	Y+6, r1	; 0x06
 160:	1d 82       	std	Y+5, r1	; 0x05

    get_rotation(&sx, &sy, &sz);
 162:	ae 01       	movw	r20, r28
 164:	4b 5f       	subi	r20, 0xFB	; 251
 166:	5f 4f       	sbci	r21, 0xFF	; 255
 168:	be 01       	movw	r22, r28
 16a:	6d 5f       	subi	r22, 0xFD	; 253
 16c:	7f 4f       	sbci	r23, 0xFF	; 255
 16e:	ce 01       	movw	r24, r28
 170:	01 96       	adiw	r24, 0x01	; 1
 172:	a4 df       	rcall	.-184    	; 0xbc <get_rotation>

    *x = (int32_t) sx;
 174:	89 81       	ldd	r24, Y+1	; 0x01
 176:	9a 81       	ldd	r25, Y+2	; 0x02
 178:	f6 01       	movw	r30, r12
 17a:	91 83       	std	Z+1, r25	; 0x01
 17c:	80 83       	st	Z, r24
    *y = (int32_t) sy;
 17e:	8b 81       	ldd	r24, Y+3	; 0x03
 180:	9c 81       	ldd	r25, Y+4	; 0x04
 182:	f7 01       	movw	r30, r14
 184:	91 83       	std	Z+1, r25	; 0x01
 186:	80 83       	st	Z, r24
    *z = (int32_t) sz;
 188:	8d 81       	ldd	r24, Y+5	; 0x05
 18a:	9e 81       	ldd	r25, Y+6	; 0x06
 18c:	f8 01       	movw	r30, r16
 18e:	91 83       	std	Z+1, r25	; 0x01
 190:	80 83       	st	Z, r24
}
 192:	26 96       	adiw	r28, 0x06	; 6
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	f8 94       	cli
 198:	de bf       	out	0x3e, r29	; 62
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	cd bf       	out	0x3d, r28	; 61
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	1f 91       	pop	r17
 1a4:	0f 91       	pop	r16
 1a6:	ff 90       	pop	r15
 1a8:	ef 90       	pop	r14
 1aa:	df 90       	pop	r13
 1ac:	cf 90       	pop	r12
 1ae:	08 95       	ret

000001b0 <reg_read>:
/*!
     @brief  Reads from a given register address
	 Wrapper function to read register from sensor, uses read8() function
*/
uint8_t reg_read (uint8_t reg) {
    uint8_t ret = read8(reg);
 1b0:	7e cf       	rjmp	.-260    	; 0xae <read8>
    return ret;
}
 1b2:	08 95       	ret

000001b4 <spi_init>:
 1b4:	2a 9a       	sbi	0x05, 2	; 5
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
 1b6:	22 9a       	sbi	0x04, 2	; 4

    // Set SS as output pin
    ioport_set_pin_dir(SPI_HARDWARE_SS, IOPORT_DIR_OUTPUT);

    // Initialize as SPI master
    SPCR |= (1 << MSTR);
 1b8:	8c b5       	in	r24, 0x2c	; 44
 1ba:	80 61       	ori	r24, 0x10	; 16
 1bc:	8c bd       	out	0x2c, r24	; 44
    SPCR |= (1 << SPE);
 1be:	8c b5       	in	r24, 0x2c	; 44
 1c0:	80 64       	ori	r24, 0x40	; 64
 1c2:	8c bd       	out	0x2c, r24	; 44
 1c4:	25 9a       	sbi	0x04, 5	; 4
 1c6:	23 9a       	sbi	0x04, 3	; 4
    ioport_set_pin_dir(SPI_HARDWARE_MOSI, IOPORT_DIR_OUTPUT);

    // MISO pin is override to Input automatically
    //ioport_set_pin_dir(SPI_HARDWARE_MISO, IOPORT_DIR_INPUT);

    num_initialized = 0;
 1c8:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <__data_end+0x1>
 1cc:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <__data_end>
 1d0:	08 95       	ret

000001d2 <uart_putchar>:
/*
    Send character c down the UART Tx, wait until tx holding register
    is empty.
*/
int
uart_putchar(char c, FILE *stream) {
 1d2:	cf 93       	push	r28
 1d4:	c8 2f       	mov	r28, r24

    if (c == '\a') {
 1d6:	87 30       	cpi	r24, 0x07	; 7
 1d8:	61 f4       	brne	.+24     	; 0x1f2 <uart_putchar+0x20>
        fputs("*ring*\n", stderr);
 1da:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <__iob+0x4>
 1de:	30 91 d1 01 	lds	r19, 0x01D1	; 0x8001d1 <__iob+0x5>
 1e2:	47 e0       	ldi	r20, 0x07	; 7
 1e4:	50 e0       	ldi	r21, 0x00	; 0
 1e6:	61 e0       	ldi	r22, 0x01	; 1
 1e8:	70 e0       	ldi	r23, 0x00	; 0
 1ea:	8e e0       	ldi	r24, 0x0E	; 14
 1ec:	91 e0       	ldi	r25, 0x01	; 1
 1ee:	a4 d1       	rcall	.+840    	; 0x538 <fwrite>
        return 0;
 1f0:	0b c0       	rjmp	.+22     	; 0x208 <uart_putchar+0x36>
    }

    if (c == '\n') {
 1f2:	8a 30       	cpi	r24, 0x0A	; 10
 1f4:	11 f4       	brne	.+4      	; 0x1fa <uart_putchar+0x28>
        uart_putchar('\r', stream);
 1f6:	8d e0       	ldi	r24, 0x0D	; 13
 1f8:	ec df       	rcall	.-40     	; 0x1d2 <uart_putchar>
    }

    loop_until_bit_is_set(UCSR0A, UDRE0);
 1fa:	e0 ec       	ldi	r30, 0xC0	; 192
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	80 81       	ld	r24, Z
 200:	85 ff       	sbrs	r24, 5
 202:	fd cf       	rjmp	.-6      	; 0x1fe <uart_putchar+0x2c>
    UDR0 = c;
 204:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>

    return 0;
}
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	cf 91       	pop	r28
 20e:	08 95       	ret

00000210 <uart_getchar>:

    Successive calls to uart_getchar() will be satisfied from the
    internal buffer until that buffer is emptied again.
*/
int
uart_getchar(FILE *stream) {
 210:	6f 92       	push	r6
 212:	7f 92       	push	r7
 214:	8f 92       	push	r8
 216:	9f 92       	push	r9
 218:	af 92       	push	r10
 21a:	bf 92       	push	r11
 21c:	cf 92       	push	r12
 21e:	df 92       	push	r13
 220:	ef 92       	push	r14
 222:	ff 92       	push	r15
 224:	0f 93       	push	r16
 226:	1f 93       	push	r17
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
    uint8_t c;
    char *cp, *cp2;
    static char b[RX_BUFSIZE];
    static char *rxp;

    if (rxp == 0)
 22c:	20 91 ca 01 	lds	r18, 0x01CA	; 0x8001ca <rxp.2118>
 230:	30 91 cb 01 	lds	r19, 0x01CB	; 0x8001cb <rxp.2118+0x1>
 234:	23 2b       	or	r18, r19
 236:	09 f0       	breq	.+2      	; 0x23a <uart_getchar+0x2a>
 238:	cc c0       	rjmp	.+408    	; 0x3d2 <uart_getchar+0x1c2>
 23a:	8c 01       	movw	r16, r24
 23c:	0f 2e       	mov	r0, r31
 23e:	fa e7       	ldi	r31, 0x7A	; 122
 240:	8f 2e       	mov	r8, r31
 242:	f1 e0       	ldi	r31, 0x01	; 1
 244:	9f 2e       	mov	r9, r31
 246:	f0 2d       	mov	r31, r0
        for (cp = b;;) {
            loop_until_bit_is_set(UCSR0A, RXC0);
 248:	c0 ec       	ldi	r28, 0xC0	; 192
 24a:	d0 e0       	ldi	r29, 0x00	; 0

            if (UCSR0A & _BV(DOR0)) {
                return _FDEV_ERR;
            }

            c = UDR0;
 24c:	0f 2e       	mov	r0, r31
 24e:	f6 ec       	ldi	r31, 0xC6	; 198
 250:	cf 2e       	mov	r12, r31
 252:	d1 2c       	mov	r13, r1
 254:	f0 2d       	mov	r31, r0
 256:	54 01       	movw	r10, r8
 258:	0f 2e       	mov	r0, r31
 25a:	f9 e7       	ldi	r31, 0x79	; 121
 25c:	6f 2e       	mov	r6, r31
 25e:	f1 e0       	ldi	r31, 0x01	; 1
 260:	7f 2e       	mov	r7, r31
 262:	f0 2d       	mov	r31, r0
    static char b[RX_BUFSIZE];
    static char *rxp;

    if (rxp == 0)
        for (cp = b;;) {
            loop_until_bit_is_set(UCSR0A, RXC0);
 264:	88 81       	ld	r24, Y
 266:	88 23       	and	r24, r24
 268:	ec f7       	brge	.-6      	; 0x264 <uart_getchar+0x54>

            if (UCSR0A & _BV(FE0)) {
 26a:	88 81       	ld	r24, Y
 26c:	84 fd       	sbrc	r24, 4
 26e:	c4 c0       	rjmp	.+392    	; 0x3f8 <uart_getchar+0x1e8>
                return _FDEV_EOF;
            }

            if (UCSR0A & _BV(DOR0)) {
 270:	88 81       	ld	r24, Y
 272:	83 fd       	sbrc	r24, 3
 274:	c4 c0       	rjmp	.+392    	; 0x3fe <uart_getchar+0x1ee>
                return _FDEV_ERR;
            }

            c = UDR0;
 276:	f6 01       	movw	r30, r12
 278:	80 81       	ld	r24, Z

            /* behaviour similar to Unix stty ICRNL */
            if (c == '\r') {
 27a:	8d 30       	cpi	r24, 0x0D	; 13
 27c:	11 f0       	breq	.+4      	; 0x282 <uart_getchar+0x72>
                c = '\n';
            }

            if (c == '\n') {
 27e:	8a 30       	cpi	r24, 0x0A	; 10
 280:	61 f4       	brne	.+24     	; 0x29a <uart_getchar+0x8a>
                *cp = c;
 282:	8a e0       	ldi	r24, 0x0A	; 10
 284:	f4 01       	movw	r30, r8
 286:	80 83       	st	Z, r24
                uart_putchar(c, stream);
 288:	b8 01       	movw	r22, r16
 28a:	a3 df       	rcall	.-186    	; 0x1d2 <uart_putchar>
                rxp = b;
 28c:	8a e7       	ldi	r24, 0x7A	; 122
 28e:	91 e0       	ldi	r25, 0x01	; 1
 290:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <rxp.2118+0x1>
 294:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <rxp.2118>
                break;
 298:	9c c0       	rjmp	.+312    	; 0x3d2 <uart_getchar+0x1c2>
            }
            else if (c == '\t') {
 29a:	89 30       	cpi	r24, 0x09	; 9
 29c:	39 f0       	breq	.+14     	; 0x2ac <uart_getchar+0x9c>
                c = ' ';
            }

            if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
 29e:	90 ee       	ldi	r25, 0xE0	; 224
 2a0:	98 0f       	add	r25, r24
 2a2:	9f 35       	cpi	r25, 0x5F	; 95
 2a4:	20 f0       	brcs	.+8      	; 0x2ae <uart_getchar+0x9e>
 2a6:	80 3a       	cpi	r24, 0xA0	; 160
 2a8:	a8 f0       	brcs	.+42     	; 0x2d4 <uart_getchar+0xc4>
 2aa:	01 c0       	rjmp	.+2      	; 0x2ae <uart_getchar+0x9e>
                uart_putchar(c, stream);
                rxp = b;
                break;
            }
            else if (c == '\t') {
                c = ' ';
 2ac:	80 e2       	ldi	r24, 0x20	; 32
            }

            if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
                    c >= (uint8_t)'\xa0') {
                if (cp == b + RX_BUFSIZE - 1) {
 2ae:	f9 ec       	ldi	r31, 0xC9	; 201
 2b0:	8f 16       	cp	r8, r31
 2b2:	f1 e0       	ldi	r31, 0x01	; 1
 2b4:	9f 06       	cpc	r9, r31
 2b6:	21 f4       	brne	.+8      	; 0x2c0 <uart_getchar+0xb0>
                    uart_putchar('\a', stream);
 2b8:	b8 01       	movw	r22, r16
 2ba:	87 e0       	ldi	r24, 0x07	; 7
 2bc:	8a df       	rcall	.-236    	; 0x1d2 <uart_putchar>
 2be:	d2 cf       	rjmp	.-92     	; 0x264 <uart_getchar+0x54>
                }
                else {
                    *cp++ = c;
 2c0:	74 01       	movw	r14, r8
 2c2:	9f ef       	ldi	r25, 0xFF	; 255
 2c4:	e9 1a       	sub	r14, r25
 2c6:	f9 0a       	sbc	r15, r25
 2c8:	f4 01       	movw	r30, r8
                    uart_putchar(c, stream);
 2ca:	80 83       	st	Z, r24
 2cc:	b8 01       	movw	r22, r16
 2ce:	81 df       	rcall	.-254    	; 0x1d2 <uart_putchar>
                    c >= (uint8_t)'\xa0') {
                if (cp == b + RX_BUFSIZE - 1) {
                    uart_putchar('\a', stream);
                }
                else {
                    *cp++ = c;
 2d0:	47 01       	movw	r8, r14
 2d2:	c8 cf       	rjmp	.-112    	; 0x264 <uart_getchar+0x54>
                }

                continue;
            }

            switch (c) {
 2d4:	82 31       	cpi	r24, 0x12	; 18
 2d6:	b9 f1       	breq	.+110    	; 0x346 <uart_getchar+0x136>
 2d8:	30 f4       	brcc	.+12     	; 0x2e6 <uart_getchar+0xd6>
 2da:	83 30       	cpi	r24, 0x03	; 3
 2dc:	09 f4       	brne	.+2      	; 0x2e0 <uart_getchar+0xd0>
 2de:	92 c0       	rjmp	.+292    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 2e0:	88 30       	cpi	r24, 0x08	; 8
 2e2:	e9 f0       	breq	.+58     	; 0x31e <uart_getchar+0x10e>
 2e4:	bf cf       	rjmp	.-130    	; 0x264 <uart_getchar+0x54>
 2e6:	87 31       	cpi	r24, 0x17	; 23
 2e8:	29 f0       	breq	.+10     	; 0x2f4 <uart_getchar+0xe4>
 2ea:	8f 37       	cpi	r24, 0x7F	; 127
 2ec:	c1 f0       	breq	.+48     	; 0x31e <uart_getchar+0x10e>
 2ee:	85 31       	cpi	r24, 0x15	; 21
 2f0:	79 f0       	breq	.+30     	; 0x310 <uart_getchar+0x100>
 2f2:	b8 cf       	rjmp	.-144    	; 0x264 <uart_getchar+0x54>
                }

                break;

            case 'w' & 0x1f:
                while (cp > b && cp[-1] != ' ') {
 2f4:	fa e7       	ldi	r31, 0x7A	; 122
 2f6:	8f 16       	cp	r8, r31
 2f8:	f1 e0       	ldi	r31, 0x01	; 1
 2fa:	9f 06       	cpc	r9, r31
 2fc:	09 f0       	breq	.+2      	; 0x300 <uart_getchar+0xf0>
 2fe:	08 f4       	brcc	.+2      	; 0x302 <uart_getchar+0xf2>
 300:	b1 cf       	rjmp	.-158    	; 0x264 <uart_getchar+0x54>
 302:	f4 01       	movw	r30, r8
 304:	31 97       	sbiw	r30, 0x01	; 1
 306:	80 81       	ld	r24, Z
 308:	80 32       	cpi	r24, 0x20	; 32
 30a:	09 f0       	breq	.+2      	; 0x30e <uart_getchar+0xfe>
 30c:	4a c0       	rjmp	.+148    	; 0x3a2 <uart_getchar+0x192>
 30e:	aa cf       	rjmp	.-172    	; 0x264 <uart_getchar+0x54>
                }

                break;

            case 'u' & 0x1f:
                while (cp > b) {
 310:	8a e7       	ldi	r24, 0x7A	; 122
 312:	88 16       	cp	r8, r24
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	98 06       	cpc	r9, r24
 318:	09 f0       	breq	.+2      	; 0x31c <uart_getchar+0x10c>
 31a:	70 f5       	brcc	.+92     	; 0x378 <uart_getchar+0x168>
 31c:	a3 cf       	rjmp	.-186    	; 0x264 <uart_getchar+0x54>
            case 'c' & 0x1f:
                return -1;

            case '\b':
            case '\x7f':
                if (cp > b) {
 31e:	9a e7       	ldi	r25, 0x7A	; 122
 320:	89 16       	cp	r8, r25
 322:	91 e0       	ldi	r25, 0x01	; 1
 324:	99 06       	cpc	r9, r25
 326:	09 f0       	breq	.+2      	; 0x32a <uart_getchar+0x11a>
 328:	08 f4       	brcc	.+2      	; 0x32c <uart_getchar+0x11c>
                    uart_putchar('\b', stream);
 32a:	9c cf       	rjmp	.-200    	; 0x264 <uart_getchar+0x54>
 32c:	b8 01       	movw	r22, r16
 32e:	88 e0       	ldi	r24, 0x08	; 8
                    uart_putchar(' ', stream);
 330:	50 df       	rcall	.-352    	; 0x1d2 <uart_putchar>
 332:	b8 01       	movw	r22, r16
 334:	80 e2       	ldi	r24, 0x20	; 32
                    uart_putchar('\b', stream);
 336:	4d df       	rcall	.-358    	; 0x1d2 <uart_putchar>
 338:	b8 01       	movw	r22, r16
 33a:	88 e0       	ldi	r24, 0x08	; 8
 33c:	4a df       	rcall	.-364    	; 0x1d2 <uart_putchar>
                    cp--;
 33e:	e1 e0       	ldi	r30, 0x01	; 1
 340:	8e 1a       	sub	r8, r30
 342:	91 08       	sbc	r9, r1
                }

                break;

            case 'r' & 0x1f:
                uart_putchar('\r', stream);
 344:	8f cf       	rjmp	.-226    	; 0x264 <uart_getchar+0x54>
 346:	b8 01       	movw	r22, r16
 348:	8d e0       	ldi	r24, 0x0D	; 13
 34a:	43 df       	rcall	.-378    	; 0x1d2 <uart_putchar>

                for (cp2 = b; cp2 < cp; cp2++) {
 34c:	fa e7       	ldi	r31, 0x7A	; 122
 34e:	8f 16       	cp	r8, r31
 350:	f1 e0       	ldi	r31, 0x01	; 1
 352:	9f 06       	cpc	r9, r31
 354:	09 f0       	breq	.+2      	; 0x358 <uart_getchar+0x148>
 356:	08 f4       	brcc	.+2      	; 0x35a <uart_getchar+0x14a>
 358:	85 cf       	rjmp	.-246    	; 0x264 <uart_getchar+0x54>
 35a:	0f 2e       	mov	r0, r31
 35c:	fa e7       	ldi	r31, 0x7A	; 122
 35e:	ef 2e       	mov	r14, r31
 360:	f1 e0       	ldi	r31, 0x01	; 1
 362:	ff 2e       	mov	r15, r31
                    uart_putchar(*cp2, stream);
 364:	f0 2d       	mov	r31, r0
 366:	b8 01       	movw	r22, r16
 368:	f7 01       	movw	r30, r14
 36a:	81 91       	ld	r24, Z+
 36c:	7f 01       	movw	r14, r30
                break;

            case 'r' & 0x1f:
                uart_putchar('\r', stream);

                for (cp2 = b; cp2 < cp; cp2++) {
 36e:	31 df       	rcall	.-414    	; 0x1d2 <uart_putchar>
 370:	8e 14       	cp	r8, r14
 372:	9f 04       	cpc	r9, r15

                break;

            case 'u' & 0x1f:
                while (cp > b) {
                    uart_putchar('\b', stream);
 374:	c1 f7       	brne	.-16     	; 0x366 <uart_getchar+0x156>
 376:	76 cf       	rjmp	.-276    	; 0x264 <uart_getchar+0x54>
 378:	b8 01       	movw	r22, r16
                    uart_putchar(' ', stream);
 37a:	88 e0       	ldi	r24, 0x08	; 8
 37c:	2a df       	rcall	.-428    	; 0x1d2 <uart_putchar>
 37e:	b8 01       	movw	r22, r16
 380:	80 e2       	ldi	r24, 0x20	; 32
                    uart_putchar('\b', stream);
 382:	27 df       	rcall	.-434    	; 0x1d2 <uart_putchar>
 384:	b8 01       	movw	r22, r16
 386:	88 e0       	ldi	r24, 0x08	; 8
 388:	24 df       	rcall	.-440    	; 0x1d2 <uart_putchar>
                    cp--;
 38a:	f1 e0       	ldi	r31, 0x01	; 1
 38c:	8f 1a       	sub	r8, r31
 38e:	91 08       	sbc	r9, r1
                }

                break;

            case 'u' & 0x1f:
                while (cp > b) {
 390:	8a e7       	ldi	r24, 0x7A	; 122
 392:	88 16       	cp	r8, r24
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	98 06       	cpc	r9, r24
 398:	79 f7       	brne	.-34     	; 0x378 <uart_getchar+0x168>
 39a:	f3 01       	movw	r30, r6
 39c:	31 96       	adiw	r30, 0x01	; 1
 39e:	4f 01       	movw	r8, r30
 3a0:	61 cf       	rjmp	.-318    	; 0x264 <uart_getchar+0x54>
 3a2:	74 01       	movw	r14, r8

                break;

            case 'w' & 0x1f:
                while (cp > b && cp[-1] != ' ') {
                    uart_putchar('\b', stream);
 3a4:	f1 e0       	ldi	r31, 0x01	; 1
 3a6:	ef 1a       	sub	r14, r31
 3a8:	f1 08       	sbc	r15, r1
 3aa:	b8 01       	movw	r22, r16
                    uart_putchar(' ', stream);
 3ac:	88 e0       	ldi	r24, 0x08	; 8
 3ae:	11 df       	rcall	.-478    	; 0x1d2 <uart_putchar>
 3b0:	b8 01       	movw	r22, r16
 3b2:	80 e2       	ldi	r24, 0x20	; 32
                    uart_putchar('\b', stream);
 3b4:	0e df       	rcall	.-484    	; 0x1d2 <uart_putchar>
 3b6:	b8 01       	movw	r22, r16
 3b8:	88 e0       	ldi	r24, 0x08	; 8
 3ba:	0b df       	rcall	.-490    	; 0x1d2 <uart_putchar>
                    cp--;
 3bc:	47 01       	movw	r8, r14
                }

                break;

            case 'w' & 0x1f:
                while (cp > b && cp[-1] != ' ') {
 3be:	ae 14       	cp	r10, r14
 3c0:	bf 04       	cpc	r11, r15
 3c2:	09 f4       	brne	.+2      	; 0x3c6 <uart_getchar+0x1b6>
 3c4:	4f cf       	rjmp	.-354    	; 0x264 <uart_getchar+0x54>
 3c6:	f7 01       	movw	r30, r14
 3c8:	82 91       	ld	r24, -Z
 3ca:	7f 01       	movw	r14, r30
 3cc:	80 32       	cpi	r24, 0x20	; 32
 3ce:	69 f7       	brne	.-38     	; 0x3aa <uart_getchar+0x19a>
 3d0:	49 cf       	rjmp	.-366    	; 0x264 <uart_getchar+0x54>

                break;
            }
        }

    c = *rxp++;
 3d2:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <rxp.2118>
 3d6:	f0 91 cb 01 	lds	r31, 0x01CB	; 0x8001cb <rxp.2118+0x1>
 3da:	cf 01       	movw	r24, r30
 3dc:	01 96       	adiw	r24, 0x01	; 1
 3de:	90 93 cb 01 	sts	0x01CB, r25	; 0x8001cb <rxp.2118+0x1>
 3e2:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <rxp.2118>
 3e6:	80 81       	ld	r24, Z

    if (c == '\n') {
 3e8:	8a 30       	cpi	r24, 0x0A	; 10
 3ea:	21 f4       	brne	.+8      	; 0x3f4 <uart_getchar+0x1e4>
        rxp = 0;
 3ec:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <rxp.2118+0x1>
 3f0:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <rxp.2118>
    }

    return c;
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	08 c0       	rjmp	.+16     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
    if (rxp == 0)
        for (cp = b;;) {
            loop_until_bit_is_set(UCSR0A, RXC0);

            if (UCSR0A & _BV(FE0)) {
                return _FDEV_EOF;
 3f8:	8e ef       	ldi	r24, 0xFE	; 254
 3fa:	9f ef       	ldi	r25, 0xFF	; 255
 3fc:	05 c0       	rjmp	.+10     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
            }

            if (UCSR0A & _BV(DOR0)) {
                return _FDEV_ERR;
 3fe:	8f ef       	ldi	r24, 0xFF	; 255
 400:	9f ef       	ldi	r25, 0xFF	; 255
 402:	02 c0       	rjmp	.+4      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
                continue;
            }

            switch (c) {
            case 'c' & 0x1f:
                return -1;
 404:	8f ef       	ldi	r24, 0xFF	; 255
 406:	9f ef       	ldi	r25, 0xFF	; 255
    if (c == '\n') {
        rxp = 0;
    }

    return c;
}
 408:	df 91       	pop	r29
 40a:	cf 91       	pop	r28
 40c:	1f 91       	pop	r17
 40e:	0f 91       	pop	r16
 410:	ff 90       	pop	r15
 412:	ef 90       	pop	r14
 414:	df 90       	pop	r13
 416:	cf 90       	pop	r12
 418:	bf 90       	pop	r11
 41a:	af 90       	pop	r10
 41c:	9f 90       	pop	r9
 41e:	8f 90       	pop	r8
 420:	7f 90       	pop	r7
 422:	6f 90       	pop	r6
 424:	08 95       	ret

00000426 <uart_init>:
void uart_init(void) {
#if F_CPU < 2000000UL && defined(U2X)
    UCSRA = _BV(U2X);             /* improve baud rate error by using 2x clk */
    UBRRL = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
    UBRR0H = (uint8_t) (MYUBRR >> 8);
 426:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    UBRR0L = (uint8_t) MYUBRR;
 42a:	80 e1       	ldi	r24, 0x10	; 16
 42c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
#endif
    UCSR0B = (1 << RXEN0) | (1 << TXEN0); /* tx/rx enable */
 430:	88 e1       	ldi	r24, 0x18	; 24
 432:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    UCSR0C = (3 << UCSZ00);
 436:	86 e0       	ldi	r24, 0x06	; 6
 438:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
    stdout = stdin = &usart0_str;
 43c:	ec ec       	ldi	r30, 0xCC	; 204
 43e:	f1 e0       	ldi	r31, 0x01	; 1
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	91 e0       	ldi	r25, 0x01	; 1
 444:	91 83       	std	Z+1, r25	; 0x01
 446:	80 83       	st	Z, r24
 448:	93 83       	std	Z+3, r25	; 0x03
 44a:	82 83       	std	Z+2, r24	; 0x02
 44c:	08 95       	ret

0000044e <board_init>:
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
 44e:	95 b1       	in	r25, 0x05	; 5
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
 450:	84 b1       	in	r24, 0x04	; 4
 452:	80 62       	ori	r24, 0x20	; 32
 454:	8f 77       	andi	r24, 0x7F	; 127
 456:	84 b9       	out	0x04, r24	; 4
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
 458:	89 2f       	mov	r24, r25
 45a:	80 6a       	ori	r24, 0xA0	; 160
 45c:	85 b9       	out	0x05, r24	; 5
 45e:	08 95       	ret

00000460 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
 460:	04 c0       	rjmp	.+8      	; 0x46a <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
 462:	61 50       	subi	r22, 0x01	; 1
 464:	71 09       	sbc	r23, r1
 466:	81 09       	sbc	r24, r1
 468:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
 46a:	61 15       	cp	r22, r1
 46c:	71 05       	cpc	r23, r1
 46e:	81 05       	cpc	r24, r1
 470:	91 05       	cpc	r25, r1
 472:	b9 f7       	brne	.-18     	; 0x462 <__portable_avr_delay_cycles+0x2>
 474:	08 95       	ret

00000476 <main>:
#include <stdlib.h>
#include <spi.h>
#include <uart.h>
#include <bmi160.h>

int main (void) {
 476:	cf 93       	push	r28
 478:	df 93       	push	r29
 47a:	00 d0       	rcall	.+0      	; 0x47c <main+0x6>
 47c:	00 d0       	rcall	.+0      	; 0x47e <main+0x8>
 47e:	00 d0       	rcall	.+0      	; 0x480 <main+0xa>
 480:	cd b7       	in	r28, 0x3d	; 61
 482:	de b7       	in	r29, 0x3e	; 62
    /* Insert system clock initialization code here (sysclk_init()). */
    board_init();
 484:	e4 df       	rcall	.-56     	; 0x44e <board_init>

    uart_init();
 486:	cf df       	rcall	.-98     	; 0x426 <uart_init>
 488:	86 e1       	ldi	r24, 0x16	; 22
    printf("------- Default testing -------\r\n\r\n");
 48a:	91 e0       	ldi	r25, 0x01	; 1
 48c:	9a d0       	rcall	.+308    	; 0x5c2 <puts>

    spi_init();
 48e:	92 de       	rcall	.-732    	; 0x1b4 <spi_init>
 490:	80 e0       	ldi	r24, 0x00	; 0

    uint8_t sensorID = reg_read(BMI160_RA_CHIP_ID);
 492:	8e de       	rcall	.-740    	; 0x1b0 <reg_read>
 494:	1f 92       	push	r1
 496:	8f 93       	push	r24
    printf("Sensor id: 0x%x\r\n\r\n", sensorID);
 498:	89 e3       	ldi	r24, 0x39	; 57
 49a:	91 e0       	ldi	r25, 0x01	; 1
 49c:	9f 93       	push	r25
 49e:	8f 93       	push	r24
 4a0:	7d d0       	rcall	.+250    	; 0x59c <printf>
 4a2:	0f 90       	pop	r0
 4a4:	0f 90       	pop	r0
 4a6:	0f 90       	pop	r0
 4a8:	0f 90       	pop	r0
 4aa:	0f 2e       	mov	r0, r31
 4ac:	fd e4       	ldi	r31, 0x4D	; 77

    int16_t gxRaw, gyRaw, gzRaw;         // raw gyro values

    while (1) {
        uint8_t sensorID = reg_read(BMI160_RA_CHIP_ID);
        printf("Sensor id: 0x%x\r\n", sensorID);
 4ae:	af 2e       	mov	r10, r31
 4b0:	f1 e0       	ldi	r31, 0x01	; 1
 4b2:	bf 2e       	mov	r11, r31
 4b4:	f0 2d       	mov	r31, r0
 4b6:	0f 2e       	mov	r0, r31
 4b8:	ff e5       	ldi	r31, 0x5F	; 95

        read_gyro(&gxRaw, &gyRaw, &gzRaw);

        printf("gx: %d ", gxRaw);
 4ba:	cf 2e       	mov	r12, r31
 4bc:	f1 e0       	ldi	r31, 0x01	; 1
 4be:	df 2e       	mov	r13, r31
 4c0:	f0 2d       	mov	r31, r0
 4c2:	0f 2e       	mov	r0, r31
 4c4:	f7 e6       	ldi	r31, 0x67	; 103
        printf("gy: %d ", gyRaw);
 4c6:	ef 2e       	mov	r14, r31
 4c8:	f1 e0       	ldi	r31, 0x01	; 1
 4ca:	ff 2e       	mov	r15, r31
 4cc:	f0 2d       	mov	r31, r0
 4ce:	0f e6       	ldi	r16, 0x6F	; 111
        printf("gx: %d\r\n", gzRaw);
 4d0:	11 e0       	ldi	r17, 0x01	; 1
 4d2:	80 e0       	ldi	r24, 0x00	; 0
    //printf("Read 2 - Sensor id: 0x%x\r\n\r\n", sensorID);

    int16_t gxRaw, gyRaw, gzRaw;         // raw gyro values

    while (1) {
        uint8_t sensorID = reg_read(BMI160_RA_CHIP_ID);
 4d4:	6d de       	rcall	.-806    	; 0x1b0 <reg_read>
 4d6:	1f 92       	push	r1
        printf("Sensor id: 0x%x\r\n", sensorID);
 4d8:	8f 93       	push	r24
 4da:	bf 92       	push	r11
 4dc:	af 92       	push	r10
 4de:	5e d0       	rcall	.+188    	; 0x59c <printf>
 4e0:	ae 01       	movw	r20, r28
 4e2:	4b 5f       	subi	r20, 0xFB	; 251

        read_gyro(&gxRaw, &gyRaw, &gzRaw);
 4e4:	5f 4f       	sbci	r21, 0xFF	; 255
 4e6:	be 01       	movw	r22, r28
 4e8:	6d 5f       	subi	r22, 0xFD	; 253
 4ea:	7f 4f       	sbci	r23, 0xFF	; 255
 4ec:	ce 01       	movw	r24, r28
 4ee:	01 96       	adiw	r24, 0x01	; 1
 4f0:	22 de       	rcall	.-956    	; 0x136 <read_gyro>
 4f2:	8a 81       	ldd	r24, Y+2	; 0x02

        printf("gx: %d ", gxRaw);
 4f4:	8f 93       	push	r24
 4f6:	89 81       	ldd	r24, Y+1	; 0x01
 4f8:	8f 93       	push	r24
 4fa:	df 92       	push	r13
 4fc:	cf 92       	push	r12
 4fe:	4e d0       	rcall	.+156    	; 0x59c <printf>
 500:	8c 81       	ldd	r24, Y+4	; 0x04
        printf("gy: %d ", gyRaw);
 502:	8f 93       	push	r24
 504:	8b 81       	ldd	r24, Y+3	; 0x03
 506:	8f 93       	push	r24
 508:	ff 92       	push	r15
 50a:	ef 92       	push	r14
 50c:	47 d0       	rcall	.+142    	; 0x59c <printf>
        printf("gx: %d\r\n", gzRaw);
 50e:	8e 81       	ldd	r24, Y+6	; 0x06
 510:	8f 93       	push	r24
 512:	8d 81       	ldd	r24, Y+5	; 0x05
 514:	8f 93       	push	r24
 516:	1f 93       	push	r17
 518:	0f 93       	push	r16
 51a:	40 d0       	rcall	.+128    	; 0x59c <printf>

        printf("\r\n");
 51c:	87 e3       	ldi	r24, 0x37	; 55
 51e:	91 e0       	ldi	r25, 0x01	; 1
 520:	50 d0       	rcall	.+160    	; 0x5c2 <puts>
 522:	66 e5       	ldi	r22, 0x56	; 86
        delay_ms(8000);
 524:	78 e5       	ldi	r23, 0x58	; 88
 526:	84 e1       	ldi	r24, 0x14	; 20
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	9a df       	rcall	.-204    	; 0x460 <__portable_avr_delay_cycles>
 52c:	0f b6       	in	r0, 0x3f	; 63
 52e:	f8 94       	cli
 530:	de bf       	out	0x3e, r29	; 62
 532:	0f be       	out	0x3f, r0	; 63
 534:	cd bf       	out	0x3d, r28	; 61
 536:	cd cf       	rjmp	.-102    	; 0x4d2 <main+0x5c>

00000538 <fwrite>:
 538:	a0 e0       	ldi	r26, 0x00	; 0
 53a:	b0 e0       	ldi	r27, 0x00	; 0
 53c:	e1 ea       	ldi	r30, 0xA1	; 161
 53e:	f2 e0       	ldi	r31, 0x02	; 2
 540:	f8 c2       	rjmp	.+1520   	; 0xb32 <__prologue_saves__+0xc>
 542:	5b 01       	movw	r10, r22
 544:	4a 01       	movw	r8, r20
 546:	79 01       	movw	r14, r18
 548:	d9 01       	movw	r26, r18
 54a:	13 96       	adiw	r26, 0x03	; 3
 54c:	2c 91       	ld	r18, X
 54e:	21 ff       	sbrs	r18, 1
 550:	1d c0       	rjmp	.+58     	; 0x58c <fwrite+0x54>
 552:	c0 e0       	ldi	r28, 0x00	; 0
 554:	d0 e0       	ldi	r29, 0x00	; 0
 556:	c8 15       	cp	r28, r8
 558:	d9 05       	cpc	r29, r9
 55a:	d9 f0       	breq	.+54     	; 0x592 <fwrite+0x5a>
 55c:	8c 01       	movw	r16, r24
 55e:	6c 01       	movw	r12, r24
 560:	ca 0c       	add	r12, r10
 562:	db 1c       	adc	r13, r11
 564:	c8 01       	movw	r24, r16
 566:	0c 15       	cp	r16, r12
 568:	1d 05       	cpc	r17, r13
 56a:	71 f0       	breq	.+28     	; 0x588 <fwrite+0x50>
 56c:	0f 5f       	subi	r16, 0xFF	; 255
 56e:	1f 4f       	sbci	r17, 0xFF	; 255
 570:	d7 01       	movw	r26, r14
 572:	18 96       	adiw	r26, 0x08	; 8
 574:	ed 91       	ld	r30, X+
 576:	fc 91       	ld	r31, X
 578:	19 97       	sbiw	r26, 0x09	; 9
 57a:	b7 01       	movw	r22, r14
 57c:	dc 01       	movw	r26, r24
 57e:	8c 91       	ld	r24, X
 580:	09 95       	icall
 582:	89 2b       	or	r24, r25
 584:	79 f3       	breq	.-34     	; 0x564 <fwrite+0x2c>
 586:	05 c0       	rjmp	.+10     	; 0x592 <fwrite+0x5a>
 588:	21 96       	adiw	r28, 0x01	; 1
 58a:	e5 cf       	rjmp	.-54     	; 0x556 <fwrite+0x1e>
 58c:	80 e0       	ldi	r24, 0x00	; 0
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	01 c0       	rjmp	.+2      	; 0x594 <fwrite+0x5c>
 592:	ce 01       	movw	r24, r28
 594:	cd b7       	in	r28, 0x3d	; 61
 596:	de b7       	in	r29, 0x3e	; 62
 598:	ec e0       	ldi	r30, 0x0C	; 12
 59a:	e7 c2       	rjmp	.+1486   	; 0xb6a <__epilogue_restores__+0xc>

0000059c <printf>:
 59c:	a0 e0       	ldi	r26, 0x00	; 0
 59e:	b0 e0       	ldi	r27, 0x00	; 0
 5a0:	e3 ed       	ldi	r30, 0xD3	; 211
 5a2:	f2 e0       	ldi	r31, 0x02	; 2
 5a4:	d0 c2       	rjmp	.+1440   	; 0xb46 <__prologue_saves__+0x20>
 5a6:	ae 01       	movw	r20, r28
 5a8:	4b 5f       	subi	r20, 0xFB	; 251
 5aa:	5f 4f       	sbci	r21, 0xFF	; 255
 5ac:	fa 01       	movw	r30, r20
 5ae:	61 91       	ld	r22, Z+
 5b0:	71 91       	ld	r23, Z+
 5b2:	af 01       	movw	r20, r30
 5b4:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <__iob+0x2>
 5b8:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <__iob+0x3>
 5bc:	32 d0       	rcall	.+100    	; 0x622 <vfprintf>
 5be:	e2 e0       	ldi	r30, 0x02	; 2
 5c0:	de c2       	rjmp	.+1468   	; 0xb7e <__epilogue_restores__+0x20>

000005c2 <puts>:
 5c2:	0f 93       	push	r16
 5c4:	1f 93       	push	r17
 5c6:	cf 93       	push	r28
 5c8:	df 93       	push	r29
 5ca:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <__iob+0x2>
 5ce:	f0 91 cf 01 	lds	r31, 0x01CF	; 0x8001cf <__iob+0x3>
 5d2:	23 81       	ldd	r18, Z+3	; 0x03
 5d4:	21 ff       	sbrs	r18, 1
 5d6:	1b c0       	rjmp	.+54     	; 0x60e <puts+0x4c>
 5d8:	8c 01       	movw	r16, r24
 5da:	d0 e0       	ldi	r29, 0x00	; 0
 5dc:	c0 e0       	ldi	r28, 0x00	; 0
 5de:	f8 01       	movw	r30, r16
 5e0:	81 91       	ld	r24, Z+
 5e2:	8f 01       	movw	r16, r30
 5e4:	60 91 ce 01 	lds	r22, 0x01CE	; 0x8001ce <__iob+0x2>
 5e8:	70 91 cf 01 	lds	r23, 0x01CF	; 0x8001cf <__iob+0x3>
 5ec:	db 01       	movw	r26, r22
 5ee:	18 96       	adiw	r26, 0x08	; 8
 5f0:	ed 91       	ld	r30, X+
 5f2:	fc 91       	ld	r31, X
 5f4:	19 97       	sbiw	r26, 0x09	; 9
 5f6:	88 23       	and	r24, r24
 5f8:	31 f0       	breq	.+12     	; 0x606 <puts+0x44>
 5fa:	09 95       	icall
 5fc:	89 2b       	or	r24, r25
 5fe:	79 f3       	breq	.-34     	; 0x5de <puts+0x1c>
 600:	df ef       	ldi	r29, 0xFF	; 255
 602:	cf ef       	ldi	r28, 0xFF	; 255
 604:	ec cf       	rjmp	.-40     	; 0x5de <puts+0x1c>
 606:	8a e0       	ldi	r24, 0x0A	; 10
 608:	09 95       	icall
 60a:	89 2b       	or	r24, r25
 60c:	19 f0       	breq	.+6      	; 0x614 <puts+0x52>
 60e:	8f ef       	ldi	r24, 0xFF	; 255
 610:	9f ef       	ldi	r25, 0xFF	; 255
 612:	02 c0       	rjmp	.+4      	; 0x618 <puts+0x56>
 614:	8d 2f       	mov	r24, r29
 616:	9c 2f       	mov	r25, r28
 618:	df 91       	pop	r29
 61a:	cf 91       	pop	r28
 61c:	1f 91       	pop	r17
 61e:	0f 91       	pop	r16
 620:	08 95       	ret

00000622 <vfprintf>:
 622:	ab e0       	ldi	r26, 0x0B	; 11
 624:	b0 e0       	ldi	r27, 0x00	; 0
 626:	e6 e1       	ldi	r30, 0x16	; 22
 628:	f3 e0       	ldi	r31, 0x03	; 3
 62a:	7d c2       	rjmp	.+1274   	; 0xb26 <__prologue_saves__>
 62c:	6c 01       	movw	r12, r24
 62e:	7b 01       	movw	r14, r22
 630:	8a 01       	movw	r16, r20
 632:	fc 01       	movw	r30, r24
 634:	17 82       	std	Z+7, r1	; 0x07
 636:	16 82       	std	Z+6, r1	; 0x06
 638:	83 81       	ldd	r24, Z+3	; 0x03
 63a:	81 ff       	sbrs	r24, 1
 63c:	bf c1       	rjmp	.+894    	; 0x9bc <__stack+0xbd>
 63e:	ce 01       	movw	r24, r28
 640:	01 96       	adiw	r24, 0x01	; 1
 642:	3c 01       	movw	r6, r24
 644:	f6 01       	movw	r30, r12
 646:	93 81       	ldd	r25, Z+3	; 0x03
 648:	f7 01       	movw	r30, r14
 64a:	93 fd       	sbrc	r25, 3
 64c:	85 91       	lpm	r24, Z+
 64e:	93 ff       	sbrs	r25, 3
 650:	81 91       	ld	r24, Z+
 652:	7f 01       	movw	r14, r30
 654:	88 23       	and	r24, r24
 656:	09 f4       	brne	.+2      	; 0x65a <vfprintf+0x38>
 658:	ad c1       	rjmp	.+858    	; 0x9b4 <__stack+0xb5>
 65a:	85 32       	cpi	r24, 0x25	; 37
 65c:	39 f4       	brne	.+14     	; 0x66c <vfprintf+0x4a>
 65e:	93 fd       	sbrc	r25, 3
 660:	85 91       	lpm	r24, Z+
 662:	93 ff       	sbrs	r25, 3
 664:	81 91       	ld	r24, Z+
 666:	7f 01       	movw	r14, r30
 668:	85 32       	cpi	r24, 0x25	; 37
 66a:	21 f4       	brne	.+8      	; 0x674 <vfprintf+0x52>
 66c:	b6 01       	movw	r22, r12
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	c0 d1       	rcall	.+896    	; 0x9f2 <fputc>
 672:	e8 cf       	rjmp	.-48     	; 0x644 <vfprintf+0x22>
 674:	91 2c       	mov	r9, r1
 676:	21 2c       	mov	r2, r1
 678:	31 2c       	mov	r3, r1
 67a:	ff e1       	ldi	r31, 0x1F	; 31
 67c:	f3 15       	cp	r31, r3
 67e:	d8 f0       	brcs	.+54     	; 0x6b6 <vfprintf+0x94>
 680:	8b 32       	cpi	r24, 0x2B	; 43
 682:	79 f0       	breq	.+30     	; 0x6a2 <vfprintf+0x80>
 684:	38 f4       	brcc	.+14     	; 0x694 <vfprintf+0x72>
 686:	80 32       	cpi	r24, 0x20	; 32
 688:	79 f0       	breq	.+30     	; 0x6a8 <vfprintf+0x86>
 68a:	83 32       	cpi	r24, 0x23	; 35
 68c:	a1 f4       	brne	.+40     	; 0x6b6 <vfprintf+0x94>
 68e:	23 2d       	mov	r18, r3
 690:	20 61       	ori	r18, 0x10	; 16
 692:	1d c0       	rjmp	.+58     	; 0x6ce <vfprintf+0xac>
 694:	8d 32       	cpi	r24, 0x2D	; 45
 696:	61 f0       	breq	.+24     	; 0x6b0 <vfprintf+0x8e>
 698:	80 33       	cpi	r24, 0x30	; 48
 69a:	69 f4       	brne	.+26     	; 0x6b6 <vfprintf+0x94>
 69c:	23 2d       	mov	r18, r3
 69e:	21 60       	ori	r18, 0x01	; 1
 6a0:	16 c0       	rjmp	.+44     	; 0x6ce <vfprintf+0xac>
 6a2:	83 2d       	mov	r24, r3
 6a4:	82 60       	ori	r24, 0x02	; 2
 6a6:	38 2e       	mov	r3, r24
 6a8:	e3 2d       	mov	r30, r3
 6aa:	e4 60       	ori	r30, 0x04	; 4
 6ac:	3e 2e       	mov	r3, r30
 6ae:	2a c0       	rjmp	.+84     	; 0x704 <vfprintf+0xe2>
 6b0:	f3 2d       	mov	r31, r3
 6b2:	f8 60       	ori	r31, 0x08	; 8
 6b4:	1d c0       	rjmp	.+58     	; 0x6f0 <vfprintf+0xce>
 6b6:	37 fc       	sbrc	r3, 7
 6b8:	2d c0       	rjmp	.+90     	; 0x714 <vfprintf+0xf2>
 6ba:	20 ed       	ldi	r18, 0xD0	; 208
 6bc:	28 0f       	add	r18, r24
 6be:	2a 30       	cpi	r18, 0x0A	; 10
 6c0:	40 f0       	brcs	.+16     	; 0x6d2 <vfprintf+0xb0>
 6c2:	8e 32       	cpi	r24, 0x2E	; 46
 6c4:	b9 f4       	brne	.+46     	; 0x6f4 <vfprintf+0xd2>
 6c6:	36 fc       	sbrc	r3, 6
 6c8:	75 c1       	rjmp	.+746    	; 0x9b4 <__stack+0xb5>
 6ca:	23 2d       	mov	r18, r3
 6cc:	20 64       	ori	r18, 0x40	; 64
 6ce:	32 2e       	mov	r3, r18
 6d0:	19 c0       	rjmp	.+50     	; 0x704 <vfprintf+0xe2>
 6d2:	36 fe       	sbrs	r3, 6
 6d4:	06 c0       	rjmp	.+12     	; 0x6e2 <vfprintf+0xc0>
 6d6:	8a e0       	ldi	r24, 0x0A	; 10
 6d8:	98 9e       	mul	r9, r24
 6da:	20 0d       	add	r18, r0
 6dc:	11 24       	eor	r1, r1
 6de:	92 2e       	mov	r9, r18
 6e0:	11 c0       	rjmp	.+34     	; 0x704 <vfprintf+0xe2>
 6e2:	ea e0       	ldi	r30, 0x0A	; 10
 6e4:	2e 9e       	mul	r2, r30
 6e6:	20 0d       	add	r18, r0
 6e8:	11 24       	eor	r1, r1
 6ea:	22 2e       	mov	r2, r18
 6ec:	f3 2d       	mov	r31, r3
 6ee:	f0 62       	ori	r31, 0x20	; 32
 6f0:	3f 2e       	mov	r3, r31
 6f2:	08 c0       	rjmp	.+16     	; 0x704 <vfprintf+0xe2>
 6f4:	8c 36       	cpi	r24, 0x6C	; 108
 6f6:	21 f4       	brne	.+8      	; 0x700 <vfprintf+0xde>
 6f8:	83 2d       	mov	r24, r3
 6fa:	80 68       	ori	r24, 0x80	; 128
 6fc:	38 2e       	mov	r3, r24
 6fe:	02 c0       	rjmp	.+4      	; 0x704 <vfprintf+0xe2>
 700:	88 36       	cpi	r24, 0x68	; 104
 702:	41 f4       	brne	.+16     	; 0x714 <vfprintf+0xf2>
 704:	f7 01       	movw	r30, r14
 706:	93 fd       	sbrc	r25, 3
 708:	85 91       	lpm	r24, Z+
 70a:	93 ff       	sbrs	r25, 3
 70c:	81 91       	ld	r24, Z+
 70e:	7f 01       	movw	r14, r30
 710:	81 11       	cpse	r24, r1
 712:	b3 cf       	rjmp	.-154    	; 0x67a <vfprintf+0x58>
 714:	98 2f       	mov	r25, r24
 716:	9f 7d       	andi	r25, 0xDF	; 223
 718:	95 54       	subi	r25, 0x45	; 69
 71a:	93 30       	cpi	r25, 0x03	; 3
 71c:	28 f4       	brcc	.+10     	; 0x728 <vfprintf+0x106>
 71e:	0c 5f       	subi	r16, 0xFC	; 252
 720:	1f 4f       	sbci	r17, 0xFF	; 255
 722:	9f e3       	ldi	r25, 0x3F	; 63
 724:	99 83       	std	Y+1, r25	; 0x01
 726:	0d c0       	rjmp	.+26     	; 0x742 <vfprintf+0x120>
 728:	83 36       	cpi	r24, 0x63	; 99
 72a:	31 f0       	breq	.+12     	; 0x738 <vfprintf+0x116>
 72c:	83 37       	cpi	r24, 0x73	; 115
 72e:	71 f0       	breq	.+28     	; 0x74c <vfprintf+0x12a>
 730:	83 35       	cpi	r24, 0x53	; 83
 732:	09 f0       	breq	.+2      	; 0x736 <vfprintf+0x114>
 734:	55 c0       	rjmp	.+170    	; 0x7e0 <vfprintf+0x1be>
 736:	20 c0       	rjmp	.+64     	; 0x778 <vfprintf+0x156>
 738:	f8 01       	movw	r30, r16
 73a:	80 81       	ld	r24, Z
 73c:	89 83       	std	Y+1, r24	; 0x01
 73e:	0e 5f       	subi	r16, 0xFE	; 254
 740:	1f 4f       	sbci	r17, 0xFF	; 255
 742:	88 24       	eor	r8, r8
 744:	83 94       	inc	r8
 746:	91 2c       	mov	r9, r1
 748:	53 01       	movw	r10, r6
 74a:	12 c0       	rjmp	.+36     	; 0x770 <vfprintf+0x14e>
 74c:	28 01       	movw	r4, r16
 74e:	f2 e0       	ldi	r31, 0x02	; 2
 750:	4f 0e       	add	r4, r31
 752:	51 1c       	adc	r5, r1
 754:	f8 01       	movw	r30, r16
 756:	a0 80       	ld	r10, Z
 758:	b1 80       	ldd	r11, Z+1	; 0x01
 75a:	36 fe       	sbrs	r3, 6
 75c:	03 c0       	rjmp	.+6      	; 0x764 <vfprintf+0x142>
 75e:	69 2d       	mov	r22, r9
 760:	70 e0       	ldi	r23, 0x00	; 0
 762:	02 c0       	rjmp	.+4      	; 0x768 <vfprintf+0x146>
 764:	6f ef       	ldi	r22, 0xFF	; 255
 766:	7f ef       	ldi	r23, 0xFF	; 255
 768:	c5 01       	movw	r24, r10
 76a:	38 d1       	rcall	.+624    	; 0x9dc <strnlen>
 76c:	4c 01       	movw	r8, r24
 76e:	82 01       	movw	r16, r4
 770:	f3 2d       	mov	r31, r3
 772:	ff 77       	andi	r31, 0x7F	; 127
 774:	3f 2e       	mov	r3, r31
 776:	15 c0       	rjmp	.+42     	; 0x7a2 <vfprintf+0x180>
 778:	28 01       	movw	r4, r16
 77a:	22 e0       	ldi	r18, 0x02	; 2
 77c:	42 0e       	add	r4, r18
 77e:	51 1c       	adc	r5, r1
 780:	f8 01       	movw	r30, r16
 782:	a0 80       	ld	r10, Z
 784:	b1 80       	ldd	r11, Z+1	; 0x01
 786:	36 fe       	sbrs	r3, 6
 788:	03 c0       	rjmp	.+6      	; 0x790 <vfprintf+0x16e>
 78a:	69 2d       	mov	r22, r9
 78c:	70 e0       	ldi	r23, 0x00	; 0
 78e:	02 c0       	rjmp	.+4      	; 0x794 <vfprintf+0x172>
 790:	6f ef       	ldi	r22, 0xFF	; 255
 792:	7f ef       	ldi	r23, 0xFF	; 255
 794:	c5 01       	movw	r24, r10
 796:	17 d1       	rcall	.+558    	; 0x9c6 <strnlen_P>
 798:	4c 01       	movw	r8, r24
 79a:	f3 2d       	mov	r31, r3
 79c:	f0 68       	ori	r31, 0x80	; 128
 79e:	3f 2e       	mov	r3, r31
 7a0:	82 01       	movw	r16, r4
 7a2:	33 fc       	sbrc	r3, 3
 7a4:	19 c0       	rjmp	.+50     	; 0x7d8 <vfprintf+0x1b6>
 7a6:	82 2d       	mov	r24, r2
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	88 16       	cp	r8, r24
 7ac:	99 06       	cpc	r9, r25
 7ae:	a0 f4       	brcc	.+40     	; 0x7d8 <vfprintf+0x1b6>
 7b0:	b6 01       	movw	r22, r12
 7b2:	80 e2       	ldi	r24, 0x20	; 32
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	1d d1       	rcall	.+570    	; 0x9f2 <fputc>
 7b8:	2a 94       	dec	r2
 7ba:	f5 cf       	rjmp	.-22     	; 0x7a6 <vfprintf+0x184>
 7bc:	f5 01       	movw	r30, r10
 7be:	37 fc       	sbrc	r3, 7
 7c0:	85 91       	lpm	r24, Z+
 7c2:	37 fe       	sbrs	r3, 7
 7c4:	81 91       	ld	r24, Z+
 7c6:	5f 01       	movw	r10, r30
 7c8:	b6 01       	movw	r22, r12
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	12 d1       	rcall	.+548    	; 0x9f2 <fputc>
 7ce:	21 10       	cpse	r2, r1
 7d0:	2a 94       	dec	r2
 7d2:	21 e0       	ldi	r18, 0x01	; 1
 7d4:	82 1a       	sub	r8, r18
 7d6:	91 08       	sbc	r9, r1
 7d8:	81 14       	cp	r8, r1
 7da:	91 04       	cpc	r9, r1
 7dc:	79 f7       	brne	.-34     	; 0x7bc <vfprintf+0x19a>
 7de:	e1 c0       	rjmp	.+450    	; 0x9a2 <__stack+0xa3>
 7e0:	84 36       	cpi	r24, 0x64	; 100
 7e2:	11 f0       	breq	.+4      	; 0x7e8 <vfprintf+0x1c6>
 7e4:	89 36       	cpi	r24, 0x69	; 105
 7e6:	39 f5       	brne	.+78     	; 0x836 <vfprintf+0x214>
 7e8:	f8 01       	movw	r30, r16
 7ea:	37 fe       	sbrs	r3, 7
 7ec:	07 c0       	rjmp	.+14     	; 0x7fc <vfprintf+0x1da>
 7ee:	60 81       	ld	r22, Z
 7f0:	71 81       	ldd	r23, Z+1	; 0x01
 7f2:	82 81       	ldd	r24, Z+2	; 0x02
 7f4:	93 81       	ldd	r25, Z+3	; 0x03
 7f6:	0c 5f       	subi	r16, 0xFC	; 252
 7f8:	1f 4f       	sbci	r17, 0xFF	; 255
 7fa:	08 c0       	rjmp	.+16     	; 0x80c <vfprintf+0x1ea>
 7fc:	60 81       	ld	r22, Z
 7fe:	71 81       	ldd	r23, Z+1	; 0x01
 800:	07 2e       	mov	r0, r23
 802:	00 0c       	add	r0, r0
 804:	88 0b       	sbc	r24, r24
 806:	99 0b       	sbc	r25, r25
 808:	0e 5f       	subi	r16, 0xFE	; 254
 80a:	1f 4f       	sbci	r17, 0xFF	; 255
 80c:	f3 2d       	mov	r31, r3
 80e:	ff 76       	andi	r31, 0x6F	; 111
 810:	3f 2e       	mov	r3, r31
 812:	97 ff       	sbrs	r25, 7
 814:	09 c0       	rjmp	.+18     	; 0x828 <vfprintf+0x206>
 816:	90 95       	com	r25
 818:	80 95       	com	r24
 81a:	70 95       	com	r23
 81c:	61 95       	neg	r22
 81e:	7f 4f       	sbci	r23, 0xFF	; 255
 820:	8f 4f       	sbci	r24, 0xFF	; 255
 822:	9f 4f       	sbci	r25, 0xFF	; 255
 824:	f0 68       	ori	r31, 0x80	; 128
 826:	3f 2e       	mov	r3, r31
 828:	2a e0       	ldi	r18, 0x0A	; 10
 82a:	30 e0       	ldi	r19, 0x00	; 0
 82c:	a3 01       	movw	r20, r6
 82e:	1d d1       	rcall	.+570    	; 0xa6a <__ultoa_invert>
 830:	88 2e       	mov	r8, r24
 832:	86 18       	sub	r8, r6
 834:	44 c0       	rjmp	.+136    	; 0x8be <vfprintf+0x29c>
 836:	85 37       	cpi	r24, 0x75	; 117
 838:	31 f4       	brne	.+12     	; 0x846 <vfprintf+0x224>
 83a:	23 2d       	mov	r18, r3
 83c:	2f 7e       	andi	r18, 0xEF	; 239
 83e:	b2 2e       	mov	r11, r18
 840:	2a e0       	ldi	r18, 0x0A	; 10
 842:	30 e0       	ldi	r19, 0x00	; 0
 844:	25 c0       	rjmp	.+74     	; 0x890 <vfprintf+0x26e>
 846:	93 2d       	mov	r25, r3
 848:	99 7f       	andi	r25, 0xF9	; 249
 84a:	b9 2e       	mov	r11, r25
 84c:	8f 36       	cpi	r24, 0x6F	; 111
 84e:	c1 f0       	breq	.+48     	; 0x880 <vfprintf+0x25e>
 850:	18 f4       	brcc	.+6      	; 0x858 <vfprintf+0x236>
 852:	88 35       	cpi	r24, 0x58	; 88
 854:	79 f0       	breq	.+30     	; 0x874 <vfprintf+0x252>
 856:	ae c0       	rjmp	.+348    	; 0x9b4 <__stack+0xb5>
 858:	80 37       	cpi	r24, 0x70	; 112
 85a:	19 f0       	breq	.+6      	; 0x862 <vfprintf+0x240>
 85c:	88 37       	cpi	r24, 0x78	; 120
 85e:	21 f0       	breq	.+8      	; 0x868 <vfprintf+0x246>
 860:	a9 c0       	rjmp	.+338    	; 0x9b4 <__stack+0xb5>
 862:	e9 2f       	mov	r30, r25
 864:	e0 61       	ori	r30, 0x10	; 16
 866:	be 2e       	mov	r11, r30
 868:	b4 fe       	sbrs	r11, 4
 86a:	0d c0       	rjmp	.+26     	; 0x886 <vfprintf+0x264>
 86c:	fb 2d       	mov	r31, r11
 86e:	f4 60       	ori	r31, 0x04	; 4
 870:	bf 2e       	mov	r11, r31
 872:	09 c0       	rjmp	.+18     	; 0x886 <vfprintf+0x264>
 874:	34 fe       	sbrs	r3, 4
 876:	0a c0       	rjmp	.+20     	; 0x88c <vfprintf+0x26a>
 878:	29 2f       	mov	r18, r25
 87a:	26 60       	ori	r18, 0x06	; 6
 87c:	b2 2e       	mov	r11, r18
 87e:	06 c0       	rjmp	.+12     	; 0x88c <vfprintf+0x26a>
 880:	28 e0       	ldi	r18, 0x08	; 8
 882:	30 e0       	ldi	r19, 0x00	; 0
 884:	05 c0       	rjmp	.+10     	; 0x890 <vfprintf+0x26e>
 886:	20 e1       	ldi	r18, 0x10	; 16
 888:	30 e0       	ldi	r19, 0x00	; 0
 88a:	02 c0       	rjmp	.+4      	; 0x890 <vfprintf+0x26e>
 88c:	20 e1       	ldi	r18, 0x10	; 16
 88e:	32 e0       	ldi	r19, 0x02	; 2
 890:	f8 01       	movw	r30, r16
 892:	b7 fe       	sbrs	r11, 7
 894:	07 c0       	rjmp	.+14     	; 0x8a4 <vfprintf+0x282>
 896:	60 81       	ld	r22, Z
 898:	71 81       	ldd	r23, Z+1	; 0x01
 89a:	82 81       	ldd	r24, Z+2	; 0x02
 89c:	93 81       	ldd	r25, Z+3	; 0x03
 89e:	0c 5f       	subi	r16, 0xFC	; 252
 8a0:	1f 4f       	sbci	r17, 0xFF	; 255
 8a2:	06 c0       	rjmp	.+12     	; 0x8b0 <vfprintf+0x28e>
 8a4:	60 81       	ld	r22, Z
 8a6:	71 81       	ldd	r23, Z+1	; 0x01
 8a8:	80 e0       	ldi	r24, 0x00	; 0
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	0e 5f       	subi	r16, 0xFE	; 254
 8ae:	1f 4f       	sbci	r17, 0xFF	; 255
 8b0:	a3 01       	movw	r20, r6
 8b2:	db d0       	rcall	.+438    	; 0xa6a <__ultoa_invert>
 8b4:	88 2e       	mov	r8, r24
 8b6:	86 18       	sub	r8, r6
 8b8:	fb 2d       	mov	r31, r11
 8ba:	ff 77       	andi	r31, 0x7F	; 127
 8bc:	3f 2e       	mov	r3, r31
 8be:	36 fe       	sbrs	r3, 6
 8c0:	0d c0       	rjmp	.+26     	; 0x8dc <vfprintf+0x2ba>
 8c2:	23 2d       	mov	r18, r3
 8c4:	2e 7f       	andi	r18, 0xFE	; 254
 8c6:	a2 2e       	mov	r10, r18
 8c8:	89 14       	cp	r8, r9
 8ca:	58 f4       	brcc	.+22     	; 0x8e2 <vfprintf+0x2c0>
 8cc:	34 fe       	sbrs	r3, 4
 8ce:	0b c0       	rjmp	.+22     	; 0x8e6 <vfprintf+0x2c4>
 8d0:	32 fc       	sbrc	r3, 2
 8d2:	09 c0       	rjmp	.+18     	; 0x8e6 <vfprintf+0x2c4>
 8d4:	83 2d       	mov	r24, r3
 8d6:	8e 7e       	andi	r24, 0xEE	; 238
 8d8:	a8 2e       	mov	r10, r24
 8da:	05 c0       	rjmp	.+10     	; 0x8e6 <vfprintf+0x2c4>
 8dc:	b8 2c       	mov	r11, r8
 8de:	a3 2c       	mov	r10, r3
 8e0:	03 c0       	rjmp	.+6      	; 0x8e8 <vfprintf+0x2c6>
 8e2:	b8 2c       	mov	r11, r8
 8e4:	01 c0       	rjmp	.+2      	; 0x8e8 <vfprintf+0x2c6>
 8e6:	b9 2c       	mov	r11, r9
 8e8:	a4 fe       	sbrs	r10, 4
 8ea:	0f c0       	rjmp	.+30     	; 0x90a <__stack+0xb>
 8ec:	fe 01       	movw	r30, r28
 8ee:	e8 0d       	add	r30, r8
 8f0:	f1 1d       	adc	r31, r1
 8f2:	80 81       	ld	r24, Z
 8f4:	80 33       	cpi	r24, 0x30	; 48
 8f6:	21 f4       	brne	.+8      	; 0x900 <__stack+0x1>
 8f8:	9a 2d       	mov	r25, r10
 8fa:	99 7e       	andi	r25, 0xE9	; 233
 8fc:	a9 2e       	mov	r10, r25
 8fe:	09 c0       	rjmp	.+18     	; 0x912 <__stack+0x13>
 900:	a2 fe       	sbrs	r10, 2
 902:	06 c0       	rjmp	.+12     	; 0x910 <__stack+0x11>
 904:	b3 94       	inc	r11
 906:	b3 94       	inc	r11
 908:	04 c0       	rjmp	.+8      	; 0x912 <__stack+0x13>
 90a:	8a 2d       	mov	r24, r10
 90c:	86 78       	andi	r24, 0x86	; 134
 90e:	09 f0       	breq	.+2      	; 0x912 <__stack+0x13>
 910:	b3 94       	inc	r11
 912:	a3 fc       	sbrc	r10, 3
 914:	10 c0       	rjmp	.+32     	; 0x936 <__stack+0x37>
 916:	a0 fe       	sbrs	r10, 0
 918:	06 c0       	rjmp	.+12     	; 0x926 <__stack+0x27>
 91a:	b2 14       	cp	r11, r2
 91c:	80 f4       	brcc	.+32     	; 0x93e <__stack+0x3f>
 91e:	28 0c       	add	r2, r8
 920:	92 2c       	mov	r9, r2
 922:	9b 18       	sub	r9, r11
 924:	0d c0       	rjmp	.+26     	; 0x940 <__stack+0x41>
 926:	b2 14       	cp	r11, r2
 928:	58 f4       	brcc	.+22     	; 0x940 <__stack+0x41>
 92a:	b6 01       	movw	r22, r12
 92c:	80 e2       	ldi	r24, 0x20	; 32
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	60 d0       	rcall	.+192    	; 0x9f2 <fputc>
 932:	b3 94       	inc	r11
 934:	f8 cf       	rjmp	.-16     	; 0x926 <__stack+0x27>
 936:	b2 14       	cp	r11, r2
 938:	18 f4       	brcc	.+6      	; 0x940 <__stack+0x41>
 93a:	2b 18       	sub	r2, r11
 93c:	02 c0       	rjmp	.+4      	; 0x942 <__stack+0x43>
 93e:	98 2c       	mov	r9, r8
 940:	21 2c       	mov	r2, r1
 942:	a4 fe       	sbrs	r10, 4
 944:	0f c0       	rjmp	.+30     	; 0x964 <__stack+0x65>
 946:	b6 01       	movw	r22, r12
 948:	80 e3       	ldi	r24, 0x30	; 48
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	52 d0       	rcall	.+164    	; 0x9f2 <fputc>
 94e:	a2 fe       	sbrs	r10, 2
 950:	16 c0       	rjmp	.+44     	; 0x97e <__stack+0x7f>
 952:	a1 fc       	sbrc	r10, 1
 954:	03 c0       	rjmp	.+6      	; 0x95c <__stack+0x5d>
 956:	88 e7       	ldi	r24, 0x78	; 120
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	02 c0       	rjmp	.+4      	; 0x960 <__stack+0x61>
 95c:	88 e5       	ldi	r24, 0x58	; 88
 95e:	90 e0       	ldi	r25, 0x00	; 0
 960:	b6 01       	movw	r22, r12
 962:	0c c0       	rjmp	.+24     	; 0x97c <__stack+0x7d>
 964:	8a 2d       	mov	r24, r10
 966:	86 78       	andi	r24, 0x86	; 134
 968:	51 f0       	breq	.+20     	; 0x97e <__stack+0x7f>
 96a:	a1 fe       	sbrs	r10, 1
 96c:	02 c0       	rjmp	.+4      	; 0x972 <__stack+0x73>
 96e:	8b e2       	ldi	r24, 0x2B	; 43
 970:	01 c0       	rjmp	.+2      	; 0x974 <__stack+0x75>
 972:	80 e2       	ldi	r24, 0x20	; 32
 974:	a7 fc       	sbrc	r10, 7
 976:	8d e2       	ldi	r24, 0x2D	; 45
 978:	b6 01       	movw	r22, r12
 97a:	90 e0       	ldi	r25, 0x00	; 0
 97c:	3a d0       	rcall	.+116    	; 0x9f2 <fputc>
 97e:	89 14       	cp	r8, r9
 980:	30 f4       	brcc	.+12     	; 0x98e <__stack+0x8f>
 982:	b6 01       	movw	r22, r12
 984:	80 e3       	ldi	r24, 0x30	; 48
 986:	90 e0       	ldi	r25, 0x00	; 0
 988:	34 d0       	rcall	.+104    	; 0x9f2 <fputc>
 98a:	9a 94       	dec	r9
 98c:	f8 cf       	rjmp	.-16     	; 0x97e <__stack+0x7f>
 98e:	8a 94       	dec	r8
 990:	f3 01       	movw	r30, r6
 992:	e8 0d       	add	r30, r8
 994:	f1 1d       	adc	r31, r1
 996:	80 81       	ld	r24, Z
 998:	b6 01       	movw	r22, r12
 99a:	90 e0       	ldi	r25, 0x00	; 0
 99c:	2a d0       	rcall	.+84     	; 0x9f2 <fputc>
 99e:	81 10       	cpse	r8, r1
 9a0:	f6 cf       	rjmp	.-20     	; 0x98e <__stack+0x8f>
 9a2:	22 20       	and	r2, r2
 9a4:	09 f4       	brne	.+2      	; 0x9a8 <__stack+0xa9>
 9a6:	4e ce       	rjmp	.-868    	; 0x644 <vfprintf+0x22>
 9a8:	b6 01       	movw	r22, r12
 9aa:	80 e2       	ldi	r24, 0x20	; 32
 9ac:	90 e0       	ldi	r25, 0x00	; 0
 9ae:	21 d0       	rcall	.+66     	; 0x9f2 <fputc>
 9b0:	2a 94       	dec	r2
 9b2:	f7 cf       	rjmp	.-18     	; 0x9a2 <__stack+0xa3>
 9b4:	f6 01       	movw	r30, r12
 9b6:	86 81       	ldd	r24, Z+6	; 0x06
 9b8:	97 81       	ldd	r25, Z+7	; 0x07
 9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <__stack+0xc1>
 9bc:	8f ef       	ldi	r24, 0xFF	; 255
 9be:	9f ef       	ldi	r25, 0xFF	; 255
 9c0:	2b 96       	adiw	r28, 0x0b	; 11
 9c2:	e2 e1       	ldi	r30, 0x12	; 18
 9c4:	cc c0       	rjmp	.+408    	; 0xb5e <__epilogue_restores__>

000009c6 <strnlen_P>:
 9c6:	fc 01       	movw	r30, r24
 9c8:	05 90       	lpm	r0, Z+
 9ca:	61 50       	subi	r22, 0x01	; 1
 9cc:	70 40       	sbci	r23, 0x00	; 0
 9ce:	01 10       	cpse	r0, r1
 9d0:	d8 f7       	brcc	.-10     	; 0x9c8 <strnlen_P+0x2>
 9d2:	80 95       	com	r24
 9d4:	90 95       	com	r25
 9d6:	8e 0f       	add	r24, r30
 9d8:	9f 1f       	adc	r25, r31
 9da:	08 95       	ret

000009dc <strnlen>:
 9dc:	fc 01       	movw	r30, r24
 9de:	61 50       	subi	r22, 0x01	; 1
 9e0:	70 40       	sbci	r23, 0x00	; 0
 9e2:	01 90       	ld	r0, Z+
 9e4:	01 10       	cpse	r0, r1
 9e6:	d8 f7       	brcc	.-10     	; 0x9de <strnlen+0x2>
 9e8:	80 95       	com	r24
 9ea:	90 95       	com	r25
 9ec:	8e 0f       	add	r24, r30
 9ee:	9f 1f       	adc	r25, r31
 9f0:	08 95       	ret

000009f2 <fputc>:
 9f2:	0f 93       	push	r16
 9f4:	1f 93       	push	r17
 9f6:	cf 93       	push	r28
 9f8:	df 93       	push	r29
 9fa:	fb 01       	movw	r30, r22
 9fc:	23 81       	ldd	r18, Z+3	; 0x03
 9fe:	21 fd       	sbrc	r18, 1
 a00:	03 c0       	rjmp	.+6      	; 0xa08 <fputc+0x16>
 a02:	8f ef       	ldi	r24, 0xFF	; 255
 a04:	9f ef       	ldi	r25, 0xFF	; 255
 a06:	2c c0       	rjmp	.+88     	; 0xa60 <fputc+0x6e>
 a08:	22 ff       	sbrs	r18, 2
 a0a:	16 c0       	rjmp	.+44     	; 0xa38 <fputc+0x46>
 a0c:	46 81       	ldd	r20, Z+6	; 0x06
 a0e:	57 81       	ldd	r21, Z+7	; 0x07
 a10:	24 81       	ldd	r18, Z+4	; 0x04
 a12:	35 81       	ldd	r19, Z+5	; 0x05
 a14:	42 17       	cp	r20, r18
 a16:	53 07       	cpc	r21, r19
 a18:	44 f4       	brge	.+16     	; 0xa2a <fputc+0x38>
 a1a:	a0 81       	ld	r26, Z
 a1c:	b1 81       	ldd	r27, Z+1	; 0x01
 a1e:	9d 01       	movw	r18, r26
 a20:	2f 5f       	subi	r18, 0xFF	; 255
 a22:	3f 4f       	sbci	r19, 0xFF	; 255
 a24:	31 83       	std	Z+1, r19	; 0x01
 a26:	20 83       	st	Z, r18
 a28:	8c 93       	st	X, r24
 a2a:	26 81       	ldd	r18, Z+6	; 0x06
 a2c:	37 81       	ldd	r19, Z+7	; 0x07
 a2e:	2f 5f       	subi	r18, 0xFF	; 255
 a30:	3f 4f       	sbci	r19, 0xFF	; 255
 a32:	37 83       	std	Z+7, r19	; 0x07
 a34:	26 83       	std	Z+6, r18	; 0x06
 a36:	14 c0       	rjmp	.+40     	; 0xa60 <fputc+0x6e>
 a38:	8b 01       	movw	r16, r22
 a3a:	ec 01       	movw	r28, r24
 a3c:	fb 01       	movw	r30, r22
 a3e:	00 84       	ldd	r0, Z+8	; 0x08
 a40:	f1 85       	ldd	r31, Z+9	; 0x09
 a42:	e0 2d       	mov	r30, r0
 a44:	09 95       	icall
 a46:	89 2b       	or	r24, r25
 a48:	e1 f6       	brne	.-72     	; 0xa02 <fputc+0x10>
 a4a:	d8 01       	movw	r26, r16
 a4c:	16 96       	adiw	r26, 0x06	; 6
 a4e:	8d 91       	ld	r24, X+
 a50:	9c 91       	ld	r25, X
 a52:	17 97       	sbiw	r26, 0x07	; 7
 a54:	01 96       	adiw	r24, 0x01	; 1
 a56:	17 96       	adiw	r26, 0x07	; 7
 a58:	9c 93       	st	X, r25
 a5a:	8e 93       	st	-X, r24
 a5c:	16 97       	sbiw	r26, 0x06	; 6
 a5e:	ce 01       	movw	r24, r28
 a60:	df 91       	pop	r29
 a62:	cf 91       	pop	r28
 a64:	1f 91       	pop	r17
 a66:	0f 91       	pop	r16
 a68:	08 95       	ret

00000a6a <__ultoa_invert>:
 a6a:	fa 01       	movw	r30, r20
 a6c:	aa 27       	eor	r26, r26
 a6e:	28 30       	cpi	r18, 0x08	; 8
 a70:	51 f1       	breq	.+84     	; 0xac6 <__ultoa_invert+0x5c>
 a72:	20 31       	cpi	r18, 0x10	; 16
 a74:	81 f1       	breq	.+96     	; 0xad6 <__ultoa_invert+0x6c>
 a76:	e8 94       	clt
 a78:	6f 93       	push	r22
 a7a:	6e 7f       	andi	r22, 0xFE	; 254
 a7c:	6e 5f       	subi	r22, 0xFE	; 254
 a7e:	7f 4f       	sbci	r23, 0xFF	; 255
 a80:	8f 4f       	sbci	r24, 0xFF	; 255
 a82:	9f 4f       	sbci	r25, 0xFF	; 255
 a84:	af 4f       	sbci	r26, 0xFF	; 255
 a86:	b1 e0       	ldi	r27, 0x01	; 1
 a88:	3e d0       	rcall	.+124    	; 0xb06 <__ultoa_invert+0x9c>
 a8a:	b4 e0       	ldi	r27, 0x04	; 4
 a8c:	3c d0       	rcall	.+120    	; 0xb06 <__ultoa_invert+0x9c>
 a8e:	67 0f       	add	r22, r23
 a90:	78 1f       	adc	r23, r24
 a92:	89 1f       	adc	r24, r25
 a94:	9a 1f       	adc	r25, r26
 a96:	a1 1d       	adc	r26, r1
 a98:	68 0f       	add	r22, r24
 a9a:	79 1f       	adc	r23, r25
 a9c:	8a 1f       	adc	r24, r26
 a9e:	91 1d       	adc	r25, r1
 aa0:	a1 1d       	adc	r26, r1
 aa2:	6a 0f       	add	r22, r26
 aa4:	71 1d       	adc	r23, r1
 aa6:	81 1d       	adc	r24, r1
 aa8:	91 1d       	adc	r25, r1
 aaa:	a1 1d       	adc	r26, r1
 aac:	20 d0       	rcall	.+64     	; 0xaee <__ultoa_invert+0x84>
 aae:	09 f4       	brne	.+2      	; 0xab2 <__ultoa_invert+0x48>
 ab0:	68 94       	set
 ab2:	3f 91       	pop	r19
 ab4:	2a e0       	ldi	r18, 0x0A	; 10
 ab6:	26 9f       	mul	r18, r22
 ab8:	11 24       	eor	r1, r1
 aba:	30 19       	sub	r19, r0
 abc:	30 5d       	subi	r19, 0xD0	; 208
 abe:	31 93       	st	Z+, r19
 ac0:	de f6       	brtc	.-74     	; 0xa78 <__ultoa_invert+0xe>
 ac2:	cf 01       	movw	r24, r30
 ac4:	08 95       	ret
 ac6:	46 2f       	mov	r20, r22
 ac8:	47 70       	andi	r20, 0x07	; 7
 aca:	40 5d       	subi	r20, 0xD0	; 208
 acc:	41 93       	st	Z+, r20
 ace:	b3 e0       	ldi	r27, 0x03	; 3
 ad0:	0f d0       	rcall	.+30     	; 0xaf0 <__ultoa_invert+0x86>
 ad2:	c9 f7       	brne	.-14     	; 0xac6 <__ultoa_invert+0x5c>
 ad4:	f6 cf       	rjmp	.-20     	; 0xac2 <__ultoa_invert+0x58>
 ad6:	46 2f       	mov	r20, r22
 ad8:	4f 70       	andi	r20, 0x0F	; 15
 ada:	40 5d       	subi	r20, 0xD0	; 208
 adc:	4a 33       	cpi	r20, 0x3A	; 58
 ade:	18 f0       	brcs	.+6      	; 0xae6 <__ultoa_invert+0x7c>
 ae0:	49 5d       	subi	r20, 0xD9	; 217
 ae2:	31 fd       	sbrc	r19, 1
 ae4:	40 52       	subi	r20, 0x20	; 32
 ae6:	41 93       	st	Z+, r20
 ae8:	02 d0       	rcall	.+4      	; 0xaee <__ultoa_invert+0x84>
 aea:	a9 f7       	brne	.-22     	; 0xad6 <__ultoa_invert+0x6c>
 aec:	ea cf       	rjmp	.-44     	; 0xac2 <__ultoa_invert+0x58>
 aee:	b4 e0       	ldi	r27, 0x04	; 4
 af0:	a6 95       	lsr	r26
 af2:	97 95       	ror	r25
 af4:	87 95       	ror	r24
 af6:	77 95       	ror	r23
 af8:	67 95       	ror	r22
 afa:	ba 95       	dec	r27
 afc:	c9 f7       	brne	.-14     	; 0xaf0 <__ultoa_invert+0x86>
 afe:	00 97       	sbiw	r24, 0x00	; 0
 b00:	61 05       	cpc	r22, r1
 b02:	71 05       	cpc	r23, r1
 b04:	08 95       	ret
 b06:	9b 01       	movw	r18, r22
 b08:	ac 01       	movw	r20, r24
 b0a:	0a 2e       	mov	r0, r26
 b0c:	06 94       	lsr	r0
 b0e:	57 95       	ror	r21
 b10:	47 95       	ror	r20
 b12:	37 95       	ror	r19
 b14:	27 95       	ror	r18
 b16:	ba 95       	dec	r27
 b18:	c9 f7       	brne	.-14     	; 0xb0c <__ultoa_invert+0xa2>
 b1a:	62 0f       	add	r22, r18
 b1c:	73 1f       	adc	r23, r19
 b1e:	84 1f       	adc	r24, r20
 b20:	95 1f       	adc	r25, r21
 b22:	a0 1d       	adc	r26, r0
 b24:	08 95       	ret

00000b26 <__prologue_saves__>:
 b26:	2f 92       	push	r2
 b28:	3f 92       	push	r3
 b2a:	4f 92       	push	r4
 b2c:	5f 92       	push	r5
 b2e:	6f 92       	push	r6
 b30:	7f 92       	push	r7
 b32:	8f 92       	push	r8
 b34:	9f 92       	push	r9
 b36:	af 92       	push	r10
 b38:	bf 92       	push	r11
 b3a:	cf 92       	push	r12
 b3c:	df 92       	push	r13
 b3e:	ef 92       	push	r14
 b40:	ff 92       	push	r15
 b42:	0f 93       	push	r16
 b44:	1f 93       	push	r17
 b46:	cf 93       	push	r28
 b48:	df 93       	push	r29
 b4a:	cd b7       	in	r28, 0x3d	; 61
 b4c:	de b7       	in	r29, 0x3e	; 62
 b4e:	ca 1b       	sub	r28, r26
 b50:	db 0b       	sbc	r29, r27
 b52:	0f b6       	in	r0, 0x3f	; 63
 b54:	f8 94       	cli
 b56:	de bf       	out	0x3e, r29	; 62
 b58:	0f be       	out	0x3f, r0	; 63
 b5a:	cd bf       	out	0x3d, r28	; 61
 b5c:	09 94       	ijmp

00000b5e <__epilogue_restores__>:
 b5e:	2a 88       	ldd	r2, Y+18	; 0x12
 b60:	39 88       	ldd	r3, Y+17	; 0x11
 b62:	48 88       	ldd	r4, Y+16	; 0x10
 b64:	5f 84       	ldd	r5, Y+15	; 0x0f
 b66:	6e 84       	ldd	r6, Y+14	; 0x0e
 b68:	7d 84       	ldd	r7, Y+13	; 0x0d
 b6a:	8c 84       	ldd	r8, Y+12	; 0x0c
 b6c:	9b 84       	ldd	r9, Y+11	; 0x0b
 b6e:	aa 84       	ldd	r10, Y+10	; 0x0a
 b70:	b9 84       	ldd	r11, Y+9	; 0x09
 b72:	c8 84       	ldd	r12, Y+8	; 0x08
 b74:	df 80       	ldd	r13, Y+7	; 0x07
 b76:	ee 80       	ldd	r14, Y+6	; 0x06
 b78:	fd 80       	ldd	r15, Y+5	; 0x05
 b7a:	0c 81       	ldd	r16, Y+4	; 0x04
 b7c:	1b 81       	ldd	r17, Y+3	; 0x03
 b7e:	aa 81       	ldd	r26, Y+2	; 0x02
 b80:	b9 81       	ldd	r27, Y+1	; 0x01
 b82:	ce 0f       	add	r28, r30
 b84:	d1 1d       	adc	r29, r1
 b86:	0f b6       	in	r0, 0x3f	; 63
 b88:	f8 94       	cli
 b8a:	de bf       	out	0x3e, r29	; 62
 b8c:	0f be       	out	0x3f, r0	; 63
 b8e:	cd bf       	out	0x3d, r28	; 61
 b90:	ed 01       	movw	r28, r26
 b92:	08 95       	ret

00000b94 <_exit>:
 b94:	f8 94       	cli

00000b96 <__stop_program>:
 b96:	ff cf       	rjmp	.-2      	; 0xb96 <__stop_program>
