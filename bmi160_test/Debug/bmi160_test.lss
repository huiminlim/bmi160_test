
bmi160_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000066  00800100  00000cc2  00000d56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cc2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005a  00800166  00800166  00000dbc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000dbc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000223c  00000000  00000000  00000fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f27  00000000  00000000  000031e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f57  00000000  00000000  0000410b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e8  00000000  00000000  00006064  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001311d  00000000  00000000  0000644c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001708  00000000  00000000  00019569  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  0001ac71  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00001585  00000000  00000000  0001ad71  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ec       	ldi	r30, 0xC2	; 194
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 36       	cpi	r26, 0x66	; 102
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e6       	ldi	r26, 0x66	; 102
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 3c       	cpi	r26, 0xC0	; 192
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	8e d2       	rcall	.+1308   	; 0x5b8 <main>
  9c:	10 c6       	rjmp	.+3104   	; 0xcbe <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <__portable_avr_delay_cycles>:
    }
    else {
        bmi_range = BMI160_GYRO_RANGE_125;
    }

    set_full_scale_gyro_range(bmi_range);
  a0:	04 c0       	rjmp	.+8      	; 0xaa <__portable_avr_delay_cycles+0xa>
  a2:	61 50       	subi	r22, 0x01	; 1
  a4:	71 09       	sbc	r23, r1
  a6:	81 09       	sbc	r24, r1
  a8:	91 09       	sbc	r25, r1
  aa:	61 15       	cp	r22, r1
  ac:	71 05       	cpc	r23, r1
  ae:	81 05       	cpc	r24, r1
  b0:	91 05       	cpc	r25, r1
  b2:	b9 f7       	brne	.-18     	; 0xa2 <__portable_avr_delay_cycles+0x2>
  b4:	08 95       	ret

000000b6 <spixfer>:
  b6:	8e bd       	out	0x2e, r24	; 46
  b8:	00 00       	nop
  ba:	0d b4       	in	r0, 0x2d	; 45
  bc:	07 fe       	sbrs	r0, 7
  be:	fd cf       	rjmp	.-6      	; 0xba <spixfer+0x4>
  c0:	8e b5       	in	r24, 0x2e	; 46
  c2:	08 95       	ret

000000c4 <read8>:
  c4:	2a 98       	cbi	0x05, 2	; 5
  c6:	80 68       	ori	r24, 0x80	; 128
  c8:	f6 df       	rcall	.-20     	; 0xb6 <spixfer>
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	f4 df       	rcall	.-24     	; 0xb6 <spixfer>
  ce:	2a 9a       	sbi	0x05, 2	; 5
  d0:	08 95       	ret

000000d2 <get_rotation>:
  d2:	9f 92       	push	r9
  d4:	af 92       	push	r10
  d6:	bf 92       	push	r11
  d8:	cf 92       	push	r12
  da:	df 92       	push	r13
  dc:	ef 92       	push	r14
  de:	ff 92       	push	r15
  e0:	0f 93       	push	r16
  e2:	1f 93       	push	r17
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	6c 01       	movw	r12, r24
  ea:	7b 01       	movw	r14, r22
  ec:	8a 01       	movw	r16, r20
  ee:	8c e0       	ldi	r24, 0x0C	; 12
  f0:	e9 df       	rcall	.-46     	; 0xc4 <read8>
  f2:	b8 2e       	mov	r11, r24
  f4:	8d e0       	ldi	r24, 0x0D	; 13
  f6:	e6 df       	rcall	.-52     	; 0xc4 <read8>
  f8:	98 2e       	mov	r9, r24
  fa:	8e e0       	ldi	r24, 0x0E	; 14
  fc:	e3 df       	rcall	.-58     	; 0xc4 <read8>
  fe:	d8 2f       	mov	r29, r24
 100:	8f e0       	ldi	r24, 0x0F	; 15
 102:	e0 df       	rcall	.-64     	; 0xc4 <read8>
 104:	a8 2e       	mov	r10, r24
 106:	80 e1       	ldi	r24, 0x10	; 16
 108:	dd df       	rcall	.-70     	; 0xc4 <read8>
 10a:	c8 2f       	mov	r28, r24
 10c:	81 e1       	ldi	r24, 0x11	; 17
 10e:	da df       	rcall	.-76     	; 0xc4 <read8>
 110:	2b 2d       	mov	r18, r11
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	39 29       	or	r19, r9
 116:	f6 01       	movw	r30, r12
 118:	31 83       	std	Z+1, r19	; 0x01
 11a:	20 83       	st	Z, r18
 11c:	2d 2f       	mov	r18, r29
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	3a 29       	or	r19, r10
 122:	f7 01       	movw	r30, r14
 124:	31 83       	std	Z+1, r19	; 0x01
 126:	20 83       	st	Z, r18
 128:	2c 2f       	mov	r18, r28
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	38 2b       	or	r19, r24
 12e:	f8 01       	movw	r30, r16
 130:	31 83       	std	Z+1, r19	; 0x01
 132:	20 83       	st	Z, r18
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	1f 91       	pop	r17
 13a:	0f 91       	pop	r16
 13c:	ff 90       	pop	r15
 13e:	ef 90       	pop	r14
 140:	df 90       	pop	r13
 142:	cf 90       	pop	r12
 144:	bf 90       	pop	r11
 146:	af 90       	pop	r10
 148:	9f 90       	pop	r9
 14a:	08 95       	ret

0000014c <read_gyro>:
 14c:	cf 92       	push	r12
 14e:	df 92       	push	r13
 150:	ef 92       	push	r14
 152:	ff 92       	push	r15
 154:	0f 93       	push	r16
 156:	1f 93       	push	r17
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
 15c:	00 d0       	rcall	.+0      	; 0x15e <read_gyro+0x12>
 15e:	00 d0       	rcall	.+0      	; 0x160 <read_gyro+0x14>
 160:	00 d0       	rcall	.+0      	; 0x162 <read_gyro+0x16>
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
 166:	6c 01       	movw	r12, r24
 168:	7b 01       	movw	r14, r22
 16a:	8a 01       	movw	r16, r20
 16c:	1a 82       	std	Y+2, r1	; 0x02
 16e:	19 82       	std	Y+1, r1	; 0x01
 170:	1c 82       	std	Y+4, r1	; 0x04
 172:	1b 82       	std	Y+3, r1	; 0x03
 174:	1e 82       	std	Y+6, r1	; 0x06
 176:	1d 82       	std	Y+5, r1	; 0x05
 178:	ae 01       	movw	r20, r28
 17a:	4b 5f       	subi	r20, 0xFB	; 251
 17c:	5f 4f       	sbci	r21, 0xFF	; 255
 17e:	be 01       	movw	r22, r28
 180:	6d 5f       	subi	r22, 0xFD	; 253
 182:	7f 4f       	sbci	r23, 0xFF	; 255
 184:	ce 01       	movw	r24, r28
 186:	01 96       	adiw	r24, 0x01	; 1
 188:	a4 df       	rcall	.-184    	; 0xd2 <get_rotation>
 18a:	89 81       	ldd	r24, Y+1	; 0x01
 18c:	9a 81       	ldd	r25, Y+2	; 0x02
 18e:	f6 01       	movw	r30, r12
 190:	91 83       	std	Z+1, r25	; 0x01
 192:	80 83       	st	Z, r24
 194:	8b 81       	ldd	r24, Y+3	; 0x03
 196:	9c 81       	ldd	r25, Y+4	; 0x04
 198:	f7 01       	movw	r30, r14
 19a:	91 83       	std	Z+1, r25	; 0x01
 19c:	80 83       	st	Z, r24
 19e:	8d 81       	ldd	r24, Y+5	; 0x05
 1a0:	9e 81       	ldd	r25, Y+6	; 0x06
 1a2:	f8 01       	movw	r30, r16
 1a4:	91 83       	std	Z+1, r25	; 0x01
 1a6:	80 83       	st	Z, r24
 1a8:	26 96       	adiw	r28, 0x06	; 6
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	f8 94       	cli
 1ae:	de bf       	out	0x3e, r29	; 62
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	cd bf       	out	0x3d, r28	; 61
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	1f 91       	pop	r17
 1ba:	0f 91       	pop	r16
 1bc:	ff 90       	pop	r15
 1be:	ef 90       	pop	r14
 1c0:	df 90       	pop	r13
 1c2:	cf 90       	pop	r12
 1c4:	08 95       	ret

000001c6 <reg_read>:
 1c6:	7e cf       	rjmp	.-260    	; 0xc4 <read8>
 1c8:	08 95       	ret

000001ca <write8>:
 1ca:	cf 93       	push	r28
 1cc:	c6 2f       	mov	r28, r22
 1ce:	2a 98       	cbi	0x05, 2	; 5
 1d0:	72 df       	rcall	.-284    	; 0xb6 <spixfer>
 1d2:	8c 2f       	mov	r24, r28
 1d4:	70 df       	rcall	.-288    	; 0xb6 <spixfer>
 1d6:	2a 9a       	sbi	0x05, 2	; 5
 1d8:	cf 91       	pop	r28
 1da:	08 95       	ret

000001dc <reg_write_bits>:
 1dc:	0f 93       	push	r16
 1de:	1f 93       	push	r17
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	d8 2f       	mov	r29, r24
 1e6:	c6 2f       	mov	r28, r22
 1e8:	14 2f       	mov	r17, r20
 1ea:	02 2f       	mov	r16, r18
 1ec:	ec df       	rcall	.-40     	; 0x1c6 <reg_read>
 1ee:	21 e0       	ldi	r18, 0x01	; 1
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <reg_write_bits+0x1c>
 1f4:	22 0f       	add	r18, r18
 1f6:	33 1f       	adc	r19, r19
 1f8:	0a 95       	dec	r16
 1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <reg_write_bits+0x18>
 1fc:	21 50       	subi	r18, 0x01	; 1
 1fe:	31 09       	sbc	r19, r1
 200:	01 2e       	mov	r0, r17
 202:	02 c0       	rjmp	.+4      	; 0x208 <reg_write_bits+0x2c>
 204:	22 0f       	add	r18, r18
 206:	33 1f       	adc	r19, r19
 208:	0a 94       	dec	r0
 20a:	e2 f7       	brpl	.-8      	; 0x204 <reg_write_bits+0x28>
 20c:	6c 2f       	mov	r22, r28
 20e:	70 e0       	ldi	r23, 0x00	; 0
 210:	02 c0       	rjmp	.+4      	; 0x216 <reg_write_bits+0x3a>
 212:	66 0f       	add	r22, r22
 214:	77 1f       	adc	r23, r23
 216:	1a 95       	dec	r17
 218:	e2 f7       	brpl	.-8      	; 0x212 <reg_write_bits+0x36>
 21a:	92 2f       	mov	r25, r18
 21c:	90 95       	com	r25
 21e:	89 23       	and	r24, r25
 220:	26 23       	and	r18, r22
 222:	62 2f       	mov	r22, r18
 224:	68 2b       	or	r22, r24
 226:	8d 2f       	mov	r24, r29
 228:	d0 df       	rcall	.-96     	; 0x1ca <write8>
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	1f 91       	pop	r17
 230:	0f 91       	pop	r16
 232:	08 95       	ret

00000234 <set_full_scale_gyro_range>:
 234:	23 e0       	ldi	r18, 0x03	; 3
 236:	40 e0       	ldi	r20, 0x00	; 0
 238:	68 2f       	mov	r22, r24
 23a:	83 e4       	ldi	r24, 0x43	; 67
 23c:	cf cf       	rjmp	.-98     	; 0x1dc <reg_write_bits>
 23e:	08 95       	ret

00000240 <set_full_scale_accel_range>:
    @param range New full-scale accelerometer range setting
    @see getFullScaleAccelRange()
    @see BMI160AccelRange
*/
void set_full_scale_accel_range(uint8_t range) {
    reg_write_bits(BMI160_RA_ACCEL_RANGE, range,
 240:	24 e0       	ldi	r18, 0x04	; 4
 242:	40 e0       	ldi	r20, 0x00	; 0
 244:	68 2f       	mov	r22, r24
 246:	81 e4       	ldi	r24, 0x41	; 65
 248:	c9 cf       	rjmp	.-110    	; 0x1dc <reg_write_bits>
 24a:	08 95       	ret

0000024c <bmi160_init>:
void reg_write(uint8_t reg, uint8_t data) {
    //uint8_t buffer[2];
    //buffer[0] = reg;
    //buffer[1] = data;
    //serial_buffer_transfer(buffer, 2, 0);
    write8(reg, data);
 24c:	66 eb       	ldi	r22, 0xB6	; 182
 24e:	8e e7       	ldi	r24, 0x7E	; 126
 250:	bc df       	rcall	.-136    	; 0x1ca <write8>
*/
uint8_t bmi160_init(void) {
    // Initialization of sensor
    /* Issue a soft-reset to bring the device into a clean state */
    reg_write(BMI160_RA_CMD, BMI160_CMD_SOFT_RESET);
    delay_ms(10);
 252:	63 e8       	ldi	r22, 0x83	; 131
 254:	76 e0       	ldi	r23, 0x06	; 6
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	22 df       	rcall	.-444    	; 0xa0 <__portable_avr_delay_cycles>

    /* Issue a dummy-read to force the device into SPI comms mode */
    reg_read(0x7F);
 25c:	8f e7       	ldi	r24, 0x7F	; 127
 25e:	b3 df       	rcall	.-154    	; 0x1c6 <reg_read>
 260:	63 e8       	ldi	r22, 0x83	; 131
    delay_ms(10);
 262:	76 e0       	ldi	r23, 0x06	; 6
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	1b df       	rcall	.-458    	; 0xa0 <__portable_avr_delay_cycles>
void reg_write(uint8_t reg, uint8_t data) {
    //uint8_t buffer[2];
    //buffer[0] = reg;
    //buffer[1] = data;
    //serial_buffer_transfer(buffer, 2, 0);
    write8(reg, data);
 26a:	61 e1       	ldi	r22, 0x11	; 17
 26c:	8e e7       	ldi	r24, 0x7E	; 126
 26e:	ad df       	rcall	.-166    	; 0x1ca <write8>
    reg_read(0x7F);
    delay_ms(10);

    /* Power up the accelerometer */
    reg_write(BMI160_RA_CMD, BMI160_CMD_ACC_MODE_NORMAL);
    delay_ms(10);
 270:	63 e8       	ldi	r22, 0x83	; 131
 272:	76 e0       	ldi	r23, 0x06	; 6
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	13 df       	rcall	.-474    	; 0xa0 <__portable_avr_delay_cycles>


    /* Wait for power-up to complete */
    while (0x1 != reg_read_bits(BMI160_RA_PMU_STATUS,
 27a:	05 c0       	rjmp	.+10     	; 0x286 <bmi160_init+0x3a>
                                BMI160_ACC_PMU_STATUS_BIT,
                                BMI160_ACC_PMU_STATUS_LEN)) {
        delay_ms(10);
 27c:	63 e8       	ldi	r22, 0x83	; 131
 27e:	76 e0       	ldi	r23, 0x06	; 6
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0d df       	rcall	.-486    	; 0xa0 <__portable_avr_delay_cycles>
/*!
     @brief  Read a given register address specific bits at some position
	 Wrapper function to read register from sensor, uses reg_read()/read8() function
*/
uint8_t reg_read_bits(uint8_t reg, uint8_t pos, uint8_t len) {
    uint8_t b = reg_read(reg);
 286:	83 e0       	ldi	r24, 0x03	; 3
 288:	9e df       	rcall	.-196    	; 0x1c6 <reg_read>
 28a:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t mask = (1 << len) - 1;
    b >>= pos;
 28c:	95 95       	asr	r25
 28e:	87 95       	ror	r24
 290:	95 95       	asr	r25
 292:	87 95       	ror	r24
 294:	95 95       	asr	r25
 296:	87 95       	ror	r24
 298:	95 95       	asr	r25
 29a:	87 95       	ror	r24
    reg_write(BMI160_RA_CMD, BMI160_CMD_ACC_MODE_NORMAL);
    delay_ms(10);


    /* Wait for power-up to complete */
    while (0x1 != reg_read_bits(BMI160_RA_PMU_STATUS,
 29c:	83 70       	andi	r24, 0x03	; 3
 29e:	81 30       	cpi	r24, 0x01	; 1
void reg_write(uint8_t reg, uint8_t data) {
    //uint8_t buffer[2];
    //buffer[0] = reg;
    //buffer[1] = data;
    //serial_buffer_transfer(buffer, 2, 0);
    write8(reg, data);
 2a0:	69 f7       	brne	.-38     	; 0x27c <bmi160_init+0x30>
 2a2:	65 e1       	ldi	r22, 0x15	; 21
 2a4:	8e e7       	ldi	r24, 0x7E	; 126
 2a6:	91 df       	rcall	.-222    	; 0x1ca <write8>
    }


    /* Power up the gyroscope */
    reg_write(BMI160_RA_CMD, BMI160_CMD_GYR_MODE_NORMAL);
    delay_ms(1);
 2a8:	67 ea       	ldi	r22, 0xA7	; 167
 2aa:	70 e0       	ldi	r23, 0x00	; 0
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	90 e0       	ldi	r25, 0x00	; 0

    /* Wait for power-up to complete */
    while (0x1 != reg_read_bits(BMI160_RA_PMU_STATUS,
 2b0:	f7 de       	rcall	.-530    	; 0xa0 <__portable_avr_delay_cycles>
                                BMI160_GYR_PMU_STATUS_BIT,
                                BMI160_GYR_PMU_STATUS_LEN)) {
        delay_ms(10);
 2b2:	05 c0       	rjmp	.+10     	; 0x2be <bmi160_init+0x72>
 2b4:	63 e8       	ldi	r22, 0x83	; 131
 2b6:	76 e0       	ldi	r23, 0x06	; 6
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	f1 de       	rcall	.-542    	; 0xa0 <__portable_avr_delay_cycles>
/*!
     @brief  Read a given register address specific bits at some position
	 Wrapper function to read register from sensor, uses reg_read()/read8() function
*/
uint8_t reg_read_bits(uint8_t reg, uint8_t pos, uint8_t len) {
    uint8_t b = reg_read(reg);
 2be:	83 e0       	ldi	r24, 0x03	; 3
 2c0:	82 df       	rcall	.-252    	; 0x1c6 <reg_read>
    uint8_t mask = (1 << len) - 1;
    b >>= pos;
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	95 95       	asr	r25
 2c6:	87 95       	ror	r24
 2c8:	95 95       	asr	r25
    /* Power up the gyroscope */
    reg_write(BMI160_RA_CMD, BMI160_CMD_GYR_MODE_NORMAL);
    delay_ms(1);

    /* Wait for power-up to complete */
    while (0x1 != reg_read_bits(BMI160_RA_PMU_STATUS,
 2ca:	87 95       	ror	r24
 2cc:	83 70       	andi	r24, 0x03	; 3
                                BMI160_GYR_PMU_STATUS_LEN)) {
        delay_ms(10);
    }


    set_full_scale_gyro_range(BMI160_GYRO_RANGE_250);
 2ce:	81 30       	cpi	r24, 0x01	; 1
 2d0:	89 f7       	brne	.-30     	; 0x2b4 <bmi160_init+0x68>
    set_full_scale_accel_range(BMI160_ACCEL_RANGE_2G);
 2d2:	83 e0       	ldi	r24, 0x03	; 3
 2d4:	af df       	rcall	.-162    	; 0x234 <set_full_scale_gyro_range>
    }
    else {
        bmi_range = BMI160_GYRO_RANGE_125;
    }

    set_full_scale_gyro_range(bmi_range);
 2d6:	83 e0       	ldi	r24, 0x03	; 3
 2d8:	b3 df       	rcall	.-154    	; 0x240 <set_full_scale_accel_range>
 2da:	83 e0       	ldi	r24, 0x03	; 3
void reg_write(uint8_t reg, uint8_t data) {
    //uint8_t buffer[2];
    //buffer[0] = reg;
    //buffer[1] = data;
    //serial_buffer_transfer(buffer, 2, 0);
    write8(reg, data);
 2dc:	ab df       	rcall	.-170    	; 0x234 <set_full_scale_gyro_range>
 2de:	6f ef       	ldi	r22, 0xFF	; 255
 2e0:	85 e5       	ldi	r24, 0x55	; 85
 2e2:	73 df       	rcall	.-282    	; 0x1ca <write8>
 2e4:	60 ef       	ldi	r22, 0xF0	; 240
 2e6:	86 e5       	ldi	r24, 0x56	; 86
 2e8:	70 df       	rcall	.-288    	; 0x1ca <write8>
 2ea:	60 e0       	ldi	r22, 0x00	; 0
 2ec:	87 e5       	ldi	r24, 0x57	; 87
 2ee:	6d df       	rcall	.-294    	; 0x1ca <write8>
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	69 cf       	rjmp	.-302    	; 0x1c6 <reg_read>
    /* Only PIN1 interrupts currently supported - map all interrupts to PIN1 */
    reg_write(BMI160_RA_INT_MAP_0, 0xFF);
    reg_write(BMI160_RA_INT_MAP_1, 0xF0);
    reg_write(BMI160_RA_INT_MAP_2, 0x00);

    return reg_read(BMI160_RA_CHIP_ID);
 2f4:	08 95       	ret

000002f6 <spi_init>:
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 2f6:	2a 9a       	sbi	0x05, 2	; 5
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
 2f8:	22 9a       	sbi	0x04, 2	; 4

    // Set SS as output pin
    ioport_set_pin_dir(SPI_HARDWARE_SS, IOPORT_DIR_OUTPUT);

    // Initialize as SPI master
    SPCR |= (1 << MSTR);
 2fa:	8c b5       	in	r24, 0x2c	; 44
 2fc:	80 61       	ori	r24, 0x10	; 16
 2fe:	8c bd       	out	0x2c, r24	; 44
    SPCR |= (1 << SPE);
 300:	8c b5       	in	r24, 0x2c	; 44
 302:	80 64       	ori	r24, 0x40	; 64
 304:	8c bd       	out	0x2c, r24	; 44
 306:	25 9a       	sbi	0x04, 5	; 4
 308:	23 9a       	sbi	0x04, 3	; 4
    ioport_set_pin_dir(SPI_HARDWARE_MOSI, IOPORT_DIR_OUTPUT);

    // MISO pin is override to Input automatically
    //ioport_set_pin_dir(SPI_HARDWARE_MISO, IOPORT_DIR_INPUT);

    num_initialized = 0;
 30a:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <__data_end+0x1>
 30e:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <__data_end>
 312:	08 95       	ret

00000314 <uart_putchar>:
/*
    Send character c down the UART Tx, wait until tx holding register
    is empty.
*/
int
uart_putchar(char c, FILE *stream) {
 314:	cf 93       	push	r28
 316:	c8 2f       	mov	r28, r24

    if (c == '\a') {
 318:	87 30       	cpi	r24, 0x07	; 7
 31a:	61 f4       	brne	.+24     	; 0x334 <uart_putchar+0x20>
        fputs("*ring*\n", stderr);
 31c:	20 91 be 01 	lds	r18, 0x01BE	; 0x8001be <__iob+0x4>
 320:	30 91 bf 01 	lds	r19, 0x01BF	; 0x8001bf <__iob+0x5>
 324:	47 e0       	ldi	r20, 0x07	; 7
 326:	50 e0       	ldi	r21, 0x00	; 0
 328:	61 e0       	ldi	r22, 0x01	; 1
 32a:	70 e0       	ldi	r23, 0x00	; 0
 32c:	8e e0       	ldi	r24, 0x0E	; 14
 32e:	91 e0       	ldi	r25, 0x01	; 1
 330:	98 d1       	rcall	.+816    	; 0x662 <fwrite>
        return 0;
 332:	0b c0       	rjmp	.+22     	; 0x34a <uart_putchar+0x36>
    }

    if (c == '\n') {
 334:	8a 30       	cpi	r24, 0x0A	; 10
 336:	11 f4       	brne	.+4      	; 0x33c <uart_putchar+0x28>
        uart_putchar('\r', stream);
 338:	8d e0       	ldi	r24, 0x0D	; 13
 33a:	ec df       	rcall	.-40     	; 0x314 <uart_putchar>
    }

    loop_until_bit_is_set(UCSR0A, UDRE0);
 33c:	e0 ec       	ldi	r30, 0xC0	; 192
 33e:	f0 e0       	ldi	r31, 0x00	; 0
 340:	80 81       	ld	r24, Z
 342:	85 ff       	sbrs	r24, 5
 344:	fd cf       	rjmp	.-6      	; 0x340 <uart_putchar+0x2c>
    UDR0 = c;
 346:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>

    return 0;
}
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	cf 91       	pop	r28
 350:	08 95       	ret

00000352 <uart_getchar>:

    Successive calls to uart_getchar() will be satisfied from the
    internal buffer until that buffer is emptied again.
*/
int
uart_getchar(FILE *stream) {
 352:	6f 92       	push	r6
 354:	7f 92       	push	r7
 356:	8f 92       	push	r8
 358:	9f 92       	push	r9
 35a:	af 92       	push	r10
 35c:	bf 92       	push	r11
 35e:	cf 92       	push	r12
 360:	df 92       	push	r13
 362:	ef 92       	push	r14
 364:	ff 92       	push	r15
 366:	0f 93       	push	r16
 368:	1f 93       	push	r17
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
    uint8_t c;
    char *cp, *cp2;
    static char b[RX_BUFSIZE];
    static char *rxp;

    if (rxp == 0)
 36e:	20 91 b8 01 	lds	r18, 0x01B8	; 0x8001b8 <rxp.2118>
 372:	30 91 b9 01 	lds	r19, 0x01B9	; 0x8001b9 <rxp.2118+0x1>
 376:	23 2b       	or	r18, r19
 378:	09 f0       	breq	.+2      	; 0x37c <uart_getchar+0x2a>
 37a:	cc c0       	rjmp	.+408    	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
 37c:	8c 01       	movw	r16, r24
 37e:	0f 2e       	mov	r0, r31
 380:	f8 e6       	ldi	r31, 0x68	; 104
 382:	8f 2e       	mov	r8, r31
 384:	f1 e0       	ldi	r31, 0x01	; 1
 386:	9f 2e       	mov	r9, r31
 388:	f0 2d       	mov	r31, r0
        for (cp = b;;) {
            loop_until_bit_is_set(UCSR0A, RXC0);
 38a:	c0 ec       	ldi	r28, 0xC0	; 192
 38c:	d0 e0       	ldi	r29, 0x00	; 0

            if (UCSR0A & _BV(DOR0)) {
                return _FDEV_ERR;
            }

            c = UDR0;
 38e:	0f 2e       	mov	r0, r31
 390:	f6 ec       	ldi	r31, 0xC6	; 198
 392:	cf 2e       	mov	r12, r31
 394:	d1 2c       	mov	r13, r1
 396:	f0 2d       	mov	r31, r0
 398:	54 01       	movw	r10, r8
 39a:	0f 2e       	mov	r0, r31
 39c:	f7 e6       	ldi	r31, 0x67	; 103
 39e:	6f 2e       	mov	r6, r31
 3a0:	f1 e0       	ldi	r31, 0x01	; 1
 3a2:	7f 2e       	mov	r7, r31
 3a4:	f0 2d       	mov	r31, r0
    static char b[RX_BUFSIZE];
    static char *rxp;

    if (rxp == 0)
        for (cp = b;;) {
            loop_until_bit_is_set(UCSR0A, RXC0);
 3a6:	88 81       	ld	r24, Y
 3a8:	88 23       	and	r24, r24
 3aa:	ec f7       	brge	.-6      	; 0x3a6 <uart_getchar+0x54>

            if (UCSR0A & _BV(FE0)) {
 3ac:	88 81       	ld	r24, Y
 3ae:	84 fd       	sbrc	r24, 4
 3b0:	c4 c0       	rjmp	.+392    	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
                return _FDEV_EOF;
            }

            if (UCSR0A & _BV(DOR0)) {
 3b2:	88 81       	ld	r24, Y
 3b4:	83 fd       	sbrc	r24, 3
 3b6:	c4 c0       	rjmp	.+392    	; 0x540 <__LOCK_REGION_LENGTH__+0x140>
                return _FDEV_ERR;
            }

            c = UDR0;
 3b8:	f6 01       	movw	r30, r12
 3ba:	80 81       	ld	r24, Z

            /* behaviour similar to Unix stty ICRNL */
            if (c == '\r') {
 3bc:	8d 30       	cpi	r24, 0x0D	; 13
 3be:	11 f0       	breq	.+4      	; 0x3c4 <uart_getchar+0x72>
                c = '\n';
            }

            if (c == '\n') {
 3c0:	8a 30       	cpi	r24, 0x0A	; 10
 3c2:	61 f4       	brne	.+24     	; 0x3dc <uart_getchar+0x8a>
                *cp = c;
 3c4:	8a e0       	ldi	r24, 0x0A	; 10
 3c6:	f4 01       	movw	r30, r8
 3c8:	80 83       	st	Z, r24
                uart_putchar(c, stream);
 3ca:	b8 01       	movw	r22, r16
 3cc:	a3 df       	rcall	.-186    	; 0x314 <uart_putchar>
                rxp = b;
 3ce:	88 e6       	ldi	r24, 0x68	; 104
 3d0:	91 e0       	ldi	r25, 0x01	; 1
 3d2:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <rxp.2118+0x1>
 3d6:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <rxp.2118>
                break;
 3da:	9c c0       	rjmp	.+312    	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
            }
            else if (c == '\t') {
 3dc:	89 30       	cpi	r24, 0x09	; 9
 3de:	39 f0       	breq	.+14     	; 0x3ee <uart_getchar+0x9c>
                c = ' ';
            }

            if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
 3e0:	90 ee       	ldi	r25, 0xE0	; 224
 3e2:	98 0f       	add	r25, r24
 3e4:	9f 35       	cpi	r25, 0x5F	; 95
 3e6:	20 f0       	brcs	.+8      	; 0x3f0 <uart_getchar+0x9e>
 3e8:	80 3a       	cpi	r24, 0xA0	; 160
 3ea:	a8 f0       	brcs	.+42     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3ec:	01 c0       	rjmp	.+2      	; 0x3f0 <uart_getchar+0x9e>
                uart_putchar(c, stream);
                rxp = b;
                break;
            }
            else if (c == '\t') {
                c = ' ';
 3ee:	80 e2       	ldi	r24, 0x20	; 32
            }

            if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
                    c >= (uint8_t)'\xa0') {
                if (cp == b + RX_BUFSIZE - 1) {
 3f0:	f7 eb       	ldi	r31, 0xB7	; 183
 3f2:	8f 16       	cp	r8, r31
 3f4:	f1 e0       	ldi	r31, 0x01	; 1
 3f6:	9f 06       	cpc	r9, r31
 3f8:	21 f4       	brne	.+8      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
                    uart_putchar('\a', stream);
 3fa:	b8 01       	movw	r22, r16
 3fc:	87 e0       	ldi	r24, 0x07	; 7
 3fe:	8a df       	rcall	.-236    	; 0x314 <uart_putchar>
 400:	d2 cf       	rjmp	.-92     	; 0x3a6 <uart_getchar+0x54>
                }
                else {
                    *cp++ = c;
 402:	74 01       	movw	r14, r8
 404:	9f ef       	ldi	r25, 0xFF	; 255
 406:	e9 1a       	sub	r14, r25
 408:	f9 0a       	sbc	r15, r25
 40a:	f4 01       	movw	r30, r8
                    uart_putchar(c, stream);
 40c:	80 83       	st	Z, r24
 40e:	b8 01       	movw	r22, r16
 410:	81 df       	rcall	.-254    	; 0x314 <uart_putchar>
                    c >= (uint8_t)'\xa0') {
                if (cp == b + RX_BUFSIZE - 1) {
                    uart_putchar('\a', stream);
                }
                else {
                    *cp++ = c;
 412:	47 01       	movw	r8, r14
 414:	c8 cf       	rjmp	.-112    	; 0x3a6 <uart_getchar+0x54>
                }

                continue;
            }

            switch (c) {
 416:	82 31       	cpi	r24, 0x12	; 18
 418:	b9 f1       	breq	.+110    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 41a:	30 f4       	brcc	.+12     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 41c:	83 30       	cpi	r24, 0x03	; 3
 41e:	09 f4       	brne	.+2      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 420:	92 c0       	rjmp	.+292    	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
 422:	88 30       	cpi	r24, 0x08	; 8
 424:	e9 f0       	breq	.+58     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 426:	bf cf       	rjmp	.-130    	; 0x3a6 <uart_getchar+0x54>
 428:	87 31       	cpi	r24, 0x17	; 23
 42a:	29 f0       	breq	.+10     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 42c:	8f 37       	cpi	r24, 0x7F	; 127
 42e:	c1 f0       	breq	.+48     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 430:	85 31       	cpi	r24, 0x15	; 21
 432:	79 f0       	breq	.+30     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 434:	b8 cf       	rjmp	.-144    	; 0x3a6 <uart_getchar+0x54>
                }

                break;

            case 'w' & 0x1f:
                while (cp > b && cp[-1] != ' ') {
 436:	f8 e6       	ldi	r31, 0x68	; 104
 438:	8f 16       	cp	r8, r31
 43a:	f1 e0       	ldi	r31, 0x01	; 1
 43c:	9f 06       	cpc	r9, r31
 43e:	09 f0       	breq	.+2      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 440:	08 f4       	brcc	.+2      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 442:	b1 cf       	rjmp	.-158    	; 0x3a6 <uart_getchar+0x54>
 444:	f4 01       	movw	r30, r8
 446:	31 97       	sbiw	r30, 0x01	; 1
 448:	80 81       	ld	r24, Z
 44a:	80 32       	cpi	r24, 0x20	; 32
 44c:	09 f0       	breq	.+2      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 44e:	4a c0       	rjmp	.+148    	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 450:	aa cf       	rjmp	.-172    	; 0x3a6 <uart_getchar+0x54>
                }

                break;

            case 'u' & 0x1f:
                while (cp > b) {
 452:	88 e6       	ldi	r24, 0x68	; 104
 454:	88 16       	cp	r8, r24
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	98 06       	cpc	r9, r24
 45a:	09 f0       	breq	.+2      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 45c:	70 f5       	brcc	.+92     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 45e:	a3 cf       	rjmp	.-186    	; 0x3a6 <uart_getchar+0x54>
            case 'c' & 0x1f:
                return -1;

            case '\b':
            case '\x7f':
                if (cp > b) {
 460:	98 e6       	ldi	r25, 0x68	; 104
 462:	89 16       	cp	r8, r25
 464:	91 e0       	ldi	r25, 0x01	; 1
 466:	99 06       	cpc	r9, r25
 468:	09 f0       	breq	.+2      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 46a:	08 f4       	brcc	.+2      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
                    uart_putchar('\b', stream);
 46c:	9c cf       	rjmp	.-200    	; 0x3a6 <uart_getchar+0x54>
 46e:	b8 01       	movw	r22, r16
 470:	88 e0       	ldi	r24, 0x08	; 8
                    uart_putchar(' ', stream);
 472:	50 df       	rcall	.-352    	; 0x314 <uart_putchar>
 474:	b8 01       	movw	r22, r16
 476:	80 e2       	ldi	r24, 0x20	; 32
                    uart_putchar('\b', stream);
 478:	4d df       	rcall	.-358    	; 0x314 <uart_putchar>
 47a:	b8 01       	movw	r22, r16
 47c:	88 e0       	ldi	r24, 0x08	; 8
 47e:	4a df       	rcall	.-364    	; 0x314 <uart_putchar>
                    cp--;
 480:	e1 e0       	ldi	r30, 0x01	; 1
 482:	8e 1a       	sub	r8, r30
 484:	91 08       	sbc	r9, r1
                }

                break;

            case 'r' & 0x1f:
                uart_putchar('\r', stream);
 486:	8f cf       	rjmp	.-226    	; 0x3a6 <uart_getchar+0x54>
 488:	b8 01       	movw	r22, r16
 48a:	8d e0       	ldi	r24, 0x0D	; 13
 48c:	43 df       	rcall	.-378    	; 0x314 <uart_putchar>

                for (cp2 = b; cp2 < cp; cp2++) {
 48e:	f8 e6       	ldi	r31, 0x68	; 104
 490:	8f 16       	cp	r8, r31
 492:	f1 e0       	ldi	r31, 0x01	; 1
 494:	9f 06       	cpc	r9, r31
 496:	09 f0       	breq	.+2      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 498:	08 f4       	brcc	.+2      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 49a:	85 cf       	rjmp	.-246    	; 0x3a6 <uart_getchar+0x54>
 49c:	0f 2e       	mov	r0, r31
 49e:	f8 e6       	ldi	r31, 0x68	; 104
 4a0:	ef 2e       	mov	r14, r31
 4a2:	f1 e0       	ldi	r31, 0x01	; 1
 4a4:	ff 2e       	mov	r15, r31
                    uart_putchar(*cp2, stream);
 4a6:	f0 2d       	mov	r31, r0
 4a8:	b8 01       	movw	r22, r16
 4aa:	f7 01       	movw	r30, r14
 4ac:	81 91       	ld	r24, Z+
 4ae:	7f 01       	movw	r14, r30
                break;

            case 'r' & 0x1f:
                uart_putchar('\r', stream);

                for (cp2 = b; cp2 < cp; cp2++) {
 4b0:	31 df       	rcall	.-414    	; 0x314 <uart_putchar>
 4b2:	8e 14       	cp	r8, r14
 4b4:	9f 04       	cpc	r9, r15

                break;

            case 'u' & 0x1f:
                while (cp > b) {
                    uart_putchar('\b', stream);
 4b6:	c1 f7       	brne	.-16     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 4b8:	76 cf       	rjmp	.-276    	; 0x3a6 <uart_getchar+0x54>
 4ba:	b8 01       	movw	r22, r16
                    uart_putchar(' ', stream);
 4bc:	88 e0       	ldi	r24, 0x08	; 8
 4be:	2a df       	rcall	.-428    	; 0x314 <uart_putchar>
 4c0:	b8 01       	movw	r22, r16
 4c2:	80 e2       	ldi	r24, 0x20	; 32
                    uart_putchar('\b', stream);
 4c4:	27 df       	rcall	.-434    	; 0x314 <uart_putchar>
 4c6:	b8 01       	movw	r22, r16
 4c8:	88 e0       	ldi	r24, 0x08	; 8
 4ca:	24 df       	rcall	.-440    	; 0x314 <uart_putchar>
                    cp--;
 4cc:	f1 e0       	ldi	r31, 0x01	; 1
 4ce:	8f 1a       	sub	r8, r31
 4d0:	91 08       	sbc	r9, r1
                }

                break;

            case 'u' & 0x1f:
                while (cp > b) {
 4d2:	88 e6       	ldi	r24, 0x68	; 104
 4d4:	88 16       	cp	r8, r24
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	98 06       	cpc	r9, r24
 4da:	79 f7       	brne	.-34     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 4dc:	f3 01       	movw	r30, r6
 4de:	31 96       	adiw	r30, 0x01	; 1
 4e0:	4f 01       	movw	r8, r30
 4e2:	61 cf       	rjmp	.-318    	; 0x3a6 <uart_getchar+0x54>
 4e4:	74 01       	movw	r14, r8

                break;

            case 'w' & 0x1f:
                while (cp > b && cp[-1] != ' ') {
                    uart_putchar('\b', stream);
 4e6:	f1 e0       	ldi	r31, 0x01	; 1
 4e8:	ef 1a       	sub	r14, r31
 4ea:	f1 08       	sbc	r15, r1
 4ec:	b8 01       	movw	r22, r16
                    uart_putchar(' ', stream);
 4ee:	88 e0       	ldi	r24, 0x08	; 8
 4f0:	11 df       	rcall	.-478    	; 0x314 <uart_putchar>
 4f2:	b8 01       	movw	r22, r16
 4f4:	80 e2       	ldi	r24, 0x20	; 32
                    uart_putchar('\b', stream);
 4f6:	0e df       	rcall	.-484    	; 0x314 <uart_putchar>
 4f8:	b8 01       	movw	r22, r16
 4fa:	88 e0       	ldi	r24, 0x08	; 8
 4fc:	0b df       	rcall	.-490    	; 0x314 <uart_putchar>
                    cp--;
 4fe:	47 01       	movw	r8, r14
                }

                break;

            case 'w' & 0x1f:
                while (cp > b && cp[-1] != ' ') {
 500:	ae 14       	cp	r10, r14
 502:	bf 04       	cpc	r11, r15
 504:	09 f4       	brne	.+2      	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
 506:	4f cf       	rjmp	.-354    	; 0x3a6 <uart_getchar+0x54>
 508:	f7 01       	movw	r30, r14
 50a:	82 91       	ld	r24, -Z
 50c:	7f 01       	movw	r14, r30
 50e:	80 32       	cpi	r24, 0x20	; 32
 510:	69 f7       	brne	.-38     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
 512:	49 cf       	rjmp	.-366    	; 0x3a6 <uart_getchar+0x54>

                break;
            }
        }

    c = *rxp++;
 514:	e0 91 b8 01 	lds	r30, 0x01B8	; 0x8001b8 <rxp.2118>
 518:	f0 91 b9 01 	lds	r31, 0x01B9	; 0x8001b9 <rxp.2118+0x1>
 51c:	cf 01       	movw	r24, r30
 51e:	01 96       	adiw	r24, 0x01	; 1
 520:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <rxp.2118+0x1>
 524:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <rxp.2118>
 528:	80 81       	ld	r24, Z

    if (c == '\n') {
 52a:	8a 30       	cpi	r24, 0x0A	; 10
 52c:	21 f4       	brne	.+8      	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
        rxp = 0;
 52e:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <rxp.2118+0x1>
 532:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <rxp.2118>
    }

    return c;
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	08 c0       	rjmp	.+16     	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
    if (rxp == 0)
        for (cp = b;;) {
            loop_until_bit_is_set(UCSR0A, RXC0);

            if (UCSR0A & _BV(FE0)) {
                return _FDEV_EOF;
 53a:	8e ef       	ldi	r24, 0xFE	; 254
 53c:	9f ef       	ldi	r25, 0xFF	; 255
 53e:	05 c0       	rjmp	.+10     	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
            }

            if (UCSR0A & _BV(DOR0)) {
                return _FDEV_ERR;
 540:	8f ef       	ldi	r24, 0xFF	; 255
 542:	9f ef       	ldi	r25, 0xFF	; 255
 544:	02 c0       	rjmp	.+4      	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
                continue;
            }

            switch (c) {
            case 'c' & 0x1f:
                return -1;
 546:	8f ef       	ldi	r24, 0xFF	; 255
 548:	9f ef       	ldi	r25, 0xFF	; 255
    if (c == '\n') {
        rxp = 0;
    }

    return c;
}
 54a:	df 91       	pop	r29
 54c:	cf 91       	pop	r28
 54e:	1f 91       	pop	r17
 550:	0f 91       	pop	r16
 552:	ff 90       	pop	r15
 554:	ef 90       	pop	r14
 556:	df 90       	pop	r13
 558:	cf 90       	pop	r12
 55a:	bf 90       	pop	r11
 55c:	af 90       	pop	r10
 55e:	9f 90       	pop	r9
 560:	8f 90       	pop	r8
 562:	7f 90       	pop	r7
 564:	6f 90       	pop	r6
 566:	08 95       	ret

00000568 <uart_init>:
void uart_init(void) {
#if F_CPU < 2000000UL && defined(U2X)
    UCSRA = _BV(U2X);             /* improve baud rate error by using 2x clk */
    UBRRL = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
    UBRR0H = (uint8_t) (MYUBRR >> 8);
 568:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    UBRR0L = (uint8_t) MYUBRR;
 56c:	80 e1       	ldi	r24, 0x10	; 16
 56e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
#endif
    UCSR0B = (1 << RXEN0) | (1 << TXEN0); /* tx/rx enable */
 572:	88 e1       	ldi	r24, 0x18	; 24
 574:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    UCSR0C = (3 << UCSZ00);
 578:	86 e0       	ldi	r24, 0x06	; 6
 57a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
    stdout = stdin = &usart0_str;
 57e:	ea eb       	ldi	r30, 0xBA	; 186
 580:	f1 e0       	ldi	r31, 0x01	; 1
 582:	80 e0       	ldi	r24, 0x00	; 0
 584:	91 e0       	ldi	r25, 0x01	; 1
 586:	91 83       	std	Z+1, r25	; 0x01
 588:	80 83       	st	Z, r24
 58a:	93 83       	std	Z+3, r25	; 0x03
 58c:	82 83       	std	Z+2, r24	; 0x02
 58e:	08 95       	ret

00000590 <board_init>:
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
 590:	95 b1       	in	r25, 0x05	; 5
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
 592:	84 b1       	in	r24, 0x04	; 4
 594:	80 62       	ori	r24, 0x20	; 32
 596:	8f 77       	andi	r24, 0x7F	; 127
 598:	84 b9       	out	0x04, r24	; 4
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
 59a:	89 2f       	mov	r24, r25
 59c:	80 6a       	ori	r24, 0xA0	; 160
 59e:	85 b9       	out	0x05, r24	; 5
 5a0:	08 95       	ret

000005a2 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
 5a2:	04 c0       	rjmp	.+8      	; 0x5ac <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
 5a4:	61 50       	subi	r22, 0x01	; 1
 5a6:	71 09       	sbc	r23, r1
 5a8:	81 09       	sbc	r24, r1
 5aa:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
 5ac:	61 15       	cp	r22, r1
 5ae:	71 05       	cpc	r23, r1
 5b0:	81 05       	cpc	r24, r1
 5b2:	91 05       	cpc	r25, r1
 5b4:	b9 f7       	brne	.-18     	; 0x5a4 <__portable_avr_delay_cycles+0x2>
 5b6:	08 95       	ret

000005b8 <main>:
#include <asf.h>
#include <spi.h>
#include <uart.h>
#include <bmi160.h>

int main (void) {
 5b8:	cf 93       	push	r28
 5ba:	df 93       	push	r29
 5bc:	00 d0       	rcall	.+0      	; 0x5be <main+0x6>
 5be:	00 d0       	rcall	.+0      	; 0x5c0 <main+0x8>
 5c0:	00 d0       	rcall	.+0      	; 0x5c2 <main+0xa>
 5c2:	cd b7       	in	r28, 0x3d	; 61
 5c4:	de b7       	in	r29, 0x3e	; 62
    /* Insert system clock initialization code here (sysclk_init()). */
    board_init();
 5c6:	e4 df       	rcall	.-56     	; 0x590 <board_init>

    uart_init();
 5c8:	cf df       	rcall	.-98     	; 0x568 <uart_init>
 5ca:	86 e1       	ldi	r24, 0x16	; 22
    printf("------- Default testing -------\r\n\r\n");
 5cc:	91 e0       	ldi	r25, 0x01	; 1
 5ce:	8e d0       	rcall	.+284    	; 0x6ec <puts>

    spi_init();
 5d0:	92 de       	rcall	.-732    	; 0x2f6 <spi_init>
 5d2:	80 e0       	ldi	r24, 0x00	; 0

    uint8_t sensorID = reg_read(BMI160_RA_CHIP_ID);
 5d4:	f8 dd       	rcall	.-1040   	; 0x1c6 <reg_read>
 5d6:	1f 92       	push	r1
 5d8:	8f 93       	push	r24
    printf("Sensor id: 0x%x\r\n\r\n", sensorID);
 5da:	89 e3       	ldi	r24, 0x39	; 57
 5dc:	91 e0       	ldi	r25, 0x01	; 1
 5de:	9f 93       	push	r25
 5e0:	8f 93       	push	r24
 5e2:	71 d0       	rcall	.+226    	; 0x6c6 <printf>
 5e4:	33 de       	rcall	.-922    	; 0x24c <bmi160_init>

    sensorID = bmi160_init();
 5e6:	0f 90       	pop	r0
 5e8:	0f 90       	pop	r0
 5ea:	0f 90       	pop	r0
 5ec:	0f 90       	pop	r0
 5ee:	0f 2e       	mov	r0, r31
 5f0:	fd e4       	ldi	r31, 0x4D	; 77
        //uint8_t sensorID = reg_read(BMI160_RA_CHIP_ID);
        //printf("Sensor id: 0x%x\r\n", sensorID);

        read_gyro(&gxRaw, &gyRaw, &gzRaw);

        printf("gx: %d ", gxRaw);
 5f2:	cf 2e       	mov	r12, r31
 5f4:	f1 e0       	ldi	r31, 0x01	; 1
 5f6:	df 2e       	mov	r13, r31
 5f8:	f0 2d       	mov	r31, r0
 5fa:	0f 2e       	mov	r0, r31
 5fc:	f5 e5       	ldi	r31, 0x55	; 85
        printf("gy: %d ", gyRaw);
 5fe:	ef 2e       	mov	r14, r31
 600:	f1 e0       	ldi	r31, 0x01	; 1
 602:	ff 2e       	mov	r15, r31
 604:	f0 2d       	mov	r31, r0
 606:	0d e5       	ldi	r16, 0x5D	; 93
 608:	11 e0       	ldi	r17, 0x01	; 1
        printf("gx: %d\r\n", gzRaw);
 60a:	ae 01       	movw	r20, r28
 60c:	4b 5f       	subi	r20, 0xFB	; 251

    while (1) {
        //uint8_t sensorID = reg_read(BMI160_RA_CHIP_ID);
        //printf("Sensor id: 0x%x\r\n", sensorID);

        read_gyro(&gxRaw, &gyRaw, &gzRaw);
 60e:	5f 4f       	sbci	r21, 0xFF	; 255
 610:	be 01       	movw	r22, r28
 612:	6d 5f       	subi	r22, 0xFD	; 253
 614:	7f 4f       	sbci	r23, 0xFF	; 255
 616:	ce 01       	movw	r24, r28
 618:	01 96       	adiw	r24, 0x01	; 1
 61a:	98 dd       	rcall	.-1232   	; 0x14c <read_gyro>
 61c:	8a 81       	ldd	r24, Y+2	; 0x02

        printf("gx: %d ", gxRaw);
 61e:	8f 93       	push	r24
 620:	89 81       	ldd	r24, Y+1	; 0x01
 622:	8f 93       	push	r24
 624:	df 92       	push	r13
 626:	cf 92       	push	r12
 628:	4e d0       	rcall	.+156    	; 0x6c6 <printf>
 62a:	8c 81       	ldd	r24, Y+4	; 0x04
        printf("gy: %d ", gyRaw);
 62c:	8f 93       	push	r24
 62e:	8b 81       	ldd	r24, Y+3	; 0x03
 630:	8f 93       	push	r24
 632:	ff 92       	push	r15
 634:	ef 92       	push	r14
 636:	47 d0       	rcall	.+142    	; 0x6c6 <printf>
 638:	8e 81       	ldd	r24, Y+6	; 0x06
        printf("gx: %d\r\n", gzRaw);
 63a:	8f 93       	push	r24
 63c:	8d 81       	ldd	r24, Y+5	; 0x05
 63e:	8f 93       	push	r24
 640:	1f 93       	push	r17
 642:	0f 93       	push	r16
 644:	40 d0       	rcall	.+128    	; 0x6c6 <printf>
 646:	87 e3       	ldi	r24, 0x37	; 55

        printf("\r\n");
 648:	91 e0       	ldi	r25, 0x01	; 1
 64a:	50 d0       	rcall	.+160    	; 0x6ec <puts>
 64c:	6b e0       	ldi	r22, 0x0B	; 11
 64e:	7b e8       	ldi	r23, 0x8B	; 139
        delay_ms(1000);
 650:	82 e0       	ldi	r24, 0x02	; 2
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	a6 df       	rcall	.-180    	; 0x5a2 <__portable_avr_delay_cycles>
 656:	0f b6       	in	r0, 0x3f	; 63
 658:	f8 94       	cli
 65a:	de bf       	out	0x3e, r29	; 62
 65c:	0f be       	out	0x3f, r0	; 63
 65e:	cd bf       	out	0x3d, r28	; 61
 660:	d4 cf       	rjmp	.-88     	; 0x60a <main+0x52>

00000662 <fwrite>:
 662:	a0 e0       	ldi	r26, 0x00	; 0
 664:	b0 e0       	ldi	r27, 0x00	; 0
 666:	e6 e3       	ldi	r30, 0x36	; 54
 668:	f3 e0       	ldi	r31, 0x03	; 3
 66a:	f8 c2       	rjmp	.+1520   	; 0xc5c <__prologue_saves__+0xc>
 66c:	5b 01       	movw	r10, r22
 66e:	4a 01       	movw	r8, r20
 670:	79 01       	movw	r14, r18
 672:	d9 01       	movw	r26, r18
 674:	13 96       	adiw	r26, 0x03	; 3
 676:	2c 91       	ld	r18, X
 678:	21 ff       	sbrs	r18, 1
 67a:	1d c0       	rjmp	.+58     	; 0x6b6 <fwrite+0x54>
 67c:	c0 e0       	ldi	r28, 0x00	; 0
 67e:	d0 e0       	ldi	r29, 0x00	; 0
 680:	c8 15       	cp	r28, r8
 682:	d9 05       	cpc	r29, r9
 684:	d9 f0       	breq	.+54     	; 0x6bc <fwrite+0x5a>
 686:	8c 01       	movw	r16, r24
 688:	6c 01       	movw	r12, r24
 68a:	ca 0c       	add	r12, r10
 68c:	db 1c       	adc	r13, r11
 68e:	c8 01       	movw	r24, r16
 690:	0c 15       	cp	r16, r12
 692:	1d 05       	cpc	r17, r13
 694:	71 f0       	breq	.+28     	; 0x6b2 <fwrite+0x50>
 696:	0f 5f       	subi	r16, 0xFF	; 255
 698:	1f 4f       	sbci	r17, 0xFF	; 255
 69a:	d7 01       	movw	r26, r14
 69c:	18 96       	adiw	r26, 0x08	; 8
 69e:	ed 91       	ld	r30, X+
 6a0:	fc 91       	ld	r31, X
 6a2:	19 97       	sbiw	r26, 0x09	; 9
 6a4:	b7 01       	movw	r22, r14
 6a6:	dc 01       	movw	r26, r24
 6a8:	8c 91       	ld	r24, X
 6aa:	09 95       	icall
 6ac:	89 2b       	or	r24, r25
 6ae:	79 f3       	breq	.-34     	; 0x68e <fwrite+0x2c>
 6b0:	05 c0       	rjmp	.+10     	; 0x6bc <fwrite+0x5a>
 6b2:	21 96       	adiw	r28, 0x01	; 1
 6b4:	e5 cf       	rjmp	.-54     	; 0x680 <fwrite+0x1e>
 6b6:	80 e0       	ldi	r24, 0x00	; 0
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	01 c0       	rjmp	.+2      	; 0x6be <fwrite+0x5c>
 6bc:	ce 01       	movw	r24, r28
 6be:	cd b7       	in	r28, 0x3d	; 61
 6c0:	de b7       	in	r29, 0x3e	; 62
 6c2:	ec e0       	ldi	r30, 0x0C	; 12
 6c4:	e7 c2       	rjmp	.+1486   	; 0xc94 <__epilogue_restores__+0xc>

000006c6 <printf>:
 6c6:	a0 e0       	ldi	r26, 0x00	; 0
 6c8:	b0 e0       	ldi	r27, 0x00	; 0
 6ca:	e8 e6       	ldi	r30, 0x68	; 104
 6cc:	f3 e0       	ldi	r31, 0x03	; 3
 6ce:	d0 c2       	rjmp	.+1440   	; 0xc70 <__prologue_saves__+0x20>
 6d0:	ae 01       	movw	r20, r28
 6d2:	4b 5f       	subi	r20, 0xFB	; 251
 6d4:	5f 4f       	sbci	r21, 0xFF	; 255
 6d6:	fa 01       	movw	r30, r20
 6d8:	61 91       	ld	r22, Z+
 6da:	71 91       	ld	r23, Z+
 6dc:	af 01       	movw	r20, r30
 6de:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <__iob+0x2>
 6e2:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <__iob+0x3>
 6e6:	32 d0       	rcall	.+100    	; 0x74c <vfprintf>
 6e8:	e2 e0       	ldi	r30, 0x02	; 2
 6ea:	de c2       	rjmp	.+1468   	; 0xca8 <__epilogue_restores__+0x20>

000006ec <puts>:
 6ec:	0f 93       	push	r16
 6ee:	1f 93       	push	r17
 6f0:	cf 93       	push	r28
 6f2:	df 93       	push	r29
 6f4:	e0 91 bc 01 	lds	r30, 0x01BC	; 0x8001bc <__iob+0x2>
 6f8:	f0 91 bd 01 	lds	r31, 0x01BD	; 0x8001bd <__iob+0x3>
 6fc:	23 81       	ldd	r18, Z+3	; 0x03
 6fe:	21 ff       	sbrs	r18, 1
 700:	1b c0       	rjmp	.+54     	; 0x738 <puts+0x4c>
 702:	8c 01       	movw	r16, r24
 704:	d0 e0       	ldi	r29, 0x00	; 0
 706:	c0 e0       	ldi	r28, 0x00	; 0
 708:	f8 01       	movw	r30, r16
 70a:	81 91       	ld	r24, Z+
 70c:	8f 01       	movw	r16, r30
 70e:	60 91 bc 01 	lds	r22, 0x01BC	; 0x8001bc <__iob+0x2>
 712:	70 91 bd 01 	lds	r23, 0x01BD	; 0x8001bd <__iob+0x3>
 716:	db 01       	movw	r26, r22
 718:	18 96       	adiw	r26, 0x08	; 8
 71a:	ed 91       	ld	r30, X+
 71c:	fc 91       	ld	r31, X
 71e:	19 97       	sbiw	r26, 0x09	; 9
 720:	88 23       	and	r24, r24
 722:	31 f0       	breq	.+12     	; 0x730 <puts+0x44>
 724:	09 95       	icall
 726:	89 2b       	or	r24, r25
 728:	79 f3       	breq	.-34     	; 0x708 <puts+0x1c>
 72a:	df ef       	ldi	r29, 0xFF	; 255
 72c:	cf ef       	ldi	r28, 0xFF	; 255
 72e:	ec cf       	rjmp	.-40     	; 0x708 <puts+0x1c>
 730:	8a e0       	ldi	r24, 0x0A	; 10
 732:	09 95       	icall
 734:	89 2b       	or	r24, r25
 736:	19 f0       	breq	.+6      	; 0x73e <puts+0x52>
 738:	8f ef       	ldi	r24, 0xFF	; 255
 73a:	9f ef       	ldi	r25, 0xFF	; 255
 73c:	02 c0       	rjmp	.+4      	; 0x742 <puts+0x56>
 73e:	8d 2f       	mov	r24, r29
 740:	9c 2f       	mov	r25, r28
 742:	df 91       	pop	r29
 744:	cf 91       	pop	r28
 746:	1f 91       	pop	r17
 748:	0f 91       	pop	r16
 74a:	08 95       	ret

0000074c <vfprintf>:
 74c:	ab e0       	ldi	r26, 0x0B	; 11
 74e:	b0 e0       	ldi	r27, 0x00	; 0
 750:	eb ea       	ldi	r30, 0xAB	; 171
 752:	f3 e0       	ldi	r31, 0x03	; 3
 754:	7d c2       	rjmp	.+1274   	; 0xc50 <__prologue_saves__>
 756:	6c 01       	movw	r12, r24
 758:	7b 01       	movw	r14, r22
 75a:	8a 01       	movw	r16, r20
 75c:	fc 01       	movw	r30, r24
 75e:	17 82       	std	Z+7, r1	; 0x07
 760:	16 82       	std	Z+6, r1	; 0x06
 762:	83 81       	ldd	r24, Z+3	; 0x03
 764:	81 ff       	sbrs	r24, 1
 766:	bf c1       	rjmp	.+894    	; 0xae6 <__stack+0x1e7>
 768:	ce 01       	movw	r24, r28
 76a:	01 96       	adiw	r24, 0x01	; 1
 76c:	3c 01       	movw	r6, r24
 76e:	f6 01       	movw	r30, r12
 770:	93 81       	ldd	r25, Z+3	; 0x03
 772:	f7 01       	movw	r30, r14
 774:	93 fd       	sbrc	r25, 3
 776:	85 91       	lpm	r24, Z+
 778:	93 ff       	sbrs	r25, 3
 77a:	81 91       	ld	r24, Z+
 77c:	7f 01       	movw	r14, r30
 77e:	88 23       	and	r24, r24
 780:	09 f4       	brne	.+2      	; 0x784 <vfprintf+0x38>
 782:	ad c1       	rjmp	.+858    	; 0xade <__stack+0x1df>
 784:	85 32       	cpi	r24, 0x25	; 37
 786:	39 f4       	brne	.+14     	; 0x796 <vfprintf+0x4a>
 788:	93 fd       	sbrc	r25, 3
 78a:	85 91       	lpm	r24, Z+
 78c:	93 ff       	sbrs	r25, 3
 78e:	81 91       	ld	r24, Z+
 790:	7f 01       	movw	r14, r30
 792:	85 32       	cpi	r24, 0x25	; 37
 794:	21 f4       	brne	.+8      	; 0x79e <vfprintf+0x52>
 796:	b6 01       	movw	r22, r12
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	c0 d1       	rcall	.+896    	; 0xb1c <fputc>
 79c:	e8 cf       	rjmp	.-48     	; 0x76e <vfprintf+0x22>
 79e:	91 2c       	mov	r9, r1
 7a0:	21 2c       	mov	r2, r1
 7a2:	31 2c       	mov	r3, r1
 7a4:	ff e1       	ldi	r31, 0x1F	; 31
 7a6:	f3 15       	cp	r31, r3
 7a8:	d8 f0       	brcs	.+54     	; 0x7e0 <vfprintf+0x94>
 7aa:	8b 32       	cpi	r24, 0x2B	; 43
 7ac:	79 f0       	breq	.+30     	; 0x7cc <vfprintf+0x80>
 7ae:	38 f4       	brcc	.+14     	; 0x7be <vfprintf+0x72>
 7b0:	80 32       	cpi	r24, 0x20	; 32
 7b2:	79 f0       	breq	.+30     	; 0x7d2 <vfprintf+0x86>
 7b4:	83 32       	cpi	r24, 0x23	; 35
 7b6:	a1 f4       	brne	.+40     	; 0x7e0 <vfprintf+0x94>
 7b8:	23 2d       	mov	r18, r3
 7ba:	20 61       	ori	r18, 0x10	; 16
 7bc:	1d c0       	rjmp	.+58     	; 0x7f8 <vfprintf+0xac>
 7be:	8d 32       	cpi	r24, 0x2D	; 45
 7c0:	61 f0       	breq	.+24     	; 0x7da <vfprintf+0x8e>
 7c2:	80 33       	cpi	r24, 0x30	; 48
 7c4:	69 f4       	brne	.+26     	; 0x7e0 <vfprintf+0x94>
 7c6:	23 2d       	mov	r18, r3
 7c8:	21 60       	ori	r18, 0x01	; 1
 7ca:	16 c0       	rjmp	.+44     	; 0x7f8 <vfprintf+0xac>
 7cc:	83 2d       	mov	r24, r3
 7ce:	82 60       	ori	r24, 0x02	; 2
 7d0:	38 2e       	mov	r3, r24
 7d2:	e3 2d       	mov	r30, r3
 7d4:	e4 60       	ori	r30, 0x04	; 4
 7d6:	3e 2e       	mov	r3, r30
 7d8:	2a c0       	rjmp	.+84     	; 0x82e <vfprintf+0xe2>
 7da:	f3 2d       	mov	r31, r3
 7dc:	f8 60       	ori	r31, 0x08	; 8
 7de:	1d c0       	rjmp	.+58     	; 0x81a <vfprintf+0xce>
 7e0:	37 fc       	sbrc	r3, 7
 7e2:	2d c0       	rjmp	.+90     	; 0x83e <vfprintf+0xf2>
 7e4:	20 ed       	ldi	r18, 0xD0	; 208
 7e6:	28 0f       	add	r18, r24
 7e8:	2a 30       	cpi	r18, 0x0A	; 10
 7ea:	40 f0       	brcs	.+16     	; 0x7fc <vfprintf+0xb0>
 7ec:	8e 32       	cpi	r24, 0x2E	; 46
 7ee:	b9 f4       	brne	.+46     	; 0x81e <vfprintf+0xd2>
 7f0:	36 fc       	sbrc	r3, 6
 7f2:	75 c1       	rjmp	.+746    	; 0xade <__stack+0x1df>
 7f4:	23 2d       	mov	r18, r3
 7f6:	20 64       	ori	r18, 0x40	; 64
 7f8:	32 2e       	mov	r3, r18
 7fa:	19 c0       	rjmp	.+50     	; 0x82e <vfprintf+0xe2>
 7fc:	36 fe       	sbrs	r3, 6
 7fe:	06 c0       	rjmp	.+12     	; 0x80c <vfprintf+0xc0>
 800:	8a e0       	ldi	r24, 0x0A	; 10
 802:	98 9e       	mul	r9, r24
 804:	20 0d       	add	r18, r0
 806:	11 24       	eor	r1, r1
 808:	92 2e       	mov	r9, r18
 80a:	11 c0       	rjmp	.+34     	; 0x82e <vfprintf+0xe2>
 80c:	ea e0       	ldi	r30, 0x0A	; 10
 80e:	2e 9e       	mul	r2, r30
 810:	20 0d       	add	r18, r0
 812:	11 24       	eor	r1, r1
 814:	22 2e       	mov	r2, r18
 816:	f3 2d       	mov	r31, r3
 818:	f0 62       	ori	r31, 0x20	; 32
 81a:	3f 2e       	mov	r3, r31
 81c:	08 c0       	rjmp	.+16     	; 0x82e <vfprintf+0xe2>
 81e:	8c 36       	cpi	r24, 0x6C	; 108
 820:	21 f4       	brne	.+8      	; 0x82a <vfprintf+0xde>
 822:	83 2d       	mov	r24, r3
 824:	80 68       	ori	r24, 0x80	; 128
 826:	38 2e       	mov	r3, r24
 828:	02 c0       	rjmp	.+4      	; 0x82e <vfprintf+0xe2>
 82a:	88 36       	cpi	r24, 0x68	; 104
 82c:	41 f4       	brne	.+16     	; 0x83e <vfprintf+0xf2>
 82e:	f7 01       	movw	r30, r14
 830:	93 fd       	sbrc	r25, 3
 832:	85 91       	lpm	r24, Z+
 834:	93 ff       	sbrs	r25, 3
 836:	81 91       	ld	r24, Z+
 838:	7f 01       	movw	r14, r30
 83a:	81 11       	cpse	r24, r1
 83c:	b3 cf       	rjmp	.-154    	; 0x7a4 <vfprintf+0x58>
 83e:	98 2f       	mov	r25, r24
 840:	9f 7d       	andi	r25, 0xDF	; 223
 842:	95 54       	subi	r25, 0x45	; 69
 844:	93 30       	cpi	r25, 0x03	; 3
 846:	28 f4       	brcc	.+10     	; 0x852 <vfprintf+0x106>
 848:	0c 5f       	subi	r16, 0xFC	; 252
 84a:	1f 4f       	sbci	r17, 0xFF	; 255
 84c:	9f e3       	ldi	r25, 0x3F	; 63
 84e:	99 83       	std	Y+1, r25	; 0x01
 850:	0d c0       	rjmp	.+26     	; 0x86c <vfprintf+0x120>
 852:	83 36       	cpi	r24, 0x63	; 99
 854:	31 f0       	breq	.+12     	; 0x862 <vfprintf+0x116>
 856:	83 37       	cpi	r24, 0x73	; 115
 858:	71 f0       	breq	.+28     	; 0x876 <vfprintf+0x12a>
 85a:	83 35       	cpi	r24, 0x53	; 83
 85c:	09 f0       	breq	.+2      	; 0x860 <vfprintf+0x114>
 85e:	55 c0       	rjmp	.+170    	; 0x90a <__stack+0xb>
 860:	20 c0       	rjmp	.+64     	; 0x8a2 <vfprintf+0x156>
 862:	f8 01       	movw	r30, r16
 864:	80 81       	ld	r24, Z
 866:	89 83       	std	Y+1, r24	; 0x01
 868:	0e 5f       	subi	r16, 0xFE	; 254
 86a:	1f 4f       	sbci	r17, 0xFF	; 255
 86c:	88 24       	eor	r8, r8
 86e:	83 94       	inc	r8
 870:	91 2c       	mov	r9, r1
 872:	53 01       	movw	r10, r6
 874:	12 c0       	rjmp	.+36     	; 0x89a <vfprintf+0x14e>
 876:	28 01       	movw	r4, r16
 878:	f2 e0       	ldi	r31, 0x02	; 2
 87a:	4f 0e       	add	r4, r31
 87c:	51 1c       	adc	r5, r1
 87e:	f8 01       	movw	r30, r16
 880:	a0 80       	ld	r10, Z
 882:	b1 80       	ldd	r11, Z+1	; 0x01
 884:	36 fe       	sbrs	r3, 6
 886:	03 c0       	rjmp	.+6      	; 0x88e <vfprintf+0x142>
 888:	69 2d       	mov	r22, r9
 88a:	70 e0       	ldi	r23, 0x00	; 0
 88c:	02 c0       	rjmp	.+4      	; 0x892 <vfprintf+0x146>
 88e:	6f ef       	ldi	r22, 0xFF	; 255
 890:	7f ef       	ldi	r23, 0xFF	; 255
 892:	c5 01       	movw	r24, r10
 894:	38 d1       	rcall	.+624    	; 0xb06 <strnlen>
 896:	4c 01       	movw	r8, r24
 898:	82 01       	movw	r16, r4
 89a:	f3 2d       	mov	r31, r3
 89c:	ff 77       	andi	r31, 0x7F	; 127
 89e:	3f 2e       	mov	r3, r31
 8a0:	15 c0       	rjmp	.+42     	; 0x8cc <vfprintf+0x180>
 8a2:	28 01       	movw	r4, r16
 8a4:	22 e0       	ldi	r18, 0x02	; 2
 8a6:	42 0e       	add	r4, r18
 8a8:	51 1c       	adc	r5, r1
 8aa:	f8 01       	movw	r30, r16
 8ac:	a0 80       	ld	r10, Z
 8ae:	b1 80       	ldd	r11, Z+1	; 0x01
 8b0:	36 fe       	sbrs	r3, 6
 8b2:	03 c0       	rjmp	.+6      	; 0x8ba <vfprintf+0x16e>
 8b4:	69 2d       	mov	r22, r9
 8b6:	70 e0       	ldi	r23, 0x00	; 0
 8b8:	02 c0       	rjmp	.+4      	; 0x8be <vfprintf+0x172>
 8ba:	6f ef       	ldi	r22, 0xFF	; 255
 8bc:	7f ef       	ldi	r23, 0xFF	; 255
 8be:	c5 01       	movw	r24, r10
 8c0:	17 d1       	rcall	.+558    	; 0xaf0 <strnlen_P>
 8c2:	4c 01       	movw	r8, r24
 8c4:	f3 2d       	mov	r31, r3
 8c6:	f0 68       	ori	r31, 0x80	; 128
 8c8:	3f 2e       	mov	r3, r31
 8ca:	82 01       	movw	r16, r4
 8cc:	33 fc       	sbrc	r3, 3
 8ce:	19 c0       	rjmp	.+50     	; 0x902 <__stack+0x3>
 8d0:	82 2d       	mov	r24, r2
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	88 16       	cp	r8, r24
 8d6:	99 06       	cpc	r9, r25
 8d8:	a0 f4       	brcc	.+40     	; 0x902 <__stack+0x3>
 8da:	b6 01       	movw	r22, r12
 8dc:	80 e2       	ldi	r24, 0x20	; 32
 8de:	90 e0       	ldi	r25, 0x00	; 0
 8e0:	1d d1       	rcall	.+570    	; 0xb1c <fputc>
 8e2:	2a 94       	dec	r2
 8e4:	f5 cf       	rjmp	.-22     	; 0x8d0 <vfprintf+0x184>
 8e6:	f5 01       	movw	r30, r10
 8e8:	37 fc       	sbrc	r3, 7
 8ea:	85 91       	lpm	r24, Z+
 8ec:	37 fe       	sbrs	r3, 7
 8ee:	81 91       	ld	r24, Z+
 8f0:	5f 01       	movw	r10, r30
 8f2:	b6 01       	movw	r22, r12
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	12 d1       	rcall	.+548    	; 0xb1c <fputc>
 8f8:	21 10       	cpse	r2, r1
 8fa:	2a 94       	dec	r2
 8fc:	21 e0       	ldi	r18, 0x01	; 1
 8fe:	82 1a       	sub	r8, r18
 900:	91 08       	sbc	r9, r1
 902:	81 14       	cp	r8, r1
 904:	91 04       	cpc	r9, r1
 906:	79 f7       	brne	.-34     	; 0x8e6 <vfprintf+0x19a>
 908:	e1 c0       	rjmp	.+450    	; 0xacc <__stack+0x1cd>
 90a:	84 36       	cpi	r24, 0x64	; 100
 90c:	11 f0       	breq	.+4      	; 0x912 <__stack+0x13>
 90e:	89 36       	cpi	r24, 0x69	; 105
 910:	39 f5       	brne	.+78     	; 0x960 <__stack+0x61>
 912:	f8 01       	movw	r30, r16
 914:	37 fe       	sbrs	r3, 7
 916:	07 c0       	rjmp	.+14     	; 0x926 <__stack+0x27>
 918:	60 81       	ld	r22, Z
 91a:	71 81       	ldd	r23, Z+1	; 0x01
 91c:	82 81       	ldd	r24, Z+2	; 0x02
 91e:	93 81       	ldd	r25, Z+3	; 0x03
 920:	0c 5f       	subi	r16, 0xFC	; 252
 922:	1f 4f       	sbci	r17, 0xFF	; 255
 924:	08 c0       	rjmp	.+16     	; 0x936 <__stack+0x37>
 926:	60 81       	ld	r22, Z
 928:	71 81       	ldd	r23, Z+1	; 0x01
 92a:	07 2e       	mov	r0, r23
 92c:	00 0c       	add	r0, r0
 92e:	88 0b       	sbc	r24, r24
 930:	99 0b       	sbc	r25, r25
 932:	0e 5f       	subi	r16, 0xFE	; 254
 934:	1f 4f       	sbci	r17, 0xFF	; 255
 936:	f3 2d       	mov	r31, r3
 938:	ff 76       	andi	r31, 0x6F	; 111
 93a:	3f 2e       	mov	r3, r31
 93c:	97 ff       	sbrs	r25, 7
 93e:	09 c0       	rjmp	.+18     	; 0x952 <__stack+0x53>
 940:	90 95       	com	r25
 942:	80 95       	com	r24
 944:	70 95       	com	r23
 946:	61 95       	neg	r22
 948:	7f 4f       	sbci	r23, 0xFF	; 255
 94a:	8f 4f       	sbci	r24, 0xFF	; 255
 94c:	9f 4f       	sbci	r25, 0xFF	; 255
 94e:	f0 68       	ori	r31, 0x80	; 128
 950:	3f 2e       	mov	r3, r31
 952:	2a e0       	ldi	r18, 0x0A	; 10
 954:	30 e0       	ldi	r19, 0x00	; 0
 956:	a3 01       	movw	r20, r6
 958:	1d d1       	rcall	.+570    	; 0xb94 <__ultoa_invert>
 95a:	88 2e       	mov	r8, r24
 95c:	86 18       	sub	r8, r6
 95e:	44 c0       	rjmp	.+136    	; 0x9e8 <__stack+0xe9>
 960:	85 37       	cpi	r24, 0x75	; 117
 962:	31 f4       	brne	.+12     	; 0x970 <__stack+0x71>
 964:	23 2d       	mov	r18, r3
 966:	2f 7e       	andi	r18, 0xEF	; 239
 968:	b2 2e       	mov	r11, r18
 96a:	2a e0       	ldi	r18, 0x0A	; 10
 96c:	30 e0       	ldi	r19, 0x00	; 0
 96e:	25 c0       	rjmp	.+74     	; 0x9ba <__stack+0xbb>
 970:	93 2d       	mov	r25, r3
 972:	99 7f       	andi	r25, 0xF9	; 249
 974:	b9 2e       	mov	r11, r25
 976:	8f 36       	cpi	r24, 0x6F	; 111
 978:	c1 f0       	breq	.+48     	; 0x9aa <__stack+0xab>
 97a:	18 f4       	brcc	.+6      	; 0x982 <__stack+0x83>
 97c:	88 35       	cpi	r24, 0x58	; 88
 97e:	79 f0       	breq	.+30     	; 0x99e <__stack+0x9f>
 980:	ae c0       	rjmp	.+348    	; 0xade <__stack+0x1df>
 982:	80 37       	cpi	r24, 0x70	; 112
 984:	19 f0       	breq	.+6      	; 0x98c <__stack+0x8d>
 986:	88 37       	cpi	r24, 0x78	; 120
 988:	21 f0       	breq	.+8      	; 0x992 <__stack+0x93>
 98a:	a9 c0       	rjmp	.+338    	; 0xade <__stack+0x1df>
 98c:	e9 2f       	mov	r30, r25
 98e:	e0 61       	ori	r30, 0x10	; 16
 990:	be 2e       	mov	r11, r30
 992:	b4 fe       	sbrs	r11, 4
 994:	0d c0       	rjmp	.+26     	; 0x9b0 <__stack+0xb1>
 996:	fb 2d       	mov	r31, r11
 998:	f4 60       	ori	r31, 0x04	; 4
 99a:	bf 2e       	mov	r11, r31
 99c:	09 c0       	rjmp	.+18     	; 0x9b0 <__stack+0xb1>
 99e:	34 fe       	sbrs	r3, 4
 9a0:	0a c0       	rjmp	.+20     	; 0x9b6 <__stack+0xb7>
 9a2:	29 2f       	mov	r18, r25
 9a4:	26 60       	ori	r18, 0x06	; 6
 9a6:	b2 2e       	mov	r11, r18
 9a8:	06 c0       	rjmp	.+12     	; 0x9b6 <__stack+0xb7>
 9aa:	28 e0       	ldi	r18, 0x08	; 8
 9ac:	30 e0       	ldi	r19, 0x00	; 0
 9ae:	05 c0       	rjmp	.+10     	; 0x9ba <__stack+0xbb>
 9b0:	20 e1       	ldi	r18, 0x10	; 16
 9b2:	30 e0       	ldi	r19, 0x00	; 0
 9b4:	02 c0       	rjmp	.+4      	; 0x9ba <__stack+0xbb>
 9b6:	20 e1       	ldi	r18, 0x10	; 16
 9b8:	32 e0       	ldi	r19, 0x02	; 2
 9ba:	f8 01       	movw	r30, r16
 9bc:	b7 fe       	sbrs	r11, 7
 9be:	07 c0       	rjmp	.+14     	; 0x9ce <__stack+0xcf>
 9c0:	60 81       	ld	r22, Z
 9c2:	71 81       	ldd	r23, Z+1	; 0x01
 9c4:	82 81       	ldd	r24, Z+2	; 0x02
 9c6:	93 81       	ldd	r25, Z+3	; 0x03
 9c8:	0c 5f       	subi	r16, 0xFC	; 252
 9ca:	1f 4f       	sbci	r17, 0xFF	; 255
 9cc:	06 c0       	rjmp	.+12     	; 0x9da <__stack+0xdb>
 9ce:	60 81       	ld	r22, Z
 9d0:	71 81       	ldd	r23, Z+1	; 0x01
 9d2:	80 e0       	ldi	r24, 0x00	; 0
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	0e 5f       	subi	r16, 0xFE	; 254
 9d8:	1f 4f       	sbci	r17, 0xFF	; 255
 9da:	a3 01       	movw	r20, r6
 9dc:	db d0       	rcall	.+438    	; 0xb94 <__ultoa_invert>
 9de:	88 2e       	mov	r8, r24
 9e0:	86 18       	sub	r8, r6
 9e2:	fb 2d       	mov	r31, r11
 9e4:	ff 77       	andi	r31, 0x7F	; 127
 9e6:	3f 2e       	mov	r3, r31
 9e8:	36 fe       	sbrs	r3, 6
 9ea:	0d c0       	rjmp	.+26     	; 0xa06 <__stack+0x107>
 9ec:	23 2d       	mov	r18, r3
 9ee:	2e 7f       	andi	r18, 0xFE	; 254
 9f0:	a2 2e       	mov	r10, r18
 9f2:	89 14       	cp	r8, r9
 9f4:	58 f4       	brcc	.+22     	; 0xa0c <__stack+0x10d>
 9f6:	34 fe       	sbrs	r3, 4
 9f8:	0b c0       	rjmp	.+22     	; 0xa10 <__stack+0x111>
 9fa:	32 fc       	sbrc	r3, 2
 9fc:	09 c0       	rjmp	.+18     	; 0xa10 <__stack+0x111>
 9fe:	83 2d       	mov	r24, r3
 a00:	8e 7e       	andi	r24, 0xEE	; 238
 a02:	a8 2e       	mov	r10, r24
 a04:	05 c0       	rjmp	.+10     	; 0xa10 <__stack+0x111>
 a06:	b8 2c       	mov	r11, r8
 a08:	a3 2c       	mov	r10, r3
 a0a:	03 c0       	rjmp	.+6      	; 0xa12 <__stack+0x113>
 a0c:	b8 2c       	mov	r11, r8
 a0e:	01 c0       	rjmp	.+2      	; 0xa12 <__stack+0x113>
 a10:	b9 2c       	mov	r11, r9
 a12:	a4 fe       	sbrs	r10, 4
 a14:	0f c0       	rjmp	.+30     	; 0xa34 <__stack+0x135>
 a16:	fe 01       	movw	r30, r28
 a18:	e8 0d       	add	r30, r8
 a1a:	f1 1d       	adc	r31, r1
 a1c:	80 81       	ld	r24, Z
 a1e:	80 33       	cpi	r24, 0x30	; 48
 a20:	21 f4       	brne	.+8      	; 0xa2a <__stack+0x12b>
 a22:	9a 2d       	mov	r25, r10
 a24:	99 7e       	andi	r25, 0xE9	; 233
 a26:	a9 2e       	mov	r10, r25
 a28:	09 c0       	rjmp	.+18     	; 0xa3c <__stack+0x13d>
 a2a:	a2 fe       	sbrs	r10, 2
 a2c:	06 c0       	rjmp	.+12     	; 0xa3a <__stack+0x13b>
 a2e:	b3 94       	inc	r11
 a30:	b3 94       	inc	r11
 a32:	04 c0       	rjmp	.+8      	; 0xa3c <__stack+0x13d>
 a34:	8a 2d       	mov	r24, r10
 a36:	86 78       	andi	r24, 0x86	; 134
 a38:	09 f0       	breq	.+2      	; 0xa3c <__stack+0x13d>
 a3a:	b3 94       	inc	r11
 a3c:	a3 fc       	sbrc	r10, 3
 a3e:	10 c0       	rjmp	.+32     	; 0xa60 <__stack+0x161>
 a40:	a0 fe       	sbrs	r10, 0
 a42:	06 c0       	rjmp	.+12     	; 0xa50 <__stack+0x151>
 a44:	b2 14       	cp	r11, r2
 a46:	80 f4       	brcc	.+32     	; 0xa68 <__stack+0x169>
 a48:	28 0c       	add	r2, r8
 a4a:	92 2c       	mov	r9, r2
 a4c:	9b 18       	sub	r9, r11
 a4e:	0d c0       	rjmp	.+26     	; 0xa6a <__stack+0x16b>
 a50:	b2 14       	cp	r11, r2
 a52:	58 f4       	brcc	.+22     	; 0xa6a <__stack+0x16b>
 a54:	b6 01       	movw	r22, r12
 a56:	80 e2       	ldi	r24, 0x20	; 32
 a58:	90 e0       	ldi	r25, 0x00	; 0
 a5a:	60 d0       	rcall	.+192    	; 0xb1c <fputc>
 a5c:	b3 94       	inc	r11
 a5e:	f8 cf       	rjmp	.-16     	; 0xa50 <__stack+0x151>
 a60:	b2 14       	cp	r11, r2
 a62:	18 f4       	brcc	.+6      	; 0xa6a <__stack+0x16b>
 a64:	2b 18       	sub	r2, r11
 a66:	02 c0       	rjmp	.+4      	; 0xa6c <__stack+0x16d>
 a68:	98 2c       	mov	r9, r8
 a6a:	21 2c       	mov	r2, r1
 a6c:	a4 fe       	sbrs	r10, 4
 a6e:	0f c0       	rjmp	.+30     	; 0xa8e <__stack+0x18f>
 a70:	b6 01       	movw	r22, r12
 a72:	80 e3       	ldi	r24, 0x30	; 48
 a74:	90 e0       	ldi	r25, 0x00	; 0
 a76:	52 d0       	rcall	.+164    	; 0xb1c <fputc>
 a78:	a2 fe       	sbrs	r10, 2
 a7a:	16 c0       	rjmp	.+44     	; 0xaa8 <__stack+0x1a9>
 a7c:	a1 fc       	sbrc	r10, 1
 a7e:	03 c0       	rjmp	.+6      	; 0xa86 <__stack+0x187>
 a80:	88 e7       	ldi	r24, 0x78	; 120
 a82:	90 e0       	ldi	r25, 0x00	; 0
 a84:	02 c0       	rjmp	.+4      	; 0xa8a <__stack+0x18b>
 a86:	88 e5       	ldi	r24, 0x58	; 88
 a88:	90 e0       	ldi	r25, 0x00	; 0
 a8a:	b6 01       	movw	r22, r12
 a8c:	0c c0       	rjmp	.+24     	; 0xaa6 <__stack+0x1a7>
 a8e:	8a 2d       	mov	r24, r10
 a90:	86 78       	andi	r24, 0x86	; 134
 a92:	51 f0       	breq	.+20     	; 0xaa8 <__stack+0x1a9>
 a94:	a1 fe       	sbrs	r10, 1
 a96:	02 c0       	rjmp	.+4      	; 0xa9c <__stack+0x19d>
 a98:	8b e2       	ldi	r24, 0x2B	; 43
 a9a:	01 c0       	rjmp	.+2      	; 0xa9e <__stack+0x19f>
 a9c:	80 e2       	ldi	r24, 0x20	; 32
 a9e:	a7 fc       	sbrc	r10, 7
 aa0:	8d e2       	ldi	r24, 0x2D	; 45
 aa2:	b6 01       	movw	r22, r12
 aa4:	90 e0       	ldi	r25, 0x00	; 0
 aa6:	3a d0       	rcall	.+116    	; 0xb1c <fputc>
 aa8:	89 14       	cp	r8, r9
 aaa:	30 f4       	brcc	.+12     	; 0xab8 <__stack+0x1b9>
 aac:	b6 01       	movw	r22, r12
 aae:	80 e3       	ldi	r24, 0x30	; 48
 ab0:	90 e0       	ldi	r25, 0x00	; 0
 ab2:	34 d0       	rcall	.+104    	; 0xb1c <fputc>
 ab4:	9a 94       	dec	r9
 ab6:	f8 cf       	rjmp	.-16     	; 0xaa8 <__stack+0x1a9>
 ab8:	8a 94       	dec	r8
 aba:	f3 01       	movw	r30, r6
 abc:	e8 0d       	add	r30, r8
 abe:	f1 1d       	adc	r31, r1
 ac0:	80 81       	ld	r24, Z
 ac2:	b6 01       	movw	r22, r12
 ac4:	90 e0       	ldi	r25, 0x00	; 0
 ac6:	2a d0       	rcall	.+84     	; 0xb1c <fputc>
 ac8:	81 10       	cpse	r8, r1
 aca:	f6 cf       	rjmp	.-20     	; 0xab8 <__stack+0x1b9>
 acc:	22 20       	and	r2, r2
 ace:	09 f4       	brne	.+2      	; 0xad2 <__stack+0x1d3>
 ad0:	4e ce       	rjmp	.-868    	; 0x76e <vfprintf+0x22>
 ad2:	b6 01       	movw	r22, r12
 ad4:	80 e2       	ldi	r24, 0x20	; 32
 ad6:	90 e0       	ldi	r25, 0x00	; 0
 ad8:	21 d0       	rcall	.+66     	; 0xb1c <fputc>
 ada:	2a 94       	dec	r2
 adc:	f7 cf       	rjmp	.-18     	; 0xacc <__stack+0x1cd>
 ade:	f6 01       	movw	r30, r12
 ae0:	86 81       	ldd	r24, Z+6	; 0x06
 ae2:	97 81       	ldd	r25, Z+7	; 0x07
 ae4:	02 c0       	rjmp	.+4      	; 0xaea <__stack+0x1eb>
 ae6:	8f ef       	ldi	r24, 0xFF	; 255
 ae8:	9f ef       	ldi	r25, 0xFF	; 255
 aea:	2b 96       	adiw	r28, 0x0b	; 11
 aec:	e2 e1       	ldi	r30, 0x12	; 18
 aee:	cc c0       	rjmp	.+408    	; 0xc88 <__epilogue_restores__>

00000af0 <strnlen_P>:
 af0:	fc 01       	movw	r30, r24
 af2:	05 90       	lpm	r0, Z+
 af4:	61 50       	subi	r22, 0x01	; 1
 af6:	70 40       	sbci	r23, 0x00	; 0
 af8:	01 10       	cpse	r0, r1
 afa:	d8 f7       	brcc	.-10     	; 0xaf2 <strnlen_P+0x2>
 afc:	80 95       	com	r24
 afe:	90 95       	com	r25
 b00:	8e 0f       	add	r24, r30
 b02:	9f 1f       	adc	r25, r31
 b04:	08 95       	ret

00000b06 <strnlen>:
 b06:	fc 01       	movw	r30, r24
 b08:	61 50       	subi	r22, 0x01	; 1
 b0a:	70 40       	sbci	r23, 0x00	; 0
 b0c:	01 90       	ld	r0, Z+
 b0e:	01 10       	cpse	r0, r1
 b10:	d8 f7       	brcc	.-10     	; 0xb08 <strnlen+0x2>
 b12:	80 95       	com	r24
 b14:	90 95       	com	r25
 b16:	8e 0f       	add	r24, r30
 b18:	9f 1f       	adc	r25, r31
 b1a:	08 95       	ret

00000b1c <fputc>:
 b1c:	0f 93       	push	r16
 b1e:	1f 93       	push	r17
 b20:	cf 93       	push	r28
 b22:	df 93       	push	r29
 b24:	fb 01       	movw	r30, r22
 b26:	23 81       	ldd	r18, Z+3	; 0x03
 b28:	21 fd       	sbrc	r18, 1
 b2a:	03 c0       	rjmp	.+6      	; 0xb32 <fputc+0x16>
 b2c:	8f ef       	ldi	r24, 0xFF	; 255
 b2e:	9f ef       	ldi	r25, 0xFF	; 255
 b30:	2c c0       	rjmp	.+88     	; 0xb8a <fputc+0x6e>
 b32:	22 ff       	sbrs	r18, 2
 b34:	16 c0       	rjmp	.+44     	; 0xb62 <fputc+0x46>
 b36:	46 81       	ldd	r20, Z+6	; 0x06
 b38:	57 81       	ldd	r21, Z+7	; 0x07
 b3a:	24 81       	ldd	r18, Z+4	; 0x04
 b3c:	35 81       	ldd	r19, Z+5	; 0x05
 b3e:	42 17       	cp	r20, r18
 b40:	53 07       	cpc	r21, r19
 b42:	44 f4       	brge	.+16     	; 0xb54 <fputc+0x38>
 b44:	a0 81       	ld	r26, Z
 b46:	b1 81       	ldd	r27, Z+1	; 0x01
 b48:	9d 01       	movw	r18, r26
 b4a:	2f 5f       	subi	r18, 0xFF	; 255
 b4c:	3f 4f       	sbci	r19, 0xFF	; 255
 b4e:	31 83       	std	Z+1, r19	; 0x01
 b50:	20 83       	st	Z, r18
 b52:	8c 93       	st	X, r24
 b54:	26 81       	ldd	r18, Z+6	; 0x06
 b56:	37 81       	ldd	r19, Z+7	; 0x07
 b58:	2f 5f       	subi	r18, 0xFF	; 255
 b5a:	3f 4f       	sbci	r19, 0xFF	; 255
 b5c:	37 83       	std	Z+7, r19	; 0x07
 b5e:	26 83       	std	Z+6, r18	; 0x06
 b60:	14 c0       	rjmp	.+40     	; 0xb8a <fputc+0x6e>
 b62:	8b 01       	movw	r16, r22
 b64:	ec 01       	movw	r28, r24
 b66:	fb 01       	movw	r30, r22
 b68:	00 84       	ldd	r0, Z+8	; 0x08
 b6a:	f1 85       	ldd	r31, Z+9	; 0x09
 b6c:	e0 2d       	mov	r30, r0
 b6e:	09 95       	icall
 b70:	89 2b       	or	r24, r25
 b72:	e1 f6       	brne	.-72     	; 0xb2c <fputc+0x10>
 b74:	d8 01       	movw	r26, r16
 b76:	16 96       	adiw	r26, 0x06	; 6
 b78:	8d 91       	ld	r24, X+
 b7a:	9c 91       	ld	r25, X
 b7c:	17 97       	sbiw	r26, 0x07	; 7
 b7e:	01 96       	adiw	r24, 0x01	; 1
 b80:	17 96       	adiw	r26, 0x07	; 7
 b82:	9c 93       	st	X, r25
 b84:	8e 93       	st	-X, r24
 b86:	16 97       	sbiw	r26, 0x06	; 6
 b88:	ce 01       	movw	r24, r28
 b8a:	df 91       	pop	r29
 b8c:	cf 91       	pop	r28
 b8e:	1f 91       	pop	r17
 b90:	0f 91       	pop	r16
 b92:	08 95       	ret

00000b94 <__ultoa_invert>:
 b94:	fa 01       	movw	r30, r20
 b96:	aa 27       	eor	r26, r26
 b98:	28 30       	cpi	r18, 0x08	; 8
 b9a:	51 f1       	breq	.+84     	; 0xbf0 <__ultoa_invert+0x5c>
 b9c:	20 31       	cpi	r18, 0x10	; 16
 b9e:	81 f1       	breq	.+96     	; 0xc00 <__ultoa_invert+0x6c>
 ba0:	e8 94       	clt
 ba2:	6f 93       	push	r22
 ba4:	6e 7f       	andi	r22, 0xFE	; 254
 ba6:	6e 5f       	subi	r22, 0xFE	; 254
 ba8:	7f 4f       	sbci	r23, 0xFF	; 255
 baa:	8f 4f       	sbci	r24, 0xFF	; 255
 bac:	9f 4f       	sbci	r25, 0xFF	; 255
 bae:	af 4f       	sbci	r26, 0xFF	; 255
 bb0:	b1 e0       	ldi	r27, 0x01	; 1
 bb2:	3e d0       	rcall	.+124    	; 0xc30 <__ultoa_invert+0x9c>
 bb4:	b4 e0       	ldi	r27, 0x04	; 4
 bb6:	3c d0       	rcall	.+120    	; 0xc30 <__ultoa_invert+0x9c>
 bb8:	67 0f       	add	r22, r23
 bba:	78 1f       	adc	r23, r24
 bbc:	89 1f       	adc	r24, r25
 bbe:	9a 1f       	adc	r25, r26
 bc0:	a1 1d       	adc	r26, r1
 bc2:	68 0f       	add	r22, r24
 bc4:	79 1f       	adc	r23, r25
 bc6:	8a 1f       	adc	r24, r26
 bc8:	91 1d       	adc	r25, r1
 bca:	a1 1d       	adc	r26, r1
 bcc:	6a 0f       	add	r22, r26
 bce:	71 1d       	adc	r23, r1
 bd0:	81 1d       	adc	r24, r1
 bd2:	91 1d       	adc	r25, r1
 bd4:	a1 1d       	adc	r26, r1
 bd6:	20 d0       	rcall	.+64     	; 0xc18 <__ultoa_invert+0x84>
 bd8:	09 f4       	brne	.+2      	; 0xbdc <__ultoa_invert+0x48>
 bda:	68 94       	set
 bdc:	3f 91       	pop	r19
 bde:	2a e0       	ldi	r18, 0x0A	; 10
 be0:	26 9f       	mul	r18, r22
 be2:	11 24       	eor	r1, r1
 be4:	30 19       	sub	r19, r0
 be6:	30 5d       	subi	r19, 0xD0	; 208
 be8:	31 93       	st	Z+, r19
 bea:	de f6       	brtc	.-74     	; 0xba2 <__ultoa_invert+0xe>
 bec:	cf 01       	movw	r24, r30
 bee:	08 95       	ret
 bf0:	46 2f       	mov	r20, r22
 bf2:	47 70       	andi	r20, 0x07	; 7
 bf4:	40 5d       	subi	r20, 0xD0	; 208
 bf6:	41 93       	st	Z+, r20
 bf8:	b3 e0       	ldi	r27, 0x03	; 3
 bfa:	0f d0       	rcall	.+30     	; 0xc1a <__ultoa_invert+0x86>
 bfc:	c9 f7       	brne	.-14     	; 0xbf0 <__ultoa_invert+0x5c>
 bfe:	f6 cf       	rjmp	.-20     	; 0xbec <__ultoa_invert+0x58>
 c00:	46 2f       	mov	r20, r22
 c02:	4f 70       	andi	r20, 0x0F	; 15
 c04:	40 5d       	subi	r20, 0xD0	; 208
 c06:	4a 33       	cpi	r20, 0x3A	; 58
 c08:	18 f0       	brcs	.+6      	; 0xc10 <__ultoa_invert+0x7c>
 c0a:	49 5d       	subi	r20, 0xD9	; 217
 c0c:	31 fd       	sbrc	r19, 1
 c0e:	40 52       	subi	r20, 0x20	; 32
 c10:	41 93       	st	Z+, r20
 c12:	02 d0       	rcall	.+4      	; 0xc18 <__ultoa_invert+0x84>
 c14:	a9 f7       	brne	.-22     	; 0xc00 <__ultoa_invert+0x6c>
 c16:	ea cf       	rjmp	.-44     	; 0xbec <__ultoa_invert+0x58>
 c18:	b4 e0       	ldi	r27, 0x04	; 4
 c1a:	a6 95       	lsr	r26
 c1c:	97 95       	ror	r25
 c1e:	87 95       	ror	r24
 c20:	77 95       	ror	r23
 c22:	67 95       	ror	r22
 c24:	ba 95       	dec	r27
 c26:	c9 f7       	brne	.-14     	; 0xc1a <__ultoa_invert+0x86>
 c28:	00 97       	sbiw	r24, 0x00	; 0
 c2a:	61 05       	cpc	r22, r1
 c2c:	71 05       	cpc	r23, r1
 c2e:	08 95       	ret
 c30:	9b 01       	movw	r18, r22
 c32:	ac 01       	movw	r20, r24
 c34:	0a 2e       	mov	r0, r26
 c36:	06 94       	lsr	r0
 c38:	57 95       	ror	r21
 c3a:	47 95       	ror	r20
 c3c:	37 95       	ror	r19
 c3e:	27 95       	ror	r18
 c40:	ba 95       	dec	r27
 c42:	c9 f7       	brne	.-14     	; 0xc36 <__ultoa_invert+0xa2>
 c44:	62 0f       	add	r22, r18
 c46:	73 1f       	adc	r23, r19
 c48:	84 1f       	adc	r24, r20
 c4a:	95 1f       	adc	r25, r21
 c4c:	a0 1d       	adc	r26, r0
 c4e:	08 95       	ret

00000c50 <__prologue_saves__>:
 c50:	2f 92       	push	r2
 c52:	3f 92       	push	r3
 c54:	4f 92       	push	r4
 c56:	5f 92       	push	r5
 c58:	6f 92       	push	r6
 c5a:	7f 92       	push	r7
 c5c:	8f 92       	push	r8
 c5e:	9f 92       	push	r9
 c60:	af 92       	push	r10
 c62:	bf 92       	push	r11
 c64:	cf 92       	push	r12
 c66:	df 92       	push	r13
 c68:	ef 92       	push	r14
 c6a:	ff 92       	push	r15
 c6c:	0f 93       	push	r16
 c6e:	1f 93       	push	r17
 c70:	cf 93       	push	r28
 c72:	df 93       	push	r29
 c74:	cd b7       	in	r28, 0x3d	; 61
 c76:	de b7       	in	r29, 0x3e	; 62
 c78:	ca 1b       	sub	r28, r26
 c7a:	db 0b       	sbc	r29, r27
 c7c:	0f b6       	in	r0, 0x3f	; 63
 c7e:	f8 94       	cli
 c80:	de bf       	out	0x3e, r29	; 62
 c82:	0f be       	out	0x3f, r0	; 63
 c84:	cd bf       	out	0x3d, r28	; 61
 c86:	09 94       	ijmp

00000c88 <__epilogue_restores__>:
 c88:	2a 88       	ldd	r2, Y+18	; 0x12
 c8a:	39 88       	ldd	r3, Y+17	; 0x11
 c8c:	48 88       	ldd	r4, Y+16	; 0x10
 c8e:	5f 84       	ldd	r5, Y+15	; 0x0f
 c90:	6e 84       	ldd	r6, Y+14	; 0x0e
 c92:	7d 84       	ldd	r7, Y+13	; 0x0d
 c94:	8c 84       	ldd	r8, Y+12	; 0x0c
 c96:	9b 84       	ldd	r9, Y+11	; 0x0b
 c98:	aa 84       	ldd	r10, Y+10	; 0x0a
 c9a:	b9 84       	ldd	r11, Y+9	; 0x09
 c9c:	c8 84       	ldd	r12, Y+8	; 0x08
 c9e:	df 80       	ldd	r13, Y+7	; 0x07
 ca0:	ee 80       	ldd	r14, Y+6	; 0x06
 ca2:	fd 80       	ldd	r15, Y+5	; 0x05
 ca4:	0c 81       	ldd	r16, Y+4	; 0x04
 ca6:	1b 81       	ldd	r17, Y+3	; 0x03
 ca8:	aa 81       	ldd	r26, Y+2	; 0x02
 caa:	b9 81       	ldd	r27, Y+1	; 0x01
 cac:	ce 0f       	add	r28, r30
 cae:	d1 1d       	adc	r29, r1
 cb0:	0f b6       	in	r0, 0x3f	; 63
 cb2:	f8 94       	cli
 cb4:	de bf       	out	0x3e, r29	; 62
 cb6:	0f be       	out	0x3f, r0	; 63
 cb8:	cd bf       	out	0x3d, r28	; 61
 cba:	ed 01       	movw	r28, r26
 cbc:	08 95       	ret

00000cbe <_exit>:
 cbe:	f8 94       	cli

00000cc0 <__stop_program>:
 cc0:	ff cf       	rjmp	.-2      	; 0xcc0 <__stop_program>
