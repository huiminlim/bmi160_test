
bmi160_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ce  00800100  00000d60  00000df4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d60  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005a  008001ce  008001ce  00000ec2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000ec2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000f60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022a7  00000000  00000000  000010b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f27  00000000  00000000  00003357  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f8b  00000000  00000000  0000427e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e8  00000000  00000000  0000620c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001312f  00000000  00000000  000065f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001707  00000000  00000000  00019723  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  0001ae2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00001585  00000000  00000000  0001af2a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e6       	ldi	r30, 0x60	; 96
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 3c       	cpi	r26, 0xCE	; 206
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	ae ec       	ldi	r26, 0xCE	; 206
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 32       	cpi	r26, 0x28	; 40
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	ab d2       	rcall	.+1366   	; 0x5f2 <main>
  9c:	5f c6       	rjmp	.+3262   	; 0xd5c <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <spixfer>:
    This function transfers 8 bits via SPI
*/
uint8_t spixfer(uint8_t x) {
    // Hardware SPI transfer used
    // Write to MOSI pin and receive on MISO pin
    SPDR = x;
  a0:	8e bd       	out	0x2e, r24	; 46

    // NOP to introduce delay to prevent wait
    // Loop form iterating when running at the maximum speed
    // This gives about 10% more speed,
    // even if it seems counter-intuitive at lower speeds it is unnoticed.
    asm volatile("nop");
  a2:	00 00       	nop

    while (!(SPSR & (1 << SPIF))) ; // wait
  a4:	0d b4       	in	r0, 0x2d	; 45
  a6:	07 fe       	sbrs	r0, 7
  a8:	fd cf       	rjmp	.-6      	; 0xa4 <spixfer+0x4>

    return SPDR;
  aa:	8e b5       	in	r24, 0x2e	; 46
}
  ac:	08 95       	ret

000000ae <read8>:
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
  ae:	2a 98       	cbi	0x05, 2	; 5
uint8_t read8(uint8_t reg) {
    // SS set to low - select slave
    ioport_set_pin_low(SPI_HARDWARE_SS);

    // read, bit 7 set to 1
    spixfer(reg | (1 << BMI160_SPI_READ_BIT));
  b0:	80 68       	ori	r24, 0x80	; 128
  b2:	f6 df       	rcall	.-20     	; 0xa0 <spixfer>
    uint8_t value = spixfer(0);
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	f4 df       	rcall	.-24     	; 0xa0 <spixfer>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
  b8:	2a 9a       	sbi	0x05, 2	; 5

    // SS set to high - de-select slave
    ioport_set_pin_high(SPI_HARDWARE_SS);

    return value;
}
  ba:	08 95       	ret

000000bc <get_rotation>:
    @param y 16-bit signed integer container for Y-axis rotation
    @param z 16-bit signed integer container for Z-axis rotation
    @see getMotion6()
    @see BMI160_RA_GYRO_X_L
*/
void get_rotation(int16_t *x, int16_t *y, int16_t *z) {
  bc:	9f 92       	push	r9
  be:	af 92       	push	r10
  c0:	bf 92       	push	r11
  c2:	cf 92       	push	r12
  c4:	df 92       	push	r13
  c6:	ef 92       	push	r14
  c8:	ff 92       	push	r15
  ca:	0f 93       	push	r16
  cc:	1f 93       	push	r17
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	6c 01       	movw	r12, r24
  d4:	7b 01       	movw	r14, r22
  d6:	8a 01       	movw	r16, r20
    uint8_t buffer[6];

    // Send address to read from and read first byte
    buffer[0] = read8(BMI160_RA_GYRO_X_L);
  d8:	8c e0       	ldi	r24, 0x0C	; 12
  da:	e9 df       	rcall	.-46     	; 0xae <read8>
  dc:	b8 2e       	mov	r11, r24
    //printf("Byte 1: %d\r\n", buffer[0]);

    buffer[1] = read8(BMI160_RA_GYRO_X_H);
  de:	8d e0       	ldi	r24, 0x0D	; 13
  e0:	e6 df       	rcall	.-52     	; 0xae <read8>
  e2:	98 2e       	mov	r9, r24
    //printf("Byte 2: %d\r\n", buffer[1]);

    buffer[2] = read8(BMI160_RA_GYRO_Y_L);
  e4:	8e e0       	ldi	r24, 0x0E	; 14
  e6:	e3 df       	rcall	.-58     	; 0xae <read8>
  e8:	d8 2f       	mov	r29, r24
    //printf("Byte 3: %d\r\n", buffer[2]);

    buffer[3] = read8(BMI160_RA_GYRO_Y_H);
  ea:	8f e0       	ldi	r24, 0x0F	; 15
  ec:	e0 df       	rcall	.-64     	; 0xae <read8>
  ee:	a8 2e       	mov	r10, r24
    //printf("Byte 4: %d\r\n", buffer[3]);

    buffer[4] = read8(BMI160_RA_GYRO_Z_L);
  f0:	80 e1       	ldi	r24, 0x10	; 16
  f2:	dd df       	rcall	.-70     	; 0xae <read8>
  f4:	c8 2f       	mov	r28, r24
    //printf("Byte 5: %d\r\n", buffer[4]);

    buffer[5] = read8(BMI160_RA_GYRO_Z_H);
  f6:	81 e1       	ldi	r24, 0x11	; 17
  f8:	da df       	rcall	.-76     	; 0xae <read8>
  fa:	2b 2d       	mov	r18, r11
    //printf("Byte 6: %d\r\n", buffer[5]);

    *x = (((int16_t)buffer[1]) << 8) | buffer[0];
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	39 29       	or	r19, r9
 100:	f6 01       	movw	r30, r12
 102:	31 83       	std	Z+1, r19	; 0x01
 104:	20 83       	st	Z, r18
 106:	2d 2f       	mov	r18, r29
    *y = (((int16_t)buffer[3]) << 8) | buffer[2];
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	3a 29       	or	r19, r10
 10c:	f7 01       	movw	r30, r14
 10e:	31 83       	std	Z+1, r19	; 0x01
 110:	20 83       	st	Z, r18
 112:	2c 2f       	mov	r18, r28
    *z = (((int16_t)buffer[5]) << 8) | buffer[4];
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	38 2b       	or	r19, r24
 118:	f8 01       	movw	r30, r16
 11a:	31 83       	std	Z+1, r19	; 0x01
 11c:	20 83       	st	Z, r18
 11e:	df 91       	pop	r29
}
 120:	cf 91       	pop	r28
 122:	1f 91       	pop	r17
 124:	0f 91       	pop	r16
 126:	ff 90       	pop	r15
 128:	ef 90       	pop	r14
 12a:	df 90       	pop	r13
 12c:	cf 90       	pop	r12
 12e:	bf 90       	pop	r11
 130:	af 90       	pop	r10
 132:	9f 90       	pop	r9
 134:	08 95       	ret

00000136 <read_gyro>:
 136:	cf 92       	push	r12
/** Read the gyroscope value
	@param x pointer reference value of memory location to store x gyroscope value
	@param y pointer reference value of memory location to store y gyroscope value
	@param z pointer reference value of memory location to store z gyroscope value
*/
void read_gyro(int16_t *x, int16_t *y, int16_t *z) {
 138:	df 92       	push	r13
 13a:	ef 92       	push	r14
 13c:	ff 92       	push	r15
 13e:	0f 93       	push	r16
 140:	1f 93       	push	r17
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	00 d0       	rcall	.+0      	; 0x148 <read_gyro+0x12>
 148:	00 d0       	rcall	.+0      	; 0x14a <read_gyro+0x14>
 14a:	00 d0       	rcall	.+0      	; 0x14c <read_gyro+0x16>
 14c:	cd b7       	in	r28, 0x3d	; 61
 14e:	de b7       	in	r29, 0x3e	; 62
 150:	6c 01       	movw	r12, r24
 152:	7b 01       	movw	r14, r22
 154:	8a 01       	movw	r16, r20
    int16_t sx = 0, sy = 0, sz = 0;
 156:	1a 82       	std	Y+2, r1	; 0x02
 158:	19 82       	std	Y+1, r1	; 0x01
 15a:	1c 82       	std	Y+4, r1	; 0x04
 15c:	1b 82       	std	Y+3, r1	; 0x03
 15e:	1e 82       	std	Y+6, r1	; 0x06
 160:	1d 82       	std	Y+5, r1	; 0x05

    get_rotation(&sx, &sy, &sz);
 162:	ae 01       	movw	r20, r28
 164:	4b 5f       	subi	r20, 0xFB	; 251
 166:	5f 4f       	sbci	r21, 0xFF	; 255
 168:	be 01       	movw	r22, r28
 16a:	6d 5f       	subi	r22, 0xFD	; 253
 16c:	7f 4f       	sbci	r23, 0xFF	; 255
 16e:	ce 01       	movw	r24, r28
 170:	01 96       	adiw	r24, 0x01	; 1
 172:	a4 df       	rcall	.-184    	; 0xbc <get_rotation>

    *x = (int16_t) sx;
 174:	89 81       	ldd	r24, Y+1	; 0x01
 176:	9a 81       	ldd	r25, Y+2	; 0x02
 178:	f6 01       	movw	r30, r12
 17a:	91 83       	std	Z+1, r25	; 0x01
 17c:	80 83       	st	Z, r24
    *y = (int16_t) sy;
 17e:	8b 81       	ldd	r24, Y+3	; 0x03
 180:	9c 81       	ldd	r25, Y+4	; 0x04
 182:	f7 01       	movw	r30, r14
 184:	91 83       	std	Z+1, r25	; 0x01
 186:	80 83       	st	Z, r24
    *z = (int16_t) sz;
 188:	8d 81       	ldd	r24, Y+5	; 0x05
 18a:	9e 81       	ldd	r25, Y+6	; 0x06
 18c:	f8 01       	movw	r30, r16
 18e:	91 83       	std	Z+1, r25	; 0x01
 190:	80 83       	st	Z, r24
}
 192:	26 96       	adiw	r28, 0x06	; 6
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	f8 94       	cli
 198:	de bf       	out	0x3e, r29	; 62
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	cd bf       	out	0x3d, r28	; 61
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	1f 91       	pop	r17
 1a4:	0f 91       	pop	r16
 1a6:	ff 90       	pop	r15
 1a8:	ef 90       	pop	r14
 1aa:	df 90       	pop	r13
 1ac:	cf 90       	pop	r12
 1ae:	08 95       	ret

000001b0 <get_acceleration>:
    @param x 16-bit signed integer container for X-axis acceleration
    @param y 16-bit signed integer container for Y-axis acceleration
    @param z 16-bit signed integer container for Z-axis acceleration
    @see BMI160_RA_ACCEL_X_L
*/
void get_acceleration(int16_t *x, int16_t *y, int16_t *z) {
 1b0:	2f 92       	push	r2
 1b2:	3f 92       	push	r3
 1b4:	4f 92       	push	r4
 1b6:	5f 92       	push	r5
 1b8:	6f 92       	push	r6
 1ba:	7f 92       	push	r7
 1bc:	8f 92       	push	r8
 1be:	9f 92       	push	r9
 1c0:	af 92       	push	r10
 1c2:	bf 92       	push	r11
 1c4:	cf 92       	push	r12
 1c6:	df 92       	push	r13
 1c8:	ef 92       	push	r14
 1ca:	ff 92       	push	r15
 1cc:	0f 93       	push	r16
 1ce:	1f 93       	push	r17
 1d0:	cf 93       	push	r28
 1d2:	df 93       	push	r29
 1d4:	3c 01       	movw	r6, r24
 1d6:	2b 01       	movw	r4, r22
 1d8:	1a 01       	movw	r2, r20
    uint8_t buffer[6];

    // Send address to read from and read first byte
    buffer[0] = read8(BMI160_RA_ACCEL_X_L);
 1da:	82 e1       	ldi	r24, 0x12	; 18
 1dc:	68 df       	rcall	.-304    	; 0xae <read8>
    printf("Byte 1: %d\r\n", buffer[0]);
 1de:	c8 2e       	mov	r12, r24
 1e0:	d1 2c       	mov	r13, r1
 1e2:	1f 92       	push	r1
 1e4:	8f 93       	push	r24
 1e6:	8e e0       	ldi	r24, 0x0E	; 14
 1e8:	91 e0       	ldi	r25, 0x01	; 1
 1ea:	9f 93       	push	r25
 1ec:	8f 93       	push	r24
 1ee:	ba d2       	rcall	.+1396   	; 0x764 <printf>

    buffer[1] = read8(BMI160_RA_ACCEL_X_H);
 1f0:	83 e1       	ldi	r24, 0x13	; 19
 1f2:	5d df       	rcall	.-326    	; 0xae <read8>
 1f4:	a8 2e       	mov	r10, r24
    printf("Byte 2: %d\r\n", buffer[1]);
 1f6:	b1 2c       	mov	r11, r1
 1f8:	1f 92       	push	r1
 1fa:	8f 93       	push	r24
 1fc:	8b e1       	ldi	r24, 0x1B	; 27
 1fe:	91 e0       	ldi	r25, 0x01	; 1
 200:	9f 93       	push	r25
 202:	8f 93       	push	r24
 204:	af d2       	rcall	.+1374   	; 0x764 <printf>

    buffer[2] = read8(BMI160_RA_ACCEL_Y_L);
 206:	84 e1       	ldi	r24, 0x14	; 20
 208:	52 df       	rcall	.-348    	; 0xae <read8>
 20a:	08 2f       	mov	r16, r24
    printf("Byte 3: %d\r\n", buffer[2]);
 20c:	10 e0       	ldi	r17, 0x00	; 0
 20e:	1f 92       	push	r1
 210:	8f 93       	push	r24
 212:	88 e2       	ldi	r24, 0x28	; 40
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	9f 93       	push	r25
 218:	8f 93       	push	r24
 21a:	a4 d2       	rcall	.+1352   	; 0x764 <printf>

    buffer[3] = read8(BMI160_RA_ACCEL_Y_H);
 21c:	85 e1       	ldi	r24, 0x15	; 21
 21e:	47 df       	rcall	.-370    	; 0xae <read8>
 220:	e8 2e       	mov	r14, r24
    printf("Byte 4: %d\r\n", buffer[3]);
 222:	f1 2c       	mov	r15, r1
 224:	1f 92       	push	r1
 226:	8f 93       	push	r24
 228:	85 e3       	ldi	r24, 0x35	; 53
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	9f 93       	push	r25
 22e:	8f 93       	push	r24
 230:	99 d2       	rcall	.+1330   	; 0x764 <printf>

    buffer[4] = read8(BMI160_RA_ACCEL_Z_L);
 232:	86 e1       	ldi	r24, 0x16	; 22
 234:	3c df       	rcall	.-392    	; 0xae <read8>
    printf("Byte 5: %d\r\n", buffer[4]);
 236:	88 2e       	mov	r8, r24
 238:	91 2c       	mov	r9, r1
 23a:	1f 92       	push	r1
 23c:	8f 93       	push	r24
 23e:	82 e4       	ldi	r24, 0x42	; 66
 240:	91 e0       	ldi	r25, 0x01	; 1
 242:	9f 93       	push	r25
 244:	8f 93       	push	r24
 246:	8e d2       	rcall	.+1308   	; 0x764 <printf>

    buffer[5] = read8(BMI160_RA_ACCEL_Z_H);
 248:	87 e1       	ldi	r24, 0x17	; 23
 24a:	31 df       	rcall	.-414    	; 0xae <read8>
    printf("Byte 6: %d\r\n", buffer[5]);
 24c:	c8 2f       	mov	r28, r24
 24e:	d0 e0       	ldi	r29, 0x00	; 0
 250:	1f 92       	push	r1
 252:	8f 93       	push	r24
 254:	8f e4       	ldi	r24, 0x4F	; 79
 256:	91 e0       	ldi	r25, 0x01	; 1
 258:	9f 93       	push	r25
 25a:	8f 93       	push	r24
 25c:	83 d2       	rcall	.+1286   	; 0x764 <printf>
 25e:	ba 2c       	mov	r11, r10

    *x = (((int16_t)buffer[1]) << 8) | buffer[0];
 260:	aa 24       	eor	r10, r10
 262:	ca 28       	or	r12, r10
 264:	db 28       	or	r13, r11
 266:	f3 01       	movw	r30, r6
 268:	d1 82       	std	Z+1, r13	; 0x01
 26a:	c0 82       	st	Z, r12
 26c:	fe 2c       	mov	r15, r14
    *y = (((int16_t)buffer[3]) << 8) | buffer[2];
 26e:	ee 24       	eor	r14, r14
 270:	0e 29       	or	r16, r14
 272:	1f 29       	or	r17, r15
 274:	f2 01       	movw	r30, r4
 276:	11 83       	std	Z+1, r17	; 0x01
 278:	00 83       	st	Z, r16
 27a:	dc 2f       	mov	r29, r28
    *z = (((int16_t)buffer[5]) << 8) | buffer[4];
 27c:	cc 27       	eor	r28, r28
 27e:	8c 2a       	or	r8, r28
 280:	9d 2a       	or	r9, r29
 282:	f1 01       	movw	r30, r2
 284:	91 82       	std	Z+1, r9	; 0x01
 286:	80 82       	st	Z, r8
 288:	8d b7       	in	r24, 0x3d	; 61
}
 28a:	9e b7       	in	r25, 0x3e	; 62
 28c:	48 96       	adiw	r24, 0x18	; 24
 28e:	0f b6       	in	r0, 0x3f	; 63
 290:	f8 94       	cli
 292:	9e bf       	out	0x3e, r25	; 62
 294:	0f be       	out	0x3f, r0	; 63
 296:	8d bf       	out	0x3d, r24	; 61
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	1f 91       	pop	r17
 29e:	0f 91       	pop	r16
 2a0:	ff 90       	pop	r15
 2a2:	ef 90       	pop	r14
 2a4:	df 90       	pop	r13
 2a6:	cf 90       	pop	r12
 2a8:	bf 90       	pop	r11
 2aa:	af 90       	pop	r10
 2ac:	9f 90       	pop	r9
 2ae:	8f 90       	pop	r8
 2b0:	7f 90       	pop	r7
 2b2:	6f 90       	pop	r6
 2b4:	5f 90       	pop	r5
 2b6:	4f 90       	pop	r4
 2b8:	3f 90       	pop	r3
 2ba:	2f 90       	pop	r2
 2bc:	08 95       	ret

000002be <read_accelerometer>:
 2be:	cf 92       	push	r12
    *y = (((int16_t)buffer[3]) << 8) | buffer[2];
    *z = (((int16_t)buffer[5]) << 8) | buffer[4];
}


void read_accelerometer(int16_t *x, int16_t *y, int16_t *z) {
 2c0:	df 92       	push	r13
 2c2:	ef 92       	push	r14
 2c4:	ff 92       	push	r15
 2c6:	0f 93       	push	r16
 2c8:	1f 93       	push	r17
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
 2ce:	00 d0       	rcall	.+0      	; 0x2d0 <read_accelerometer+0x12>
 2d0:	00 d0       	rcall	.+0      	; 0x2d2 <read_accelerometer+0x14>
 2d2:	00 d0       	rcall	.+0      	; 0x2d4 <read_accelerometer+0x16>
 2d4:	cd b7       	in	r28, 0x3d	; 61
 2d6:	de b7       	in	r29, 0x3e	; 62
 2d8:	6c 01       	movw	r12, r24
 2da:	7b 01       	movw	r14, r22
 2dc:	8a 01       	movw	r16, r20
    int16_t sx, sy, sz;

    get_acceleration(&sx, &sy, &sz);
 2de:	ae 01       	movw	r20, r28
 2e0:	4b 5f       	subi	r20, 0xFB	; 251
 2e2:	5f 4f       	sbci	r21, 0xFF	; 255
 2e4:	be 01       	movw	r22, r28
 2e6:	6d 5f       	subi	r22, 0xFD	; 253
 2e8:	7f 4f       	sbci	r23, 0xFF	; 255
 2ea:	ce 01       	movw	r24, r28
 2ec:	01 96       	adiw	r24, 0x01	; 1
 2ee:	60 df       	rcall	.-320    	; 0x1b0 <get_acceleration>

    *x = (int16_t) sx;
 2f0:	89 81       	ldd	r24, Y+1	; 0x01
 2f2:	9a 81       	ldd	r25, Y+2	; 0x02
 2f4:	f6 01       	movw	r30, r12
 2f6:	91 83       	std	Z+1, r25	; 0x01
 2f8:	80 83       	st	Z, r24
    *y = (int16_t) sy;
 2fa:	8b 81       	ldd	r24, Y+3	; 0x03
 2fc:	9c 81       	ldd	r25, Y+4	; 0x04
 2fe:	f7 01       	movw	r30, r14
 300:	91 83       	std	Z+1, r25	; 0x01
 302:	80 83       	st	Z, r24
    *z = (int16_t) sz;
 304:	8d 81       	ldd	r24, Y+5	; 0x05
 306:	9e 81       	ldd	r25, Y+6	; 0x06
 308:	f8 01       	movw	r30, r16
 30a:	91 83       	std	Z+1, r25	; 0x01
 30c:	80 83       	st	Z, r24
}
 30e:	26 96       	adiw	r28, 0x06	; 6
 310:	0f b6       	in	r0, 0x3f	; 63
 312:	f8 94       	cli
 314:	de bf       	out	0x3e, r29	; 62
 316:	0f be       	out	0x3f, r0	; 63
 318:	cd bf       	out	0x3d, r28	; 61
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	1f 91       	pop	r17
 320:	0f 91       	pop	r16
 322:	ff 90       	pop	r15
 324:	ef 90       	pop	r14
 326:	df 90       	pop	r13
 328:	cf 90       	pop	r12
 32a:	08 95       	ret

0000032c <reg_read>:
/*!
     @brief  Reads from a given register address
	 Wrapper function to read register from sensor, uses read8() function
*/
uint8_t reg_read (uint8_t reg) {
    uint8_t ret = read8(reg);
 32c:	c0 ce       	rjmp	.-640    	; 0xae <read8>
    return ret;
}
 32e:	08 95       	ret

00000330 <spi_init>:
 330:	2a 9a       	sbi	0x05, 2	; 5
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
 332:	22 9a       	sbi	0x04, 2	; 4

    // Set SS as output pin
    ioport_set_pin_dir(SPI_HARDWARE_SS, IOPORT_DIR_OUTPUT);

    // Initialize as SPI master
    SPCR |= (1 << MSTR);
 334:	8c b5       	in	r24, 0x2c	; 44
 336:	80 61       	ori	r24, 0x10	; 16
 338:	8c bd       	out	0x2c, r24	; 44
    SPCR |= (1 << SPE);
 33a:	8c b5       	in	r24, 0x2c	; 44
 33c:	80 64       	ori	r24, 0x40	; 64
 33e:	8c bd       	out	0x2c, r24	; 44
 340:	25 9a       	sbi	0x04, 5	; 4
 342:	23 9a       	sbi	0x04, 3	; 4
    ioport_set_pin_dir(SPI_HARDWARE_MOSI, IOPORT_DIR_OUTPUT);

    // MISO pin is override to Input automatically
    //ioport_set_pin_dir(SPI_HARDWARE_MISO, IOPORT_DIR_INPUT);

    num_initialized = 0;
 344:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <__data_end+0x1>
 348:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <__data_end>
 34c:	08 95       	ret

0000034e <uart_putchar>:
/*
    Send character c down the UART Tx, wait until tx holding register
    is empty.
*/
int
uart_putchar(char c, FILE *stream) {
 34e:	cf 93       	push	r28
 350:	c8 2f       	mov	r28, r24

    if (c == '\a') {
 352:	87 30       	cpi	r24, 0x07	; 7
 354:	61 f4       	brne	.+24     	; 0x36e <uart_putchar+0x20>
        fputs("*ring*\n", stderr);
 356:	20 91 26 02 	lds	r18, 0x0226	; 0x800226 <__iob+0x4>
 35a:	30 91 27 02 	lds	r19, 0x0227	; 0x800227 <__iob+0x5>
 35e:	47 e0       	ldi	r20, 0x07	; 7
 360:	50 e0       	ldi	r21, 0x00	; 0
 362:	61 e0       	ldi	r22, 0x01	; 1
 364:	70 e0       	ldi	r23, 0x00	; 0
 366:	8c e5       	ldi	r24, 0x5C	; 92
 368:	91 e0       	ldi	r25, 0x01	; 1
 36a:	ca d1       	rcall	.+916    	; 0x700 <fwrite>
        return 0;
 36c:	0b c0       	rjmp	.+22     	; 0x384 <uart_putchar+0x36>
    }

    if (c == '\n') {
 36e:	8a 30       	cpi	r24, 0x0A	; 10
 370:	11 f4       	brne	.+4      	; 0x376 <uart_putchar+0x28>
        uart_putchar('\r', stream);
 372:	8d e0       	ldi	r24, 0x0D	; 13
 374:	ec df       	rcall	.-40     	; 0x34e <uart_putchar>
    }

    loop_until_bit_is_set(UCSR0A, UDRE0);
 376:	e0 ec       	ldi	r30, 0xC0	; 192
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	80 81       	ld	r24, Z
 37c:	85 ff       	sbrs	r24, 5
 37e:	fd cf       	rjmp	.-6      	; 0x37a <uart_putchar+0x2c>
    UDR0 = c;
 380:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>

    return 0;
}
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	cf 91       	pop	r28
 38a:	08 95       	ret

0000038c <uart_getchar>:

    Successive calls to uart_getchar() will be satisfied from the
    internal buffer until that buffer is emptied again.
*/
int
uart_getchar(FILE *stream) {
 38c:	6f 92       	push	r6
 38e:	7f 92       	push	r7
 390:	8f 92       	push	r8
 392:	9f 92       	push	r9
 394:	af 92       	push	r10
 396:	bf 92       	push	r11
 398:	cf 92       	push	r12
 39a:	df 92       	push	r13
 39c:	ef 92       	push	r14
 39e:	ff 92       	push	r15
 3a0:	0f 93       	push	r16
 3a2:	1f 93       	push	r17
 3a4:	cf 93       	push	r28
 3a6:	df 93       	push	r29
    uint8_t c;
    char *cp, *cp2;
    static char b[RX_BUFSIZE];
    static char *rxp;

    if (rxp == 0)
 3a8:	20 91 20 02 	lds	r18, 0x0220	; 0x800220 <rxp.2118>
 3ac:	30 91 21 02 	lds	r19, 0x0221	; 0x800221 <rxp.2118+0x1>
 3b0:	23 2b       	or	r18, r19
 3b2:	09 f0       	breq	.+2      	; 0x3b6 <uart_getchar+0x2a>
 3b4:	cc c0       	rjmp	.+408    	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
 3b6:	8c 01       	movw	r16, r24
 3b8:	0f 2e       	mov	r0, r31
 3ba:	f0 ed       	ldi	r31, 0xD0	; 208
 3bc:	8f 2e       	mov	r8, r31
 3be:	f1 e0       	ldi	r31, 0x01	; 1
 3c0:	9f 2e       	mov	r9, r31
 3c2:	f0 2d       	mov	r31, r0
        for (cp = b;;) {
            loop_until_bit_is_set(UCSR0A, RXC0);
 3c4:	c0 ec       	ldi	r28, 0xC0	; 192
 3c6:	d0 e0       	ldi	r29, 0x00	; 0

            if (UCSR0A & _BV(DOR0)) {
                return _FDEV_ERR;
            }

            c = UDR0;
 3c8:	0f 2e       	mov	r0, r31
 3ca:	f6 ec       	ldi	r31, 0xC6	; 198
 3cc:	cf 2e       	mov	r12, r31
 3ce:	d1 2c       	mov	r13, r1
 3d0:	f0 2d       	mov	r31, r0
 3d2:	54 01       	movw	r10, r8
 3d4:	0f 2e       	mov	r0, r31
 3d6:	ff ec       	ldi	r31, 0xCF	; 207
 3d8:	6f 2e       	mov	r6, r31
 3da:	f1 e0       	ldi	r31, 0x01	; 1
 3dc:	7f 2e       	mov	r7, r31
 3de:	f0 2d       	mov	r31, r0
    static char b[RX_BUFSIZE];
    static char *rxp;

    if (rxp == 0)
        for (cp = b;;) {
            loop_until_bit_is_set(UCSR0A, RXC0);
 3e0:	88 81       	ld	r24, Y
 3e2:	88 23       	and	r24, r24
 3e4:	ec f7       	brge	.-6      	; 0x3e0 <uart_getchar+0x54>

            if (UCSR0A & _BV(FE0)) {
 3e6:	88 81       	ld	r24, Y
 3e8:	84 fd       	sbrc	r24, 4
 3ea:	c4 c0       	rjmp	.+392    	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
                return _FDEV_EOF;
            }

            if (UCSR0A & _BV(DOR0)) {
 3ec:	88 81       	ld	r24, Y
 3ee:	83 fd       	sbrc	r24, 3
 3f0:	c4 c0       	rjmp	.+392    	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
                return _FDEV_ERR;
            }

            c = UDR0;
 3f2:	f6 01       	movw	r30, r12
 3f4:	80 81       	ld	r24, Z

            /* behaviour similar to Unix stty ICRNL */
            if (c == '\r') {
 3f6:	8d 30       	cpi	r24, 0x0D	; 13
 3f8:	11 f0       	breq	.+4      	; 0x3fe <uart_getchar+0x72>
                c = '\n';
            }

            if (c == '\n') {
 3fa:	8a 30       	cpi	r24, 0x0A	; 10
 3fc:	61 f4       	brne	.+24     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
                *cp = c;
 3fe:	8a e0       	ldi	r24, 0x0A	; 10
 400:	f4 01       	movw	r30, r8
 402:	80 83       	st	Z, r24
                uart_putchar(c, stream);
 404:	b8 01       	movw	r22, r16
 406:	a3 df       	rcall	.-186    	; 0x34e <uart_putchar>
                rxp = b;
 408:	80 ed       	ldi	r24, 0xD0	; 208
 40a:	91 e0       	ldi	r25, 0x01	; 1
 40c:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <rxp.2118+0x1>
 410:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <rxp.2118>
                break;
 414:	9c c0       	rjmp	.+312    	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
            }
            else if (c == '\t') {
 416:	89 30       	cpi	r24, 0x09	; 9
 418:	39 f0       	breq	.+14     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
                c = ' ';
            }

            if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
 41a:	90 ee       	ldi	r25, 0xE0	; 224
 41c:	98 0f       	add	r25, r24
 41e:	9f 35       	cpi	r25, 0x5F	; 95
 420:	20 f0       	brcs	.+8      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 422:	80 3a       	cpi	r24, 0xA0	; 160
 424:	a8 f0       	brcs	.+42     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 426:	01 c0       	rjmp	.+2      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
                uart_putchar(c, stream);
                rxp = b;
                break;
            }
            else if (c == '\t') {
                c = ' ';
 428:	80 e2       	ldi	r24, 0x20	; 32
            }

            if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
                    c >= (uint8_t)'\xa0') {
                if (cp == b + RX_BUFSIZE - 1) {
 42a:	ff e1       	ldi	r31, 0x1F	; 31
 42c:	8f 16       	cp	r8, r31
 42e:	f2 e0       	ldi	r31, 0x02	; 2
 430:	9f 06       	cpc	r9, r31
 432:	21 f4       	brne	.+8      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
                    uart_putchar('\a', stream);
 434:	b8 01       	movw	r22, r16
 436:	87 e0       	ldi	r24, 0x07	; 7
 438:	8a df       	rcall	.-236    	; 0x34e <uart_putchar>
 43a:	d2 cf       	rjmp	.-92     	; 0x3e0 <uart_getchar+0x54>
                }
                else {
                    *cp++ = c;
 43c:	74 01       	movw	r14, r8
 43e:	9f ef       	ldi	r25, 0xFF	; 255
 440:	e9 1a       	sub	r14, r25
 442:	f9 0a       	sbc	r15, r25
 444:	f4 01       	movw	r30, r8
                    uart_putchar(c, stream);
 446:	80 83       	st	Z, r24
 448:	b8 01       	movw	r22, r16
 44a:	81 df       	rcall	.-254    	; 0x34e <uart_putchar>
                    c >= (uint8_t)'\xa0') {
                if (cp == b + RX_BUFSIZE - 1) {
                    uart_putchar('\a', stream);
                }
                else {
                    *cp++ = c;
 44c:	47 01       	movw	r8, r14
 44e:	c8 cf       	rjmp	.-112    	; 0x3e0 <uart_getchar+0x54>
                }

                continue;
            }

            switch (c) {
 450:	82 31       	cpi	r24, 0x12	; 18
 452:	b9 f1       	breq	.+110    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 454:	30 f4       	brcc	.+12     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 456:	83 30       	cpi	r24, 0x03	; 3
 458:	09 f4       	brne	.+2      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 45a:	92 c0       	rjmp	.+292    	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
 45c:	88 30       	cpi	r24, 0x08	; 8
 45e:	e9 f0       	breq	.+58     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 460:	bf cf       	rjmp	.-130    	; 0x3e0 <uart_getchar+0x54>
 462:	87 31       	cpi	r24, 0x17	; 23
 464:	29 f0       	breq	.+10     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 466:	8f 37       	cpi	r24, 0x7F	; 127
 468:	c1 f0       	breq	.+48     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 46a:	85 31       	cpi	r24, 0x15	; 21
 46c:	79 f0       	breq	.+30     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 46e:	b8 cf       	rjmp	.-144    	; 0x3e0 <uart_getchar+0x54>
                }

                break;

            case 'w' & 0x1f:
                while (cp > b && cp[-1] != ' ') {
 470:	f0 ed       	ldi	r31, 0xD0	; 208
 472:	8f 16       	cp	r8, r31
 474:	f1 e0       	ldi	r31, 0x01	; 1
 476:	9f 06       	cpc	r9, r31
 478:	09 f0       	breq	.+2      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
 47a:	08 f4       	brcc	.+2      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 47c:	b1 cf       	rjmp	.-158    	; 0x3e0 <uart_getchar+0x54>
 47e:	f4 01       	movw	r30, r8
 480:	31 97       	sbiw	r30, 0x01	; 1
 482:	80 81       	ld	r24, Z
 484:	80 32       	cpi	r24, 0x20	; 32
 486:	09 f0       	breq	.+2      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 488:	4a c0       	rjmp	.+148    	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
 48a:	aa cf       	rjmp	.-172    	; 0x3e0 <uart_getchar+0x54>
                }

                break;

            case 'u' & 0x1f:
                while (cp > b) {
 48c:	80 ed       	ldi	r24, 0xD0	; 208
 48e:	88 16       	cp	r8, r24
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	98 06       	cpc	r9, r24
 494:	09 f0       	breq	.+2      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 496:	70 f5       	brcc	.+92     	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 498:	a3 cf       	rjmp	.-186    	; 0x3e0 <uart_getchar+0x54>
            case 'c' & 0x1f:
                return -1;

            case '\b':
            case '\x7f':
                if (cp > b) {
 49a:	90 ed       	ldi	r25, 0xD0	; 208
 49c:	89 16       	cp	r8, r25
 49e:	91 e0       	ldi	r25, 0x01	; 1
 4a0:	99 06       	cpc	r9, r25
 4a2:	09 f0       	breq	.+2      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 4a4:	08 f4       	brcc	.+2      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
                    uart_putchar('\b', stream);
 4a6:	9c cf       	rjmp	.-200    	; 0x3e0 <uart_getchar+0x54>
 4a8:	b8 01       	movw	r22, r16
 4aa:	88 e0       	ldi	r24, 0x08	; 8
                    uart_putchar(' ', stream);
 4ac:	50 df       	rcall	.-352    	; 0x34e <uart_putchar>
 4ae:	b8 01       	movw	r22, r16
 4b0:	80 e2       	ldi	r24, 0x20	; 32
                    uart_putchar('\b', stream);
 4b2:	4d df       	rcall	.-358    	; 0x34e <uart_putchar>
 4b4:	b8 01       	movw	r22, r16
 4b6:	88 e0       	ldi	r24, 0x08	; 8
 4b8:	4a df       	rcall	.-364    	; 0x34e <uart_putchar>
                    cp--;
 4ba:	e1 e0       	ldi	r30, 0x01	; 1
 4bc:	8e 1a       	sub	r8, r30
 4be:	91 08       	sbc	r9, r1
                }

                break;

            case 'r' & 0x1f:
                uart_putchar('\r', stream);
 4c0:	8f cf       	rjmp	.-226    	; 0x3e0 <uart_getchar+0x54>
 4c2:	b8 01       	movw	r22, r16
 4c4:	8d e0       	ldi	r24, 0x0D	; 13
 4c6:	43 df       	rcall	.-378    	; 0x34e <uart_putchar>

                for (cp2 = b; cp2 < cp; cp2++) {
 4c8:	f0 ed       	ldi	r31, 0xD0	; 208
 4ca:	8f 16       	cp	r8, r31
 4cc:	f1 e0       	ldi	r31, 0x01	; 1
 4ce:	9f 06       	cpc	r9, r31
 4d0:	09 f0       	breq	.+2      	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
 4d2:	08 f4       	brcc	.+2      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 4d4:	85 cf       	rjmp	.-246    	; 0x3e0 <uart_getchar+0x54>
 4d6:	0f 2e       	mov	r0, r31
 4d8:	f0 ed       	ldi	r31, 0xD0	; 208
 4da:	ef 2e       	mov	r14, r31
 4dc:	f1 e0       	ldi	r31, 0x01	; 1
 4de:	ff 2e       	mov	r15, r31
                    uart_putchar(*cp2, stream);
 4e0:	f0 2d       	mov	r31, r0
 4e2:	b8 01       	movw	r22, r16
 4e4:	f7 01       	movw	r30, r14
 4e6:	81 91       	ld	r24, Z+
 4e8:	7f 01       	movw	r14, r30
                break;

            case 'r' & 0x1f:
                uart_putchar('\r', stream);

                for (cp2 = b; cp2 < cp; cp2++) {
 4ea:	31 df       	rcall	.-414    	; 0x34e <uart_putchar>
 4ec:	8e 14       	cp	r8, r14
 4ee:	9f 04       	cpc	r9, r15

                break;

            case 'u' & 0x1f:
                while (cp > b) {
                    uart_putchar('\b', stream);
 4f0:	c1 f7       	brne	.-16     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 4f2:	76 cf       	rjmp	.-276    	; 0x3e0 <uart_getchar+0x54>
 4f4:	b8 01       	movw	r22, r16
                    uart_putchar(' ', stream);
 4f6:	88 e0       	ldi	r24, 0x08	; 8
 4f8:	2a df       	rcall	.-428    	; 0x34e <uart_putchar>
 4fa:	b8 01       	movw	r22, r16
 4fc:	80 e2       	ldi	r24, 0x20	; 32
                    uart_putchar('\b', stream);
 4fe:	27 df       	rcall	.-434    	; 0x34e <uart_putchar>
 500:	b8 01       	movw	r22, r16
 502:	88 e0       	ldi	r24, 0x08	; 8
 504:	24 df       	rcall	.-440    	; 0x34e <uart_putchar>
                    cp--;
 506:	f1 e0       	ldi	r31, 0x01	; 1
 508:	8f 1a       	sub	r8, r31
 50a:	91 08       	sbc	r9, r1
                }

                break;

            case 'u' & 0x1f:
                while (cp > b) {
 50c:	80 ed       	ldi	r24, 0xD0	; 208
 50e:	88 16       	cp	r8, r24
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	98 06       	cpc	r9, r24
 514:	79 f7       	brne	.-34     	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 516:	f3 01       	movw	r30, r6
 518:	31 96       	adiw	r30, 0x01	; 1
 51a:	4f 01       	movw	r8, r30
 51c:	61 cf       	rjmp	.-318    	; 0x3e0 <uart_getchar+0x54>
 51e:	74 01       	movw	r14, r8

                break;

            case 'w' & 0x1f:
                while (cp > b && cp[-1] != ' ') {
                    uart_putchar('\b', stream);
 520:	f1 e0       	ldi	r31, 0x01	; 1
 522:	ef 1a       	sub	r14, r31
 524:	f1 08       	sbc	r15, r1
 526:	b8 01       	movw	r22, r16
                    uart_putchar(' ', stream);
 528:	88 e0       	ldi	r24, 0x08	; 8
 52a:	11 df       	rcall	.-478    	; 0x34e <uart_putchar>
 52c:	b8 01       	movw	r22, r16
 52e:	80 e2       	ldi	r24, 0x20	; 32
                    uart_putchar('\b', stream);
 530:	0e df       	rcall	.-484    	; 0x34e <uart_putchar>
 532:	b8 01       	movw	r22, r16
 534:	88 e0       	ldi	r24, 0x08	; 8
 536:	0b df       	rcall	.-490    	; 0x34e <uart_putchar>
                    cp--;
 538:	47 01       	movw	r8, r14
                }

                break;

            case 'w' & 0x1f:
                while (cp > b && cp[-1] != ' ') {
 53a:	ae 14       	cp	r10, r14
 53c:	bf 04       	cpc	r11, r15
 53e:	09 f4       	brne	.+2      	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
 540:	4f cf       	rjmp	.-354    	; 0x3e0 <uart_getchar+0x54>
 542:	f7 01       	movw	r30, r14
 544:	82 91       	ld	r24, -Z
 546:	7f 01       	movw	r14, r30
 548:	80 32       	cpi	r24, 0x20	; 32
 54a:	69 f7       	brne	.-38     	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
 54c:	49 cf       	rjmp	.-366    	; 0x3e0 <uart_getchar+0x54>

                break;
            }
        }

    c = *rxp++;
 54e:	e0 91 20 02 	lds	r30, 0x0220	; 0x800220 <rxp.2118>
 552:	f0 91 21 02 	lds	r31, 0x0221	; 0x800221 <rxp.2118+0x1>
 556:	cf 01       	movw	r24, r30
 558:	01 96       	adiw	r24, 0x01	; 1
 55a:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <rxp.2118+0x1>
 55e:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <rxp.2118>
 562:	80 81       	ld	r24, Z

    if (c == '\n') {
 564:	8a 30       	cpi	r24, 0x0A	; 10
 566:	21 f4       	brne	.+8      	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
        rxp = 0;
 568:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <rxp.2118+0x1>
 56c:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <rxp.2118>
    }

    return c;
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	08 c0       	rjmp	.+16     	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
    if (rxp == 0)
        for (cp = b;;) {
            loop_until_bit_is_set(UCSR0A, RXC0);

            if (UCSR0A & _BV(FE0)) {
                return _FDEV_EOF;
 574:	8e ef       	ldi	r24, 0xFE	; 254
 576:	9f ef       	ldi	r25, 0xFF	; 255
 578:	05 c0       	rjmp	.+10     	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
            }

            if (UCSR0A & _BV(DOR0)) {
                return _FDEV_ERR;
 57a:	8f ef       	ldi	r24, 0xFF	; 255
 57c:	9f ef       	ldi	r25, 0xFF	; 255
 57e:	02 c0       	rjmp	.+4      	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
                continue;
            }

            switch (c) {
            case 'c' & 0x1f:
                return -1;
 580:	8f ef       	ldi	r24, 0xFF	; 255
 582:	9f ef       	ldi	r25, 0xFF	; 255
    if (c == '\n') {
        rxp = 0;
    }

    return c;
}
 584:	df 91       	pop	r29
 586:	cf 91       	pop	r28
 588:	1f 91       	pop	r17
 58a:	0f 91       	pop	r16
 58c:	ff 90       	pop	r15
 58e:	ef 90       	pop	r14
 590:	df 90       	pop	r13
 592:	cf 90       	pop	r12
 594:	bf 90       	pop	r11
 596:	af 90       	pop	r10
 598:	9f 90       	pop	r9
 59a:	8f 90       	pop	r8
 59c:	7f 90       	pop	r7
 59e:	6f 90       	pop	r6
 5a0:	08 95       	ret

000005a2 <uart_init>:
void uart_init(void) {
#if F_CPU < 2000000UL && defined(U2X)
    UCSRA = _BV(U2X);             /* improve baud rate error by using 2x clk */
    UBRRL = (F_CPU / (8UL * UART_BAUD)) - 1;
#else
    UBRR0H = (uint8_t) (MYUBRR >> 8);
 5a2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    UBRR0L = (uint8_t) MYUBRR;
 5a6:	80 e1       	ldi	r24, 0x10	; 16
 5a8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
#endif
    UCSR0B = (1 << RXEN0) | (1 << TXEN0); /* tx/rx enable */
 5ac:	88 e1       	ldi	r24, 0x18	; 24
 5ae:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    UCSR0C = (3 << UCSZ00);
 5b2:	86 e0       	ldi	r24, 0x06	; 6
 5b4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
    stdout = stdin = &usart0_str;
 5b8:	e2 e2       	ldi	r30, 0x22	; 34
 5ba:	f2 e0       	ldi	r31, 0x02	; 2
 5bc:	80 e0       	ldi	r24, 0x00	; 0
 5be:	91 e0       	ldi	r25, 0x01	; 1
 5c0:	91 83       	std	Z+1, r25	; 0x01
 5c2:	80 83       	st	Z, r24
 5c4:	93 83       	std	Z+3, r25	; 0x03
 5c6:	82 83       	std	Z+2, r24	; 0x02
 5c8:	08 95       	ret

000005ca <board_init>:
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
 5ca:	95 b1       	in	r25, 0x05	; 5
			*((uint8_t *)port + 2) &= ~pin_mask;
		}

		*((uint8_t *)port + 1) |= pin_mask;
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
 5cc:	84 b1       	in	r24, 0x04	; 4
 5ce:	80 62       	ori	r24, 0x20	; 32
 5d0:	8f 77       	andi	r24, 0x7F	; 127
 5d2:	84 b9       	out	0x04, r24	; 4
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
 5d4:	89 2f       	mov	r24, r25
 5d6:	80 6a       	ori	r24, 0xA0	; 160
 5d8:	85 b9       	out	0x05, r24	; 5
 5da:	08 95       	ret

000005dc <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
 5dc:	04 c0       	rjmp	.+8      	; 0x5e6 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
 5de:	61 50       	subi	r22, 0x01	; 1
 5e0:	71 09       	sbc	r23, r1
 5e2:	81 09       	sbc	r24, r1
 5e4:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
 5e6:	61 15       	cp	r22, r1
 5e8:	71 05       	cpc	r23, r1
 5ea:	81 05       	cpc	r24, r1
 5ec:	91 05       	cpc	r25, r1
 5ee:	b9 f7       	brne	.-18     	; 0x5de <__portable_avr_delay_cycles+0x2>
 5f0:	08 95       	ret

000005f2 <main>:
#include <stdlib.h>
#include <spi.h>
#include <uart.h>
#include <bmi160.h>

int main (void) {
 5f2:	cf 93       	push	r28
 5f4:	df 93       	push	r29
 5f6:	cd b7       	in	r28, 0x3d	; 61
 5f8:	de b7       	in	r29, 0x3e	; 62
 5fa:	2c 97       	sbiw	r28, 0x0c	; 12
 5fc:	0f b6       	in	r0, 0x3f	; 63
 5fe:	f8 94       	cli
 600:	de bf       	out	0x3e, r29	; 62
 602:	0f be       	out	0x3f, r0	; 63
 604:	cd bf       	out	0x3d, r28	; 61
    /* Insert system clock initialization code here (sysclk_init()). */
    board_init();
 606:	e1 df       	rcall	.-62     	; 0x5ca <board_init>

    uart_init();
 608:	cc df       	rcall	.-104    	; 0x5a2 <uart_init>
 60a:	84 e6       	ldi	r24, 0x64	; 100
    printf("------- Default testing -------\r\n\r\n");
 60c:	91 e0       	ldi	r25, 0x01	; 1
 60e:	bd d0       	rcall	.+378    	; 0x78a <puts>

    spi_init();
 610:	8f de       	rcall	.-738    	; 0x330 <spi_init>
 612:	80 e0       	ldi	r24, 0x00	; 0

    uint8_t sensorID = reg_read(BMI160_RA_CHIP_ID);
 614:	8b de       	rcall	.-746    	; 0x32c <reg_read>
 616:	1f 92       	push	r1
 618:	8f 93       	push	r24
    printf("Sensor id: 0x%x\r\n\r\n", sensorID);
 61a:	87 e8       	ldi	r24, 0x87	; 135
 61c:	91 e0       	ldi	r25, 0x01	; 1
 61e:	9f 93       	push	r25
 620:	8f 93       	push	r24
 622:	a0 d0       	rcall	.+320    	; 0x764 <printf>
 624:	0f 90       	pop	r0
 626:	0f 90       	pop	r0
 628:	0f 90       	pop	r0
 62a:	0f 90       	pop	r0
 62c:	0f 2e       	mov	r0, r31
 62e:	fb e9       	ldi	r31, 0x9B	; 155
        //uint8_t sensorID = reg_read(BMI160_RA_CHIP_ID);
        //printf("Sensor id: 0x%x\r\n", sensorID);

        read_gyro(&gxRaw, &gyRaw, &gzRaw);

        printf("gx: %d ", gxRaw);
 630:	8f 2e       	mov	r8, r31
 632:	f1 e0       	ldi	r31, 0x01	; 1
 634:	9f 2e       	mov	r9, r31
 636:	f0 2d       	mov	r31, r0
 638:	0f 2e       	mov	r0, r31
 63a:	f3 ea       	ldi	r31, 0xA3	; 163
        printf("gy: %d ", gyRaw);
 63c:	af 2e       	mov	r10, r31
 63e:	f1 e0       	ldi	r31, 0x01	; 1
 640:	bf 2e       	mov	r11, r31
 642:	f0 2d       	mov	r31, r0
 644:	0f 2e       	mov	r0, r31
 646:	fb ea       	ldi	r31, 0xAB	; 171
        printf("gx: %d\r\n", gzRaw);
 648:	cf 2e       	mov	r12, r31
 64a:	f1 e0       	ldi	r31, 0x01	; 1
 64c:	df 2e       	mov	r13, r31
 64e:	f0 2d       	mov	r31, r0
 650:	0f 2e       	mov	r0, r31
 652:	f4 eb       	ldi	r31, 0xB4	; 180


        read_accelerometer(&axRaw, &ayRaw, &azRaw);

        printf("ax: %d ", axRaw);
 654:	ef 2e       	mov	r14, r31
 656:	f1 e0       	ldi	r31, 0x01	; 1
 658:	ff 2e       	mov	r15, r31
 65a:	f0 2d       	mov	r31, r0
 65c:	0c eb       	ldi	r16, 0xBC	; 188
 65e:	11 e0       	ldi	r17, 0x01	; 1
        printf("ay: %d ", ayRaw);
 660:	0f 2e       	mov	r0, r31
 662:	f4 ec       	ldi	r31, 0xC4	; 196
        printf("ax: %d\r\n", azRaw);
 664:	6f 2e       	mov	r6, r31
 666:	f1 e0       	ldi	r31, 0x01	; 1
 668:	7f 2e       	mov	r7, r31
 66a:	f0 2d       	mov	r31, r0
 66c:	ae 01       	movw	r20, r28
 66e:	4b 5f       	subi	r20, 0xFB	; 251

    while (1) {
        //uint8_t sensorID = reg_read(BMI160_RA_CHIP_ID);
        //printf("Sensor id: 0x%x\r\n", sensorID);

        read_gyro(&gxRaw, &gyRaw, &gzRaw);
 670:	5f 4f       	sbci	r21, 0xFF	; 255
 672:	be 01       	movw	r22, r28
 674:	6d 5f       	subi	r22, 0xFD	; 253
 676:	7f 4f       	sbci	r23, 0xFF	; 255
 678:	ce 01       	movw	r24, r28
 67a:	01 96       	adiw	r24, 0x01	; 1
 67c:	5c dd       	rcall	.-1352   	; 0x136 <read_gyro>
 67e:	8a 81       	ldd	r24, Y+2	; 0x02
 680:	8f 93       	push	r24

        printf("gx: %d ", gxRaw);
 682:	89 81       	ldd	r24, Y+1	; 0x01
 684:	8f 93       	push	r24
 686:	9f 92       	push	r9
 688:	8f 92       	push	r8
 68a:	6c d0       	rcall	.+216    	; 0x764 <printf>
 68c:	8c 81       	ldd	r24, Y+4	; 0x04
 68e:	8f 93       	push	r24
        printf("gy: %d ", gyRaw);
 690:	8b 81       	ldd	r24, Y+3	; 0x03
 692:	8f 93       	push	r24
 694:	bf 92       	push	r11
 696:	af 92       	push	r10
 698:	65 d0       	rcall	.+202    	; 0x764 <printf>
 69a:	8e 81       	ldd	r24, Y+6	; 0x06
 69c:	8f 93       	push	r24
        printf("gx: %d\r\n", gzRaw);
 69e:	8d 81       	ldd	r24, Y+5	; 0x05
 6a0:	8f 93       	push	r24
 6a2:	df 92       	push	r13
 6a4:	cf 92       	push	r12
 6a6:	5e d0       	rcall	.+188    	; 0x764 <printf>
 6a8:	ae 01       	movw	r20, r28
 6aa:	45 5f       	subi	r20, 0xF5	; 245


        read_accelerometer(&axRaw, &ayRaw, &azRaw);
 6ac:	5f 4f       	sbci	r21, 0xFF	; 255
 6ae:	be 01       	movw	r22, r28
 6b0:	67 5f       	subi	r22, 0xF7	; 247
 6b2:	7f 4f       	sbci	r23, 0xFF	; 255
 6b4:	ce 01       	movw	r24, r28
 6b6:	07 96       	adiw	r24, 0x07	; 7
 6b8:	02 de       	rcall	.-1020   	; 0x2be <read_accelerometer>
 6ba:	88 85       	ldd	r24, Y+8	; 0x08
 6bc:	8f 93       	push	r24

        printf("ax: %d ", axRaw);
 6be:	8f 81       	ldd	r24, Y+7	; 0x07
 6c0:	8f 93       	push	r24
 6c2:	ff 92       	push	r15
 6c4:	ef 92       	push	r14
 6c6:	4e d0       	rcall	.+156    	; 0x764 <printf>
 6c8:	8a 85       	ldd	r24, Y+10	; 0x0a
 6ca:	8f 93       	push	r24
        printf("ay: %d ", ayRaw);
 6cc:	89 85       	ldd	r24, Y+9	; 0x09
 6ce:	8f 93       	push	r24
 6d0:	1f 93       	push	r17
 6d2:	0f 93       	push	r16
 6d4:	47 d0       	rcall	.+142    	; 0x764 <printf>
 6d6:	8c 85       	ldd	r24, Y+12	; 0x0c
        printf("ax: %d\r\n", azRaw);
 6d8:	8f 93       	push	r24
 6da:	8b 85       	ldd	r24, Y+11	; 0x0b
 6dc:	8f 93       	push	r24
 6de:	7f 92       	push	r7
 6e0:	6f 92       	push	r6
 6e2:	40 d0       	rcall	.+128    	; 0x764 <printf>
 6e4:	85 e8       	ldi	r24, 0x85	; 133

        printf("\r\n");
 6e6:	91 e0       	ldi	r25, 0x01	; 1
 6e8:	50 d0       	rcall	.+160    	; 0x78a <puts>
 6ea:	66 e5       	ldi	r22, 0x56	; 86
 6ec:	78 e5       	ldi	r23, 0x58	; 88
        delay_ms(8000);
 6ee:	84 e1       	ldi	r24, 0x14	; 20
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	74 df       	rcall	.-280    	; 0x5dc <__portable_avr_delay_cycles>
 6f4:	0f b6       	in	r0, 0x3f	; 63
 6f6:	f8 94       	cli
 6f8:	de bf       	out	0x3e, r29	; 62
 6fa:	0f be       	out	0x3f, r0	; 63
 6fc:	cd bf       	out	0x3d, r28	; 61
 6fe:	b6 cf       	rjmp	.-148    	; 0x66c <main+0x7a>

00000700 <fwrite>:
 700:	a0 e0       	ldi	r26, 0x00	; 0
 702:	b0 e0       	ldi	r27, 0x00	; 0
 704:	e5 e8       	ldi	r30, 0x85	; 133
 706:	f3 e0       	ldi	r31, 0x03	; 3
 708:	f8 c2       	rjmp	.+1520   	; 0xcfa <__prologue_saves__+0xc>
 70a:	5b 01       	movw	r10, r22
 70c:	4a 01       	movw	r8, r20
 70e:	79 01       	movw	r14, r18
 710:	d9 01       	movw	r26, r18
 712:	13 96       	adiw	r26, 0x03	; 3
 714:	2c 91       	ld	r18, X
 716:	21 ff       	sbrs	r18, 1
 718:	1d c0       	rjmp	.+58     	; 0x754 <fwrite+0x54>
 71a:	c0 e0       	ldi	r28, 0x00	; 0
 71c:	d0 e0       	ldi	r29, 0x00	; 0
 71e:	c8 15       	cp	r28, r8
 720:	d9 05       	cpc	r29, r9
 722:	d9 f0       	breq	.+54     	; 0x75a <fwrite+0x5a>
 724:	8c 01       	movw	r16, r24
 726:	6c 01       	movw	r12, r24
 728:	ca 0c       	add	r12, r10
 72a:	db 1c       	adc	r13, r11
 72c:	c8 01       	movw	r24, r16
 72e:	0c 15       	cp	r16, r12
 730:	1d 05       	cpc	r17, r13
 732:	71 f0       	breq	.+28     	; 0x750 <fwrite+0x50>
 734:	0f 5f       	subi	r16, 0xFF	; 255
 736:	1f 4f       	sbci	r17, 0xFF	; 255
 738:	d7 01       	movw	r26, r14
 73a:	18 96       	adiw	r26, 0x08	; 8
 73c:	ed 91       	ld	r30, X+
 73e:	fc 91       	ld	r31, X
 740:	19 97       	sbiw	r26, 0x09	; 9
 742:	b7 01       	movw	r22, r14
 744:	dc 01       	movw	r26, r24
 746:	8c 91       	ld	r24, X
 748:	09 95       	icall
 74a:	89 2b       	or	r24, r25
 74c:	79 f3       	breq	.-34     	; 0x72c <fwrite+0x2c>
 74e:	05 c0       	rjmp	.+10     	; 0x75a <fwrite+0x5a>
 750:	21 96       	adiw	r28, 0x01	; 1
 752:	e5 cf       	rjmp	.-54     	; 0x71e <fwrite+0x1e>
 754:	80 e0       	ldi	r24, 0x00	; 0
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	01 c0       	rjmp	.+2      	; 0x75c <fwrite+0x5c>
 75a:	ce 01       	movw	r24, r28
 75c:	cd b7       	in	r28, 0x3d	; 61
 75e:	de b7       	in	r29, 0x3e	; 62
 760:	ec e0       	ldi	r30, 0x0C	; 12
 762:	e7 c2       	rjmp	.+1486   	; 0xd32 <__epilogue_restores__+0xc>

00000764 <printf>:
 764:	a0 e0       	ldi	r26, 0x00	; 0
 766:	b0 e0       	ldi	r27, 0x00	; 0
 768:	e7 eb       	ldi	r30, 0xB7	; 183
 76a:	f3 e0       	ldi	r31, 0x03	; 3
 76c:	d0 c2       	rjmp	.+1440   	; 0xd0e <__prologue_saves__+0x20>
 76e:	ae 01       	movw	r20, r28
 770:	4b 5f       	subi	r20, 0xFB	; 251
 772:	5f 4f       	sbci	r21, 0xFF	; 255
 774:	fa 01       	movw	r30, r20
 776:	61 91       	ld	r22, Z+
 778:	71 91       	ld	r23, Z+
 77a:	af 01       	movw	r20, r30
 77c:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <__iob+0x2>
 780:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <__iob+0x3>
 784:	32 d0       	rcall	.+100    	; 0x7ea <vfprintf>
 786:	e2 e0       	ldi	r30, 0x02	; 2
 788:	de c2       	rjmp	.+1468   	; 0xd46 <__epilogue_restores__+0x20>

0000078a <puts>:
 78a:	0f 93       	push	r16
 78c:	1f 93       	push	r17
 78e:	cf 93       	push	r28
 790:	df 93       	push	r29
 792:	e0 91 24 02 	lds	r30, 0x0224	; 0x800224 <__iob+0x2>
 796:	f0 91 25 02 	lds	r31, 0x0225	; 0x800225 <__iob+0x3>
 79a:	23 81       	ldd	r18, Z+3	; 0x03
 79c:	21 ff       	sbrs	r18, 1
 79e:	1b c0       	rjmp	.+54     	; 0x7d6 <puts+0x4c>
 7a0:	8c 01       	movw	r16, r24
 7a2:	d0 e0       	ldi	r29, 0x00	; 0
 7a4:	c0 e0       	ldi	r28, 0x00	; 0
 7a6:	f8 01       	movw	r30, r16
 7a8:	81 91       	ld	r24, Z+
 7aa:	8f 01       	movw	r16, r30
 7ac:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <__iob+0x2>
 7b0:	70 91 25 02 	lds	r23, 0x0225	; 0x800225 <__iob+0x3>
 7b4:	db 01       	movw	r26, r22
 7b6:	18 96       	adiw	r26, 0x08	; 8
 7b8:	ed 91       	ld	r30, X+
 7ba:	fc 91       	ld	r31, X
 7bc:	19 97       	sbiw	r26, 0x09	; 9
 7be:	88 23       	and	r24, r24
 7c0:	31 f0       	breq	.+12     	; 0x7ce <puts+0x44>
 7c2:	09 95       	icall
 7c4:	89 2b       	or	r24, r25
 7c6:	79 f3       	breq	.-34     	; 0x7a6 <puts+0x1c>
 7c8:	df ef       	ldi	r29, 0xFF	; 255
 7ca:	cf ef       	ldi	r28, 0xFF	; 255
 7cc:	ec cf       	rjmp	.-40     	; 0x7a6 <puts+0x1c>
 7ce:	8a e0       	ldi	r24, 0x0A	; 10
 7d0:	09 95       	icall
 7d2:	89 2b       	or	r24, r25
 7d4:	19 f0       	breq	.+6      	; 0x7dc <puts+0x52>
 7d6:	8f ef       	ldi	r24, 0xFF	; 255
 7d8:	9f ef       	ldi	r25, 0xFF	; 255
 7da:	02 c0       	rjmp	.+4      	; 0x7e0 <puts+0x56>
 7dc:	8d 2f       	mov	r24, r29
 7de:	9c 2f       	mov	r25, r28
 7e0:	df 91       	pop	r29
 7e2:	cf 91       	pop	r28
 7e4:	1f 91       	pop	r17
 7e6:	0f 91       	pop	r16
 7e8:	08 95       	ret

000007ea <vfprintf>:
 7ea:	ab e0       	ldi	r26, 0x0B	; 11
 7ec:	b0 e0       	ldi	r27, 0x00	; 0
 7ee:	ea ef       	ldi	r30, 0xFA	; 250
 7f0:	f3 e0       	ldi	r31, 0x03	; 3
 7f2:	7d c2       	rjmp	.+1274   	; 0xcee <__prologue_saves__>
 7f4:	6c 01       	movw	r12, r24
 7f6:	7b 01       	movw	r14, r22
 7f8:	8a 01       	movw	r16, r20
 7fa:	fc 01       	movw	r30, r24
 7fc:	17 82       	std	Z+7, r1	; 0x07
 7fe:	16 82       	std	Z+6, r1	; 0x06
 800:	83 81       	ldd	r24, Z+3	; 0x03
 802:	81 ff       	sbrs	r24, 1
 804:	bf c1       	rjmp	.+894    	; 0xb84 <__stack+0x285>
 806:	ce 01       	movw	r24, r28
 808:	01 96       	adiw	r24, 0x01	; 1
 80a:	3c 01       	movw	r6, r24
 80c:	f6 01       	movw	r30, r12
 80e:	93 81       	ldd	r25, Z+3	; 0x03
 810:	f7 01       	movw	r30, r14
 812:	93 fd       	sbrc	r25, 3
 814:	85 91       	lpm	r24, Z+
 816:	93 ff       	sbrs	r25, 3
 818:	81 91       	ld	r24, Z+
 81a:	7f 01       	movw	r14, r30
 81c:	88 23       	and	r24, r24
 81e:	09 f4       	brne	.+2      	; 0x822 <vfprintf+0x38>
 820:	ad c1       	rjmp	.+858    	; 0xb7c <__stack+0x27d>
 822:	85 32       	cpi	r24, 0x25	; 37
 824:	39 f4       	brne	.+14     	; 0x834 <vfprintf+0x4a>
 826:	93 fd       	sbrc	r25, 3
 828:	85 91       	lpm	r24, Z+
 82a:	93 ff       	sbrs	r25, 3
 82c:	81 91       	ld	r24, Z+
 82e:	7f 01       	movw	r14, r30
 830:	85 32       	cpi	r24, 0x25	; 37
 832:	21 f4       	brne	.+8      	; 0x83c <vfprintf+0x52>
 834:	b6 01       	movw	r22, r12
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	c0 d1       	rcall	.+896    	; 0xbba <fputc>
 83a:	e8 cf       	rjmp	.-48     	; 0x80c <vfprintf+0x22>
 83c:	91 2c       	mov	r9, r1
 83e:	21 2c       	mov	r2, r1
 840:	31 2c       	mov	r3, r1
 842:	ff e1       	ldi	r31, 0x1F	; 31
 844:	f3 15       	cp	r31, r3
 846:	d8 f0       	brcs	.+54     	; 0x87e <vfprintf+0x94>
 848:	8b 32       	cpi	r24, 0x2B	; 43
 84a:	79 f0       	breq	.+30     	; 0x86a <vfprintf+0x80>
 84c:	38 f4       	brcc	.+14     	; 0x85c <vfprintf+0x72>
 84e:	80 32       	cpi	r24, 0x20	; 32
 850:	79 f0       	breq	.+30     	; 0x870 <vfprintf+0x86>
 852:	83 32       	cpi	r24, 0x23	; 35
 854:	a1 f4       	brne	.+40     	; 0x87e <vfprintf+0x94>
 856:	23 2d       	mov	r18, r3
 858:	20 61       	ori	r18, 0x10	; 16
 85a:	1d c0       	rjmp	.+58     	; 0x896 <vfprintf+0xac>
 85c:	8d 32       	cpi	r24, 0x2D	; 45
 85e:	61 f0       	breq	.+24     	; 0x878 <vfprintf+0x8e>
 860:	80 33       	cpi	r24, 0x30	; 48
 862:	69 f4       	brne	.+26     	; 0x87e <vfprintf+0x94>
 864:	23 2d       	mov	r18, r3
 866:	21 60       	ori	r18, 0x01	; 1
 868:	16 c0       	rjmp	.+44     	; 0x896 <vfprintf+0xac>
 86a:	83 2d       	mov	r24, r3
 86c:	82 60       	ori	r24, 0x02	; 2
 86e:	38 2e       	mov	r3, r24
 870:	e3 2d       	mov	r30, r3
 872:	e4 60       	ori	r30, 0x04	; 4
 874:	3e 2e       	mov	r3, r30
 876:	2a c0       	rjmp	.+84     	; 0x8cc <vfprintf+0xe2>
 878:	f3 2d       	mov	r31, r3
 87a:	f8 60       	ori	r31, 0x08	; 8
 87c:	1d c0       	rjmp	.+58     	; 0x8b8 <vfprintf+0xce>
 87e:	37 fc       	sbrc	r3, 7
 880:	2d c0       	rjmp	.+90     	; 0x8dc <vfprintf+0xf2>
 882:	20 ed       	ldi	r18, 0xD0	; 208
 884:	28 0f       	add	r18, r24
 886:	2a 30       	cpi	r18, 0x0A	; 10
 888:	40 f0       	brcs	.+16     	; 0x89a <vfprintf+0xb0>
 88a:	8e 32       	cpi	r24, 0x2E	; 46
 88c:	b9 f4       	brne	.+46     	; 0x8bc <vfprintf+0xd2>
 88e:	36 fc       	sbrc	r3, 6
 890:	75 c1       	rjmp	.+746    	; 0xb7c <__stack+0x27d>
 892:	23 2d       	mov	r18, r3
 894:	20 64       	ori	r18, 0x40	; 64
 896:	32 2e       	mov	r3, r18
 898:	19 c0       	rjmp	.+50     	; 0x8cc <vfprintf+0xe2>
 89a:	36 fe       	sbrs	r3, 6
 89c:	06 c0       	rjmp	.+12     	; 0x8aa <vfprintf+0xc0>
 89e:	8a e0       	ldi	r24, 0x0A	; 10
 8a0:	98 9e       	mul	r9, r24
 8a2:	20 0d       	add	r18, r0
 8a4:	11 24       	eor	r1, r1
 8a6:	92 2e       	mov	r9, r18
 8a8:	11 c0       	rjmp	.+34     	; 0x8cc <vfprintf+0xe2>
 8aa:	ea e0       	ldi	r30, 0x0A	; 10
 8ac:	2e 9e       	mul	r2, r30
 8ae:	20 0d       	add	r18, r0
 8b0:	11 24       	eor	r1, r1
 8b2:	22 2e       	mov	r2, r18
 8b4:	f3 2d       	mov	r31, r3
 8b6:	f0 62       	ori	r31, 0x20	; 32
 8b8:	3f 2e       	mov	r3, r31
 8ba:	08 c0       	rjmp	.+16     	; 0x8cc <vfprintf+0xe2>
 8bc:	8c 36       	cpi	r24, 0x6C	; 108
 8be:	21 f4       	brne	.+8      	; 0x8c8 <vfprintf+0xde>
 8c0:	83 2d       	mov	r24, r3
 8c2:	80 68       	ori	r24, 0x80	; 128
 8c4:	38 2e       	mov	r3, r24
 8c6:	02 c0       	rjmp	.+4      	; 0x8cc <vfprintf+0xe2>
 8c8:	88 36       	cpi	r24, 0x68	; 104
 8ca:	41 f4       	brne	.+16     	; 0x8dc <vfprintf+0xf2>
 8cc:	f7 01       	movw	r30, r14
 8ce:	93 fd       	sbrc	r25, 3
 8d0:	85 91       	lpm	r24, Z+
 8d2:	93 ff       	sbrs	r25, 3
 8d4:	81 91       	ld	r24, Z+
 8d6:	7f 01       	movw	r14, r30
 8d8:	81 11       	cpse	r24, r1
 8da:	b3 cf       	rjmp	.-154    	; 0x842 <vfprintf+0x58>
 8dc:	98 2f       	mov	r25, r24
 8de:	9f 7d       	andi	r25, 0xDF	; 223
 8e0:	95 54       	subi	r25, 0x45	; 69
 8e2:	93 30       	cpi	r25, 0x03	; 3
 8e4:	28 f4       	brcc	.+10     	; 0x8f0 <vfprintf+0x106>
 8e6:	0c 5f       	subi	r16, 0xFC	; 252
 8e8:	1f 4f       	sbci	r17, 0xFF	; 255
 8ea:	9f e3       	ldi	r25, 0x3F	; 63
 8ec:	99 83       	std	Y+1, r25	; 0x01
 8ee:	0d c0       	rjmp	.+26     	; 0x90a <__stack+0xb>
 8f0:	83 36       	cpi	r24, 0x63	; 99
 8f2:	31 f0       	breq	.+12     	; 0x900 <__stack+0x1>
 8f4:	83 37       	cpi	r24, 0x73	; 115
 8f6:	71 f0       	breq	.+28     	; 0x914 <__stack+0x15>
 8f8:	83 35       	cpi	r24, 0x53	; 83
 8fa:	09 f0       	breq	.+2      	; 0x8fe <vfprintf+0x114>
 8fc:	55 c0       	rjmp	.+170    	; 0x9a8 <__stack+0xa9>
 8fe:	20 c0       	rjmp	.+64     	; 0x940 <__stack+0x41>
 900:	f8 01       	movw	r30, r16
 902:	80 81       	ld	r24, Z
 904:	89 83       	std	Y+1, r24	; 0x01
 906:	0e 5f       	subi	r16, 0xFE	; 254
 908:	1f 4f       	sbci	r17, 0xFF	; 255
 90a:	88 24       	eor	r8, r8
 90c:	83 94       	inc	r8
 90e:	91 2c       	mov	r9, r1
 910:	53 01       	movw	r10, r6
 912:	12 c0       	rjmp	.+36     	; 0x938 <__stack+0x39>
 914:	28 01       	movw	r4, r16
 916:	f2 e0       	ldi	r31, 0x02	; 2
 918:	4f 0e       	add	r4, r31
 91a:	51 1c       	adc	r5, r1
 91c:	f8 01       	movw	r30, r16
 91e:	a0 80       	ld	r10, Z
 920:	b1 80       	ldd	r11, Z+1	; 0x01
 922:	36 fe       	sbrs	r3, 6
 924:	03 c0       	rjmp	.+6      	; 0x92c <__stack+0x2d>
 926:	69 2d       	mov	r22, r9
 928:	70 e0       	ldi	r23, 0x00	; 0
 92a:	02 c0       	rjmp	.+4      	; 0x930 <__stack+0x31>
 92c:	6f ef       	ldi	r22, 0xFF	; 255
 92e:	7f ef       	ldi	r23, 0xFF	; 255
 930:	c5 01       	movw	r24, r10
 932:	38 d1       	rcall	.+624    	; 0xba4 <strnlen>
 934:	4c 01       	movw	r8, r24
 936:	82 01       	movw	r16, r4
 938:	f3 2d       	mov	r31, r3
 93a:	ff 77       	andi	r31, 0x7F	; 127
 93c:	3f 2e       	mov	r3, r31
 93e:	15 c0       	rjmp	.+42     	; 0x96a <__stack+0x6b>
 940:	28 01       	movw	r4, r16
 942:	22 e0       	ldi	r18, 0x02	; 2
 944:	42 0e       	add	r4, r18
 946:	51 1c       	adc	r5, r1
 948:	f8 01       	movw	r30, r16
 94a:	a0 80       	ld	r10, Z
 94c:	b1 80       	ldd	r11, Z+1	; 0x01
 94e:	36 fe       	sbrs	r3, 6
 950:	03 c0       	rjmp	.+6      	; 0x958 <__stack+0x59>
 952:	69 2d       	mov	r22, r9
 954:	70 e0       	ldi	r23, 0x00	; 0
 956:	02 c0       	rjmp	.+4      	; 0x95c <__stack+0x5d>
 958:	6f ef       	ldi	r22, 0xFF	; 255
 95a:	7f ef       	ldi	r23, 0xFF	; 255
 95c:	c5 01       	movw	r24, r10
 95e:	17 d1       	rcall	.+558    	; 0xb8e <strnlen_P>
 960:	4c 01       	movw	r8, r24
 962:	f3 2d       	mov	r31, r3
 964:	f0 68       	ori	r31, 0x80	; 128
 966:	3f 2e       	mov	r3, r31
 968:	82 01       	movw	r16, r4
 96a:	33 fc       	sbrc	r3, 3
 96c:	19 c0       	rjmp	.+50     	; 0x9a0 <__stack+0xa1>
 96e:	82 2d       	mov	r24, r2
 970:	90 e0       	ldi	r25, 0x00	; 0
 972:	88 16       	cp	r8, r24
 974:	99 06       	cpc	r9, r25
 976:	a0 f4       	brcc	.+40     	; 0x9a0 <__stack+0xa1>
 978:	b6 01       	movw	r22, r12
 97a:	80 e2       	ldi	r24, 0x20	; 32
 97c:	90 e0       	ldi	r25, 0x00	; 0
 97e:	1d d1       	rcall	.+570    	; 0xbba <fputc>
 980:	2a 94       	dec	r2
 982:	f5 cf       	rjmp	.-22     	; 0x96e <__stack+0x6f>
 984:	f5 01       	movw	r30, r10
 986:	37 fc       	sbrc	r3, 7
 988:	85 91       	lpm	r24, Z+
 98a:	37 fe       	sbrs	r3, 7
 98c:	81 91       	ld	r24, Z+
 98e:	5f 01       	movw	r10, r30
 990:	b6 01       	movw	r22, r12
 992:	90 e0       	ldi	r25, 0x00	; 0
 994:	12 d1       	rcall	.+548    	; 0xbba <fputc>
 996:	21 10       	cpse	r2, r1
 998:	2a 94       	dec	r2
 99a:	21 e0       	ldi	r18, 0x01	; 1
 99c:	82 1a       	sub	r8, r18
 99e:	91 08       	sbc	r9, r1
 9a0:	81 14       	cp	r8, r1
 9a2:	91 04       	cpc	r9, r1
 9a4:	79 f7       	brne	.-34     	; 0x984 <__stack+0x85>
 9a6:	e1 c0       	rjmp	.+450    	; 0xb6a <__stack+0x26b>
 9a8:	84 36       	cpi	r24, 0x64	; 100
 9aa:	11 f0       	breq	.+4      	; 0x9b0 <__stack+0xb1>
 9ac:	89 36       	cpi	r24, 0x69	; 105
 9ae:	39 f5       	brne	.+78     	; 0x9fe <__stack+0xff>
 9b0:	f8 01       	movw	r30, r16
 9b2:	37 fe       	sbrs	r3, 7
 9b4:	07 c0       	rjmp	.+14     	; 0x9c4 <__stack+0xc5>
 9b6:	60 81       	ld	r22, Z
 9b8:	71 81       	ldd	r23, Z+1	; 0x01
 9ba:	82 81       	ldd	r24, Z+2	; 0x02
 9bc:	93 81       	ldd	r25, Z+3	; 0x03
 9be:	0c 5f       	subi	r16, 0xFC	; 252
 9c0:	1f 4f       	sbci	r17, 0xFF	; 255
 9c2:	08 c0       	rjmp	.+16     	; 0x9d4 <__stack+0xd5>
 9c4:	60 81       	ld	r22, Z
 9c6:	71 81       	ldd	r23, Z+1	; 0x01
 9c8:	07 2e       	mov	r0, r23
 9ca:	00 0c       	add	r0, r0
 9cc:	88 0b       	sbc	r24, r24
 9ce:	99 0b       	sbc	r25, r25
 9d0:	0e 5f       	subi	r16, 0xFE	; 254
 9d2:	1f 4f       	sbci	r17, 0xFF	; 255
 9d4:	f3 2d       	mov	r31, r3
 9d6:	ff 76       	andi	r31, 0x6F	; 111
 9d8:	3f 2e       	mov	r3, r31
 9da:	97 ff       	sbrs	r25, 7
 9dc:	09 c0       	rjmp	.+18     	; 0x9f0 <__stack+0xf1>
 9de:	90 95       	com	r25
 9e0:	80 95       	com	r24
 9e2:	70 95       	com	r23
 9e4:	61 95       	neg	r22
 9e6:	7f 4f       	sbci	r23, 0xFF	; 255
 9e8:	8f 4f       	sbci	r24, 0xFF	; 255
 9ea:	9f 4f       	sbci	r25, 0xFF	; 255
 9ec:	f0 68       	ori	r31, 0x80	; 128
 9ee:	3f 2e       	mov	r3, r31
 9f0:	2a e0       	ldi	r18, 0x0A	; 10
 9f2:	30 e0       	ldi	r19, 0x00	; 0
 9f4:	a3 01       	movw	r20, r6
 9f6:	1d d1       	rcall	.+570    	; 0xc32 <__ultoa_invert>
 9f8:	88 2e       	mov	r8, r24
 9fa:	86 18       	sub	r8, r6
 9fc:	44 c0       	rjmp	.+136    	; 0xa86 <__stack+0x187>
 9fe:	85 37       	cpi	r24, 0x75	; 117
 a00:	31 f4       	brne	.+12     	; 0xa0e <__stack+0x10f>
 a02:	23 2d       	mov	r18, r3
 a04:	2f 7e       	andi	r18, 0xEF	; 239
 a06:	b2 2e       	mov	r11, r18
 a08:	2a e0       	ldi	r18, 0x0A	; 10
 a0a:	30 e0       	ldi	r19, 0x00	; 0
 a0c:	25 c0       	rjmp	.+74     	; 0xa58 <__stack+0x159>
 a0e:	93 2d       	mov	r25, r3
 a10:	99 7f       	andi	r25, 0xF9	; 249
 a12:	b9 2e       	mov	r11, r25
 a14:	8f 36       	cpi	r24, 0x6F	; 111
 a16:	c1 f0       	breq	.+48     	; 0xa48 <__stack+0x149>
 a18:	18 f4       	brcc	.+6      	; 0xa20 <__stack+0x121>
 a1a:	88 35       	cpi	r24, 0x58	; 88
 a1c:	79 f0       	breq	.+30     	; 0xa3c <__stack+0x13d>
 a1e:	ae c0       	rjmp	.+348    	; 0xb7c <__stack+0x27d>
 a20:	80 37       	cpi	r24, 0x70	; 112
 a22:	19 f0       	breq	.+6      	; 0xa2a <__stack+0x12b>
 a24:	88 37       	cpi	r24, 0x78	; 120
 a26:	21 f0       	breq	.+8      	; 0xa30 <__stack+0x131>
 a28:	a9 c0       	rjmp	.+338    	; 0xb7c <__stack+0x27d>
 a2a:	e9 2f       	mov	r30, r25
 a2c:	e0 61       	ori	r30, 0x10	; 16
 a2e:	be 2e       	mov	r11, r30
 a30:	b4 fe       	sbrs	r11, 4
 a32:	0d c0       	rjmp	.+26     	; 0xa4e <__stack+0x14f>
 a34:	fb 2d       	mov	r31, r11
 a36:	f4 60       	ori	r31, 0x04	; 4
 a38:	bf 2e       	mov	r11, r31
 a3a:	09 c0       	rjmp	.+18     	; 0xa4e <__stack+0x14f>
 a3c:	34 fe       	sbrs	r3, 4
 a3e:	0a c0       	rjmp	.+20     	; 0xa54 <__stack+0x155>
 a40:	29 2f       	mov	r18, r25
 a42:	26 60       	ori	r18, 0x06	; 6
 a44:	b2 2e       	mov	r11, r18
 a46:	06 c0       	rjmp	.+12     	; 0xa54 <__stack+0x155>
 a48:	28 e0       	ldi	r18, 0x08	; 8
 a4a:	30 e0       	ldi	r19, 0x00	; 0
 a4c:	05 c0       	rjmp	.+10     	; 0xa58 <__stack+0x159>
 a4e:	20 e1       	ldi	r18, 0x10	; 16
 a50:	30 e0       	ldi	r19, 0x00	; 0
 a52:	02 c0       	rjmp	.+4      	; 0xa58 <__stack+0x159>
 a54:	20 e1       	ldi	r18, 0x10	; 16
 a56:	32 e0       	ldi	r19, 0x02	; 2
 a58:	f8 01       	movw	r30, r16
 a5a:	b7 fe       	sbrs	r11, 7
 a5c:	07 c0       	rjmp	.+14     	; 0xa6c <__stack+0x16d>
 a5e:	60 81       	ld	r22, Z
 a60:	71 81       	ldd	r23, Z+1	; 0x01
 a62:	82 81       	ldd	r24, Z+2	; 0x02
 a64:	93 81       	ldd	r25, Z+3	; 0x03
 a66:	0c 5f       	subi	r16, 0xFC	; 252
 a68:	1f 4f       	sbci	r17, 0xFF	; 255
 a6a:	06 c0       	rjmp	.+12     	; 0xa78 <__stack+0x179>
 a6c:	60 81       	ld	r22, Z
 a6e:	71 81       	ldd	r23, Z+1	; 0x01
 a70:	80 e0       	ldi	r24, 0x00	; 0
 a72:	90 e0       	ldi	r25, 0x00	; 0
 a74:	0e 5f       	subi	r16, 0xFE	; 254
 a76:	1f 4f       	sbci	r17, 0xFF	; 255
 a78:	a3 01       	movw	r20, r6
 a7a:	db d0       	rcall	.+438    	; 0xc32 <__ultoa_invert>
 a7c:	88 2e       	mov	r8, r24
 a7e:	86 18       	sub	r8, r6
 a80:	fb 2d       	mov	r31, r11
 a82:	ff 77       	andi	r31, 0x7F	; 127
 a84:	3f 2e       	mov	r3, r31
 a86:	36 fe       	sbrs	r3, 6
 a88:	0d c0       	rjmp	.+26     	; 0xaa4 <__stack+0x1a5>
 a8a:	23 2d       	mov	r18, r3
 a8c:	2e 7f       	andi	r18, 0xFE	; 254
 a8e:	a2 2e       	mov	r10, r18
 a90:	89 14       	cp	r8, r9
 a92:	58 f4       	brcc	.+22     	; 0xaaa <__stack+0x1ab>
 a94:	34 fe       	sbrs	r3, 4
 a96:	0b c0       	rjmp	.+22     	; 0xaae <__stack+0x1af>
 a98:	32 fc       	sbrc	r3, 2
 a9a:	09 c0       	rjmp	.+18     	; 0xaae <__stack+0x1af>
 a9c:	83 2d       	mov	r24, r3
 a9e:	8e 7e       	andi	r24, 0xEE	; 238
 aa0:	a8 2e       	mov	r10, r24
 aa2:	05 c0       	rjmp	.+10     	; 0xaae <__stack+0x1af>
 aa4:	b8 2c       	mov	r11, r8
 aa6:	a3 2c       	mov	r10, r3
 aa8:	03 c0       	rjmp	.+6      	; 0xab0 <__stack+0x1b1>
 aaa:	b8 2c       	mov	r11, r8
 aac:	01 c0       	rjmp	.+2      	; 0xab0 <__stack+0x1b1>
 aae:	b9 2c       	mov	r11, r9
 ab0:	a4 fe       	sbrs	r10, 4
 ab2:	0f c0       	rjmp	.+30     	; 0xad2 <__stack+0x1d3>
 ab4:	fe 01       	movw	r30, r28
 ab6:	e8 0d       	add	r30, r8
 ab8:	f1 1d       	adc	r31, r1
 aba:	80 81       	ld	r24, Z
 abc:	80 33       	cpi	r24, 0x30	; 48
 abe:	21 f4       	brne	.+8      	; 0xac8 <__stack+0x1c9>
 ac0:	9a 2d       	mov	r25, r10
 ac2:	99 7e       	andi	r25, 0xE9	; 233
 ac4:	a9 2e       	mov	r10, r25
 ac6:	09 c0       	rjmp	.+18     	; 0xada <__stack+0x1db>
 ac8:	a2 fe       	sbrs	r10, 2
 aca:	06 c0       	rjmp	.+12     	; 0xad8 <__stack+0x1d9>
 acc:	b3 94       	inc	r11
 ace:	b3 94       	inc	r11
 ad0:	04 c0       	rjmp	.+8      	; 0xada <__stack+0x1db>
 ad2:	8a 2d       	mov	r24, r10
 ad4:	86 78       	andi	r24, 0x86	; 134
 ad6:	09 f0       	breq	.+2      	; 0xada <__stack+0x1db>
 ad8:	b3 94       	inc	r11
 ada:	a3 fc       	sbrc	r10, 3
 adc:	10 c0       	rjmp	.+32     	; 0xafe <__stack+0x1ff>
 ade:	a0 fe       	sbrs	r10, 0
 ae0:	06 c0       	rjmp	.+12     	; 0xaee <__stack+0x1ef>
 ae2:	b2 14       	cp	r11, r2
 ae4:	80 f4       	brcc	.+32     	; 0xb06 <__stack+0x207>
 ae6:	28 0c       	add	r2, r8
 ae8:	92 2c       	mov	r9, r2
 aea:	9b 18       	sub	r9, r11
 aec:	0d c0       	rjmp	.+26     	; 0xb08 <__stack+0x209>
 aee:	b2 14       	cp	r11, r2
 af0:	58 f4       	brcc	.+22     	; 0xb08 <__stack+0x209>
 af2:	b6 01       	movw	r22, r12
 af4:	80 e2       	ldi	r24, 0x20	; 32
 af6:	90 e0       	ldi	r25, 0x00	; 0
 af8:	60 d0       	rcall	.+192    	; 0xbba <fputc>
 afa:	b3 94       	inc	r11
 afc:	f8 cf       	rjmp	.-16     	; 0xaee <__stack+0x1ef>
 afe:	b2 14       	cp	r11, r2
 b00:	18 f4       	brcc	.+6      	; 0xb08 <__stack+0x209>
 b02:	2b 18       	sub	r2, r11
 b04:	02 c0       	rjmp	.+4      	; 0xb0a <__stack+0x20b>
 b06:	98 2c       	mov	r9, r8
 b08:	21 2c       	mov	r2, r1
 b0a:	a4 fe       	sbrs	r10, 4
 b0c:	0f c0       	rjmp	.+30     	; 0xb2c <__stack+0x22d>
 b0e:	b6 01       	movw	r22, r12
 b10:	80 e3       	ldi	r24, 0x30	; 48
 b12:	90 e0       	ldi	r25, 0x00	; 0
 b14:	52 d0       	rcall	.+164    	; 0xbba <fputc>
 b16:	a2 fe       	sbrs	r10, 2
 b18:	16 c0       	rjmp	.+44     	; 0xb46 <__stack+0x247>
 b1a:	a1 fc       	sbrc	r10, 1
 b1c:	03 c0       	rjmp	.+6      	; 0xb24 <__stack+0x225>
 b1e:	88 e7       	ldi	r24, 0x78	; 120
 b20:	90 e0       	ldi	r25, 0x00	; 0
 b22:	02 c0       	rjmp	.+4      	; 0xb28 <__stack+0x229>
 b24:	88 e5       	ldi	r24, 0x58	; 88
 b26:	90 e0       	ldi	r25, 0x00	; 0
 b28:	b6 01       	movw	r22, r12
 b2a:	0c c0       	rjmp	.+24     	; 0xb44 <__stack+0x245>
 b2c:	8a 2d       	mov	r24, r10
 b2e:	86 78       	andi	r24, 0x86	; 134
 b30:	51 f0       	breq	.+20     	; 0xb46 <__stack+0x247>
 b32:	a1 fe       	sbrs	r10, 1
 b34:	02 c0       	rjmp	.+4      	; 0xb3a <__stack+0x23b>
 b36:	8b e2       	ldi	r24, 0x2B	; 43
 b38:	01 c0       	rjmp	.+2      	; 0xb3c <__stack+0x23d>
 b3a:	80 e2       	ldi	r24, 0x20	; 32
 b3c:	a7 fc       	sbrc	r10, 7
 b3e:	8d e2       	ldi	r24, 0x2D	; 45
 b40:	b6 01       	movw	r22, r12
 b42:	90 e0       	ldi	r25, 0x00	; 0
 b44:	3a d0       	rcall	.+116    	; 0xbba <fputc>
 b46:	89 14       	cp	r8, r9
 b48:	30 f4       	brcc	.+12     	; 0xb56 <__stack+0x257>
 b4a:	b6 01       	movw	r22, r12
 b4c:	80 e3       	ldi	r24, 0x30	; 48
 b4e:	90 e0       	ldi	r25, 0x00	; 0
 b50:	34 d0       	rcall	.+104    	; 0xbba <fputc>
 b52:	9a 94       	dec	r9
 b54:	f8 cf       	rjmp	.-16     	; 0xb46 <__stack+0x247>
 b56:	8a 94       	dec	r8
 b58:	f3 01       	movw	r30, r6
 b5a:	e8 0d       	add	r30, r8
 b5c:	f1 1d       	adc	r31, r1
 b5e:	80 81       	ld	r24, Z
 b60:	b6 01       	movw	r22, r12
 b62:	90 e0       	ldi	r25, 0x00	; 0
 b64:	2a d0       	rcall	.+84     	; 0xbba <fputc>
 b66:	81 10       	cpse	r8, r1
 b68:	f6 cf       	rjmp	.-20     	; 0xb56 <__stack+0x257>
 b6a:	22 20       	and	r2, r2
 b6c:	09 f4       	brne	.+2      	; 0xb70 <__stack+0x271>
 b6e:	4e ce       	rjmp	.-868    	; 0x80c <vfprintf+0x22>
 b70:	b6 01       	movw	r22, r12
 b72:	80 e2       	ldi	r24, 0x20	; 32
 b74:	90 e0       	ldi	r25, 0x00	; 0
 b76:	21 d0       	rcall	.+66     	; 0xbba <fputc>
 b78:	2a 94       	dec	r2
 b7a:	f7 cf       	rjmp	.-18     	; 0xb6a <__stack+0x26b>
 b7c:	f6 01       	movw	r30, r12
 b7e:	86 81       	ldd	r24, Z+6	; 0x06
 b80:	97 81       	ldd	r25, Z+7	; 0x07
 b82:	02 c0       	rjmp	.+4      	; 0xb88 <__stack+0x289>
 b84:	8f ef       	ldi	r24, 0xFF	; 255
 b86:	9f ef       	ldi	r25, 0xFF	; 255
 b88:	2b 96       	adiw	r28, 0x0b	; 11
 b8a:	e2 e1       	ldi	r30, 0x12	; 18
 b8c:	cc c0       	rjmp	.+408    	; 0xd26 <__epilogue_restores__>

00000b8e <strnlen_P>:
 b8e:	fc 01       	movw	r30, r24
 b90:	05 90       	lpm	r0, Z+
 b92:	61 50       	subi	r22, 0x01	; 1
 b94:	70 40       	sbci	r23, 0x00	; 0
 b96:	01 10       	cpse	r0, r1
 b98:	d8 f7       	brcc	.-10     	; 0xb90 <strnlen_P+0x2>
 b9a:	80 95       	com	r24
 b9c:	90 95       	com	r25
 b9e:	8e 0f       	add	r24, r30
 ba0:	9f 1f       	adc	r25, r31
 ba2:	08 95       	ret

00000ba4 <strnlen>:
 ba4:	fc 01       	movw	r30, r24
 ba6:	61 50       	subi	r22, 0x01	; 1
 ba8:	70 40       	sbci	r23, 0x00	; 0
 baa:	01 90       	ld	r0, Z+
 bac:	01 10       	cpse	r0, r1
 bae:	d8 f7       	brcc	.-10     	; 0xba6 <strnlen+0x2>
 bb0:	80 95       	com	r24
 bb2:	90 95       	com	r25
 bb4:	8e 0f       	add	r24, r30
 bb6:	9f 1f       	adc	r25, r31
 bb8:	08 95       	ret

00000bba <fputc>:
 bba:	0f 93       	push	r16
 bbc:	1f 93       	push	r17
 bbe:	cf 93       	push	r28
 bc0:	df 93       	push	r29
 bc2:	fb 01       	movw	r30, r22
 bc4:	23 81       	ldd	r18, Z+3	; 0x03
 bc6:	21 fd       	sbrc	r18, 1
 bc8:	03 c0       	rjmp	.+6      	; 0xbd0 <fputc+0x16>
 bca:	8f ef       	ldi	r24, 0xFF	; 255
 bcc:	9f ef       	ldi	r25, 0xFF	; 255
 bce:	2c c0       	rjmp	.+88     	; 0xc28 <fputc+0x6e>
 bd0:	22 ff       	sbrs	r18, 2
 bd2:	16 c0       	rjmp	.+44     	; 0xc00 <fputc+0x46>
 bd4:	46 81       	ldd	r20, Z+6	; 0x06
 bd6:	57 81       	ldd	r21, Z+7	; 0x07
 bd8:	24 81       	ldd	r18, Z+4	; 0x04
 bda:	35 81       	ldd	r19, Z+5	; 0x05
 bdc:	42 17       	cp	r20, r18
 bde:	53 07       	cpc	r21, r19
 be0:	44 f4       	brge	.+16     	; 0xbf2 <fputc+0x38>
 be2:	a0 81       	ld	r26, Z
 be4:	b1 81       	ldd	r27, Z+1	; 0x01
 be6:	9d 01       	movw	r18, r26
 be8:	2f 5f       	subi	r18, 0xFF	; 255
 bea:	3f 4f       	sbci	r19, 0xFF	; 255
 bec:	31 83       	std	Z+1, r19	; 0x01
 bee:	20 83       	st	Z, r18
 bf0:	8c 93       	st	X, r24
 bf2:	26 81       	ldd	r18, Z+6	; 0x06
 bf4:	37 81       	ldd	r19, Z+7	; 0x07
 bf6:	2f 5f       	subi	r18, 0xFF	; 255
 bf8:	3f 4f       	sbci	r19, 0xFF	; 255
 bfa:	37 83       	std	Z+7, r19	; 0x07
 bfc:	26 83       	std	Z+6, r18	; 0x06
 bfe:	14 c0       	rjmp	.+40     	; 0xc28 <fputc+0x6e>
 c00:	8b 01       	movw	r16, r22
 c02:	ec 01       	movw	r28, r24
 c04:	fb 01       	movw	r30, r22
 c06:	00 84       	ldd	r0, Z+8	; 0x08
 c08:	f1 85       	ldd	r31, Z+9	; 0x09
 c0a:	e0 2d       	mov	r30, r0
 c0c:	09 95       	icall
 c0e:	89 2b       	or	r24, r25
 c10:	e1 f6       	brne	.-72     	; 0xbca <fputc+0x10>
 c12:	d8 01       	movw	r26, r16
 c14:	16 96       	adiw	r26, 0x06	; 6
 c16:	8d 91       	ld	r24, X+
 c18:	9c 91       	ld	r25, X
 c1a:	17 97       	sbiw	r26, 0x07	; 7
 c1c:	01 96       	adiw	r24, 0x01	; 1
 c1e:	17 96       	adiw	r26, 0x07	; 7
 c20:	9c 93       	st	X, r25
 c22:	8e 93       	st	-X, r24
 c24:	16 97       	sbiw	r26, 0x06	; 6
 c26:	ce 01       	movw	r24, r28
 c28:	df 91       	pop	r29
 c2a:	cf 91       	pop	r28
 c2c:	1f 91       	pop	r17
 c2e:	0f 91       	pop	r16
 c30:	08 95       	ret

00000c32 <__ultoa_invert>:
 c32:	fa 01       	movw	r30, r20
 c34:	aa 27       	eor	r26, r26
 c36:	28 30       	cpi	r18, 0x08	; 8
 c38:	51 f1       	breq	.+84     	; 0xc8e <__ultoa_invert+0x5c>
 c3a:	20 31       	cpi	r18, 0x10	; 16
 c3c:	81 f1       	breq	.+96     	; 0xc9e <__ultoa_invert+0x6c>
 c3e:	e8 94       	clt
 c40:	6f 93       	push	r22
 c42:	6e 7f       	andi	r22, 0xFE	; 254
 c44:	6e 5f       	subi	r22, 0xFE	; 254
 c46:	7f 4f       	sbci	r23, 0xFF	; 255
 c48:	8f 4f       	sbci	r24, 0xFF	; 255
 c4a:	9f 4f       	sbci	r25, 0xFF	; 255
 c4c:	af 4f       	sbci	r26, 0xFF	; 255
 c4e:	b1 e0       	ldi	r27, 0x01	; 1
 c50:	3e d0       	rcall	.+124    	; 0xcce <__ultoa_invert+0x9c>
 c52:	b4 e0       	ldi	r27, 0x04	; 4
 c54:	3c d0       	rcall	.+120    	; 0xcce <__ultoa_invert+0x9c>
 c56:	67 0f       	add	r22, r23
 c58:	78 1f       	adc	r23, r24
 c5a:	89 1f       	adc	r24, r25
 c5c:	9a 1f       	adc	r25, r26
 c5e:	a1 1d       	adc	r26, r1
 c60:	68 0f       	add	r22, r24
 c62:	79 1f       	adc	r23, r25
 c64:	8a 1f       	adc	r24, r26
 c66:	91 1d       	adc	r25, r1
 c68:	a1 1d       	adc	r26, r1
 c6a:	6a 0f       	add	r22, r26
 c6c:	71 1d       	adc	r23, r1
 c6e:	81 1d       	adc	r24, r1
 c70:	91 1d       	adc	r25, r1
 c72:	a1 1d       	adc	r26, r1
 c74:	20 d0       	rcall	.+64     	; 0xcb6 <__ultoa_invert+0x84>
 c76:	09 f4       	brne	.+2      	; 0xc7a <__ultoa_invert+0x48>
 c78:	68 94       	set
 c7a:	3f 91       	pop	r19
 c7c:	2a e0       	ldi	r18, 0x0A	; 10
 c7e:	26 9f       	mul	r18, r22
 c80:	11 24       	eor	r1, r1
 c82:	30 19       	sub	r19, r0
 c84:	30 5d       	subi	r19, 0xD0	; 208
 c86:	31 93       	st	Z+, r19
 c88:	de f6       	brtc	.-74     	; 0xc40 <__ultoa_invert+0xe>
 c8a:	cf 01       	movw	r24, r30
 c8c:	08 95       	ret
 c8e:	46 2f       	mov	r20, r22
 c90:	47 70       	andi	r20, 0x07	; 7
 c92:	40 5d       	subi	r20, 0xD0	; 208
 c94:	41 93       	st	Z+, r20
 c96:	b3 e0       	ldi	r27, 0x03	; 3
 c98:	0f d0       	rcall	.+30     	; 0xcb8 <__ultoa_invert+0x86>
 c9a:	c9 f7       	brne	.-14     	; 0xc8e <__ultoa_invert+0x5c>
 c9c:	f6 cf       	rjmp	.-20     	; 0xc8a <__ultoa_invert+0x58>
 c9e:	46 2f       	mov	r20, r22
 ca0:	4f 70       	andi	r20, 0x0F	; 15
 ca2:	40 5d       	subi	r20, 0xD0	; 208
 ca4:	4a 33       	cpi	r20, 0x3A	; 58
 ca6:	18 f0       	brcs	.+6      	; 0xcae <__ultoa_invert+0x7c>
 ca8:	49 5d       	subi	r20, 0xD9	; 217
 caa:	31 fd       	sbrc	r19, 1
 cac:	40 52       	subi	r20, 0x20	; 32
 cae:	41 93       	st	Z+, r20
 cb0:	02 d0       	rcall	.+4      	; 0xcb6 <__ultoa_invert+0x84>
 cb2:	a9 f7       	brne	.-22     	; 0xc9e <__ultoa_invert+0x6c>
 cb4:	ea cf       	rjmp	.-44     	; 0xc8a <__ultoa_invert+0x58>
 cb6:	b4 e0       	ldi	r27, 0x04	; 4
 cb8:	a6 95       	lsr	r26
 cba:	97 95       	ror	r25
 cbc:	87 95       	ror	r24
 cbe:	77 95       	ror	r23
 cc0:	67 95       	ror	r22
 cc2:	ba 95       	dec	r27
 cc4:	c9 f7       	brne	.-14     	; 0xcb8 <__ultoa_invert+0x86>
 cc6:	00 97       	sbiw	r24, 0x00	; 0
 cc8:	61 05       	cpc	r22, r1
 cca:	71 05       	cpc	r23, r1
 ccc:	08 95       	ret
 cce:	9b 01       	movw	r18, r22
 cd0:	ac 01       	movw	r20, r24
 cd2:	0a 2e       	mov	r0, r26
 cd4:	06 94       	lsr	r0
 cd6:	57 95       	ror	r21
 cd8:	47 95       	ror	r20
 cda:	37 95       	ror	r19
 cdc:	27 95       	ror	r18
 cde:	ba 95       	dec	r27
 ce0:	c9 f7       	brne	.-14     	; 0xcd4 <__ultoa_invert+0xa2>
 ce2:	62 0f       	add	r22, r18
 ce4:	73 1f       	adc	r23, r19
 ce6:	84 1f       	adc	r24, r20
 ce8:	95 1f       	adc	r25, r21
 cea:	a0 1d       	adc	r26, r0
 cec:	08 95       	ret

00000cee <__prologue_saves__>:
 cee:	2f 92       	push	r2
 cf0:	3f 92       	push	r3
 cf2:	4f 92       	push	r4
 cf4:	5f 92       	push	r5
 cf6:	6f 92       	push	r6
 cf8:	7f 92       	push	r7
 cfa:	8f 92       	push	r8
 cfc:	9f 92       	push	r9
 cfe:	af 92       	push	r10
 d00:	bf 92       	push	r11
 d02:	cf 92       	push	r12
 d04:	df 92       	push	r13
 d06:	ef 92       	push	r14
 d08:	ff 92       	push	r15
 d0a:	0f 93       	push	r16
 d0c:	1f 93       	push	r17
 d0e:	cf 93       	push	r28
 d10:	df 93       	push	r29
 d12:	cd b7       	in	r28, 0x3d	; 61
 d14:	de b7       	in	r29, 0x3e	; 62
 d16:	ca 1b       	sub	r28, r26
 d18:	db 0b       	sbc	r29, r27
 d1a:	0f b6       	in	r0, 0x3f	; 63
 d1c:	f8 94       	cli
 d1e:	de bf       	out	0x3e, r29	; 62
 d20:	0f be       	out	0x3f, r0	; 63
 d22:	cd bf       	out	0x3d, r28	; 61
 d24:	09 94       	ijmp

00000d26 <__epilogue_restores__>:
 d26:	2a 88       	ldd	r2, Y+18	; 0x12
 d28:	39 88       	ldd	r3, Y+17	; 0x11
 d2a:	48 88       	ldd	r4, Y+16	; 0x10
 d2c:	5f 84       	ldd	r5, Y+15	; 0x0f
 d2e:	6e 84       	ldd	r6, Y+14	; 0x0e
 d30:	7d 84       	ldd	r7, Y+13	; 0x0d
 d32:	8c 84       	ldd	r8, Y+12	; 0x0c
 d34:	9b 84       	ldd	r9, Y+11	; 0x0b
 d36:	aa 84       	ldd	r10, Y+10	; 0x0a
 d38:	b9 84       	ldd	r11, Y+9	; 0x09
 d3a:	c8 84       	ldd	r12, Y+8	; 0x08
 d3c:	df 80       	ldd	r13, Y+7	; 0x07
 d3e:	ee 80       	ldd	r14, Y+6	; 0x06
 d40:	fd 80       	ldd	r15, Y+5	; 0x05
 d42:	0c 81       	ldd	r16, Y+4	; 0x04
 d44:	1b 81       	ldd	r17, Y+3	; 0x03
 d46:	aa 81       	ldd	r26, Y+2	; 0x02
 d48:	b9 81       	ldd	r27, Y+1	; 0x01
 d4a:	ce 0f       	add	r28, r30
 d4c:	d1 1d       	adc	r29, r1
 d4e:	0f b6       	in	r0, 0x3f	; 63
 d50:	f8 94       	cli
 d52:	de bf       	out	0x3e, r29	; 62
 d54:	0f be       	out	0x3f, r0	; 63
 d56:	cd bf       	out	0x3d, r28	; 61
 d58:	ed 01       	movw	r28, r26
 d5a:	08 95       	ret

00000d5c <_exit>:
 d5c:	f8 94       	cli

00000d5e <__stop_program>:
 d5e:	ff cf       	rjmp	.-2      	; 0xd5e <__stop_program>
